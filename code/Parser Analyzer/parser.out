Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COS
    READ
    LABEL
    CHAR
    EXP
    LBLOCK
    COMMENTBLOCK
    TRUE
    LN
    POT
    AMPERSANT
    SQR
    NUMBER
    RBLOCK
    WRITE
    FALSE
    QUOT
    DISTINT
    SQRT
    BOOLEAN
    SIN
    COMMENTLINE
    HASHTAG
    TYPE

Grammar

Rule 0     S' -> pascal-program
Rule 1     pascal-program -> PROGRAM ID program-heading SEMICOLON block DOT
Rule 2     pascal-program -> PROGRAM ID SEMICOLON
Rule 3     program-heading -> LPAREN identifier-list RPAREN
Rule 4     identifier-list -> ID
Rule 5     identifier-list -> identifier-list COMMA ID
Rule 6     block -> block1
Rule 7     block -> label-declaration SEMICOLON block1
Rule 8     block1 -> block2
Rule 9     block1 -> constant-declaration SEMICOLON block2
Rule 10    block2 -> block3
Rule 11    block2 -> type-declaration SEMICOLON block3
Rule 12    block3 -> block4
Rule 13    block3 -> variable-declaration SEMICOLON block4
Rule 14    block4 -> block5
Rule 15    block4 -> proc-and-func-declaration SEMICOLON block5
Rule 16    block5 -> BEGIN statement-list END
Rule 17    label-declaration -> label INTEGER
Rule 18    label-declaration -> label-declaration COMMA INTEGER
Rule 19    constant-declaration -> CONST ID COMPARATION constant
Rule 20    constant-declaration -> constant-declaration SEMICOLON ID COMPARATION constant
Rule 21    type-declaration -> type ID COMPARATION type
Rule 22    type-declaration -> type-declaration SEMICOLON ID COMPARATION type
Rule 23    variable-declaration -> VAR variableid-list COLON type SEMICOLON
Rule 24    variable-declaration -> variable-declaration SEMICOLON variableid-list COLON type
Rule 25    variableid-list -> ID
Rule 26    variableid-list -> variableid-list COMMA ID
Rule 27    constant -> INTEGER
Rule 28    constant -> REAL
Rule 29    constant -> STRING
Rule 30    constant -> constid
Rule 31    constant -> PLUS constid
Rule 32    type -> simple-type
Rule 33    type -> structured-type
Rule 34    type -> typeid
Rule 35    type -> INTEGER
Rule 36    type -> REAL
Rule 37    type -> STRING
Rule 38    type -> constid
Rule 39    type -> PLUS constid
Rule 40    simple-type -> LPAREN identifier-list RPAREN
Rule 41    simple-type -> constant
Rule 42    simple-type -> typeid
Rule 43    structured-type -> ARRAY LBRACKET index-list RBRACKET OF type
Rule 44    structured-type -> RECORD field-list END
Rule 45    structured-type -> SET OF simple-type
Rule 46    structured-type -> FILE OF type
Rule 47    structured-type -> PACKED structured-type
Rule 48    index-list -> simple-type
Rule 49    index-list -> index-list COMMA simple-type
Rule 50    field-list -> fixed-part
Rule 51    field-list -> fixed-part SEMICOLON variant-part
Rule 52    field-list -> variant-part
Rule 53    fixed-part -> record-field
Rule 54    fixed-part -> fixed-part SEMICOLON record-field
Rule 55    record-field -> empty
Rule 56    record-field -> fieldid-list COLON type
Rule 57    fieldid-list -> ID
Rule 58    fieldid-list -> fieldid-list COMMA ID
Rule 59    variant-part -> CASE tag-field OF variant-list
Rule 60    tag-field -> typeid
Rule 61    tag-field -> ID COLON typeid
Rule 62    variant-list -> variant
Rule 63    variant-list -> variant-list SEMICOLON variant
Rule 64    variant -> empty
Rule 65    variant -> case-label-list COLON LPAREN field-list RPAREN
Rule 66    case-label-list -> constant
Rule 67    case-label-list -> case-label-list COMMA constant
Rule 68    proc-and-func-declaration -> proc-or-func
Rule 69    proc-and-func-declaration -> proc-and-func-declaration SEMICOLON proc-or-func
Rule 70    proc-or-func -> PROCEDURE ID parameters SEMICOLON block-or-forward
Rule 71    proc-or-func -> FUNCTION ID parameters COLON typeid SEMICOLON block-or-forward
Rule 72    block-or-forward -> block
Rule 73    block-or-forward -> FORWARD
Rule 74    parameters -> LPAREN formal-parameter-list RPAREN
Rule 75    formal-parameter-list -> formal-parameter-section
Rule 76    formal-parameter-list -> formal-parameter-list SEMICOLON formal-parameter-section
Rule 77    formal-parameter-section -> parameterid-list COLON typeid
Rule 78    formal-parameter-section -> VAR parameterid-list COLON typeid
Rule 79    formal-parameter-section -> PROCEDURE ID parameters
Rule 80    formal-parameter-section -> FUNCTION ID parameters COLON typeid
Rule 81    parameterid-list -> ID
Rule 82    parameterid-list -> parameterid-list COMMA ID
Rule 83    statement-list -> statement
Rule 84    statement-list -> statement-list SEMICOLON statement
Rule 85    statement -> empty
Rule 86    statement -> variable EQUAL expression
Rule 87    statement -> BEGIN statement-list END
Rule 88    statement -> IF expression THEN statement
Rule 89    statement -> IF expression THEN statement ELSE statement
Rule 90    statement -> CASE expression OF case-list END
Rule 91    statement -> WHILE expression DO statement
Rule 92    statement -> REPEAT statement-list UNTIL expression
Rule 93    statement -> FOR varid EQUAL for-list DO statement
Rule 94    statement -> procid
Rule 95    statement -> procid LPAREN expression-list RPAREN
Rule 96    statement -> GOTO label
Rule 97    statement -> WITH record-variable-list DO statement
Rule 98    statement -> label COLON statement
Rule 99    variable -> ID
Rule 100   variable -> variable LBRACKET subscript-list RBRACKET
Rule 101   variable -> variable COMMA fieldid
Rule 102   variable -> variable
Rule 103   subscript-list -> expression
Rule 104   subscript-list -> subscript-list COMMA expression
Rule 105   case-list -> case-label-list COLON statement
Rule 106   case-list -> case-list SEMICOLON case-label-list COLON statement
Rule 107   for-list -> expression TO expression
Rule 108   for-list -> expression DOWNTO expression
Rule 109   expression-list -> expression
Rule 110   expression-list -> expression-list COMMA expression
Rule 111   label -> INTEGER
Rule 112   record-variable-list -> variable
Rule 113   record-variable-list -> record-variable-list COMMA variable
Rule 114   expression -> expression relational-op additive-expression
Rule 115   expression -> additive-expression
Rule 116   relational-op -> LESS
Rule 117   relational-op -> LESSEQUAL
Rule 118   relational-op -> EQUAL
Rule 119   relational-op -> DEQUAL
Rule 120   relational-op -> GREATEREQUAL
Rule 121   relational-op -> GREATER
Rule 122   additive-expression -> additive-expression additive-op multiplicative-expression
Rule 123   additive-expression -> multiplicative-expression
Rule 124   additive-op -> PLUS
Rule 125   additive-op -> MINUS
Rule 126   additive-op -> OR
Rule 127   multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression
Rule 128   multiplicative-expression -> unary-expression
Rule 129   multiplicative-op -> TIMES
Rule 130   multiplicative-op -> DIVIDE
Rule 131   multiplicative-op -> DIV
Rule 132   multiplicative-op -> MOD
Rule 133   multiplicative-op -> AND
Rule 134   multiplicative-op -> IN
Rule 135   unary-expression -> unary-op unary-expression
Rule 136   unary-expression -> primary-expression
Rule 137   unary-op -> PLUS
Rule 138   unary-op -> MINUS
Rule 139   unary-op -> NOT
Rule 140   primary-expression -> variable
Rule 141   primary-expression -> INTEGER
Rule 142   primary-expression -> REAL
Rule 143   primary-expression -> STRING
Rule 144   primary-expression -> NIL
Rule 145   primary-expression -> funcid LPAREN expression-list RPAREN
Rule 146   primary-expression -> LBRACKET element-list RBRACKET
Rule 147   primary-expression -> LPAREN expression RPAREN
Rule 148   element-list -> empty
Rule 149   element-list -> element
Rule 150   element-list -> element-list COMMA element
Rule 151   element -> expression
Rule 152   element -> expression DOT DOT DOT expression
Rule 153   constid -> ID
Rule 154   typeid -> ID
Rule 155   funcid -> ID
Rule 156   procid -> ID
Rule 157   fieldid -> ID
Rule 158   varid -> ID
Rule 159   empty -> <empty>

Terminals, with rules where they appear

AMPERSANT            : 
AND                  : 133
ARRAY                : 43
BEGIN                : 16 87
BOOLEAN              : 
CASE                 : 59 90
CHAR                 : 
COLON                : 23 24 56 61 65 71 77 78 80 98 105 106
COMMA                : 5 18 26 49 58 67 82 101 104 110 113 150
COMMENTBLOCK         : 
COMMENTLINE          : 
COMPARATION          : 19 20 21 22
CONST                : 19
COS                  : 
DEQUAL               : 119
DISTINT              : 
DIV                  : 131
DIVIDE               : 130
DO                   : 91 93 97
DOT                  : 1 152 152 152
DOWNTO               : 108
ELSE                 : 89
END                  : 16 44 87 90
EQUAL                : 86 93 118
EXP                  : 
FALSE                : 
FILE                 : 46
FOR                  : 93
FORWARD              : 73
FUNCTION             : 71 80
GOTO                 : 96
GREATER              : 121
GREATEREQUAL         : 120
HASHTAG              : 
ID                   : 1 2 4 5 19 20 21 22 25 26 57 58 61 70 71 79 80 81 82 99 153 154 155 156 157 158
IF                   : 88 89
IN                   : 134
INTEGER              : 17 18 27 35 111 141
LABEL                : 
LBLOCK               : 
LBRACKET             : 43 100 146
LESS                 : 116
LESSEQUAL            : 117
LN                   : 
LPAREN               : 3 40 65 74 95 145 147
MINUS                : 125 138
MOD                  : 132
NIL                  : 144
NOT                  : 139
NUMBER               : 
OF                   : 43 45 46 59 90
OR                   : 126
PACKED               : 47
PLUS                 : 31 39 124 137
POT                  : 
PROCEDURE            : 70 79
PROGRAM              : 1 2
QUOT                 : 
RBLOCK               : 
RBRACKET             : 43 100 146
READ                 : 
REAL                 : 28 36 142
RECORD               : 44
REPEAT               : 92
RPAREN               : 3 40 65 74 95 145 147
SEMICOLON            : 1 2 7 9 11 13 15 20 22 23 24 51 54 63 69 70 71 76 84 106
SET                  : 45
SIN                  : 
SQR                  : 
SQRT                 : 
STRING               : 29 37 143
THEN                 : 88 89
TIMES                : 129
TO                   : 107
TRUE                 : 
TYPE                 : 
UNTIL                : 92
VAR                  : 23 78
WHILE                : 91
WITH                 : 97
WRITE                : 
error                : 

Nonterminals, with rules where they appear

additive-expression  : 114 115 122
additive-op          : 122
block                : 1 72
block-or-forward     : 70 71
block1               : 6 7
block2               : 8 9
block3               : 10 11
block4               : 12 13
block5               : 14 15
case-label-list      : 65 67 105 106
case-list            : 90 106
constant             : 19 20 41 66 67
constant-declaration : 9 20
constid              : 30 31 38 39
element              : 149 150
element-list         : 146 150
empty                : 55 64 85 148
expression           : 86 88 89 90 91 92 103 104 107 107 108 108 109 110 114 147 151 152 152
expression-list      : 95 110 145
field-list           : 44 65
fieldid              : 101
fieldid-list         : 56 58
fixed-part           : 50 51 54
for-list             : 93
formal-parameter-list : 74 76
formal-parameter-section : 75 76
funcid               : 145
identifier-list      : 3 5 40
index-list           : 43 49
label                : 17 96 98
label-declaration    : 7 18
multiplicative-expression : 122 123 127
multiplicative-op    : 127
parameterid-list     : 77 78 82
parameters           : 70 71 79 80
pascal-program       : 0
primary-expression   : 136
proc-and-func-declaration : 15 69
proc-or-func         : 68 69
procid               : 94 95
program-heading      : 1
record-field         : 53 54
record-variable-list : 97 113
relational-op        : 114
simple-type          : 32 45 48 49
statement            : 83 84 88 89 89 91 93 97 98 105 106
statement-list       : 16 84 87 92
structured-type      : 33 47
subscript-list       : 100 104
tag-field            : 59
type                 : 21 21 22 23 24 43 46 56
type-declaration     : 11 22
typeid               : 34 42 60 61 71 77 78 80
unary-expression     : 127 128 135
unary-op             : 135
variable             : 86 100 101 102 112 113 140
variable-declaration : 13 24
variableid-list      : 23 24 26
variant              : 62 63
variant-list         : 59 63
variant-part         : 51 52
varid                : 93

Parsing method: LALR

state 0

    (0) S' -> . pascal-program
    (1) pascal-program -> . PROGRAM ID program-heading SEMICOLON block DOT
    (2) pascal-program -> . PROGRAM ID SEMICOLON

    PROGRAM         shift and go to state 2

    pascal-program                 shift and go to state 1

state 1

    (0) S' -> pascal-program .



state 2

    (1) pascal-program -> PROGRAM . ID program-heading SEMICOLON block DOT
    (2) pascal-program -> PROGRAM . ID SEMICOLON

    ID              shift and go to state 3


state 3

    (1) pascal-program -> PROGRAM ID . program-heading SEMICOLON block DOT
    (2) pascal-program -> PROGRAM ID . SEMICOLON
    (3) program-heading -> . LPAREN identifier-list RPAREN

    SEMICOLON       shift and go to state 4
    LPAREN          shift and go to state 6

    program-heading                shift and go to state 5

state 4

    (2) pascal-program -> PROGRAM ID SEMICOLON .

    $end            reduce using rule 2 (pascal-program -> PROGRAM ID SEMICOLON .)


state 5

    (1) pascal-program -> PROGRAM ID program-heading . SEMICOLON block DOT

    SEMICOLON       shift and go to state 7


state 6

    (3) program-heading -> LPAREN . identifier-list RPAREN
    (4) identifier-list -> . ID
    (5) identifier-list -> . identifier-list COMMA ID

    ID              shift and go to state 9

    identifier-list                shift and go to state 8

state 7

    (1) pascal-program -> PROGRAM ID program-heading SEMICOLON . block DOT
    (6) block -> . block1
    (7) block -> . label-declaration SEMICOLON block1
    (8) block1 -> . block2
    (9) block1 -> . constant-declaration SEMICOLON block2
    (17) label-declaration -> . label INTEGER
    (18) label-declaration -> . label-declaration COMMA INTEGER
    (10) block2 -> . block3
    (11) block2 -> . type-declaration SEMICOLON block3
    (19) constant-declaration -> . CONST ID COMPARATION constant
    (20) constant-declaration -> . constant-declaration SEMICOLON ID COMPARATION constant
    (111) label -> . INTEGER
    (12) block3 -> . block4
    (13) block3 -> . variable-declaration SEMICOLON block4
    (21) type-declaration -> . type ID COMPARATION type
    (22) type-declaration -> . type-declaration SEMICOLON ID COMPARATION type
    (14) block4 -> . block5
    (15) block4 -> . proc-and-func-declaration SEMICOLON block5
    (23) variable-declaration -> . VAR variableid-list COLON type SEMICOLON
    (24) variable-declaration -> . variable-declaration SEMICOLON variableid-list COLON type
    (32) type -> . simple-type
    (33) type -> . structured-type
    (34) type -> . typeid
    (35) type -> . INTEGER
    (36) type -> . REAL
    (37) type -> . STRING
    (38) type -> . constid
    (39) type -> . PLUS constid
    (16) block5 -> . BEGIN statement-list END
    (68) proc-and-func-declaration -> . proc-or-func
    (69) proc-and-func-declaration -> . proc-and-func-declaration SEMICOLON proc-or-func
    (40) simple-type -> . LPAREN identifier-list RPAREN
    (41) simple-type -> . constant
    (42) simple-type -> . typeid
    (43) structured-type -> . ARRAY LBRACKET index-list RBRACKET OF type
    (44) structured-type -> . RECORD field-list END
    (45) structured-type -> . SET OF simple-type
    (46) structured-type -> . FILE OF type
    (47) structured-type -> . PACKED structured-type
    (154) typeid -> . ID
    (153) constid -> . ID
    (70) proc-or-func -> . PROCEDURE ID parameters SEMICOLON block-or-forward
    (71) proc-or-func -> . FUNCTION ID parameters COLON typeid SEMICOLON block-or-forward
    (27) constant -> . INTEGER
    (28) constant -> . REAL
    (29) constant -> . STRING
    (30) constant -> . constid
    (31) constant -> . PLUS constid

    CONST           shift and go to state 17
    INTEGER         shift and go to state 27
    VAR             shift and go to state 38
    REAL            shift and go to state 10
    STRING          shift and go to state 33
    PLUS            shift and go to state 32
    BEGIN           shift and go to state 22
    LPAREN          shift and go to state 37
    ARRAY           shift and go to state 18
    RECORD          shift and go to state 24
    SET             shift and go to state 43
    FILE            shift and go to state 20
    PACKED          shift and go to state 35
    ID              shift and go to state 39
    PROCEDURE       shift and go to state 40
    FUNCTION        shift and go to state 11

    block5                         shift and go to state 12
    block4                         shift and go to state 13
    label-declaration              shift and go to state 14
    block2                         shift and go to state 15
    block1                         shift and go to state 16
    simple-type                    shift and go to state 19
    block3                         shift and go to state 21
    label                          shift and go to state 23
    type-declaration               shift and go to state 25
    proc-or-func                   shift and go to state 26
    constant                       shift and go to state 28
    constant-declaration           shift and go to state 29
    type                           shift and go to state 30
    constid                        shift and go to state 31
    typeid                         shift and go to state 34
    proc-and-func-declaration      shift and go to state 36
    variable-declaration           shift and go to state 41
    structured-type                shift and go to state 42
    block                          shift and go to state 44

state 8

    (3) program-heading -> LPAREN identifier-list . RPAREN
    (5) identifier-list -> identifier-list . COMMA ID

    RPAREN          shift and go to state 46
    COMMA           shift and go to state 45


state 9

    (4) identifier-list -> ID .

    RPAREN          reduce using rule 4 (identifier-list -> ID .)
    COMMA           reduce using rule 4 (identifier-list -> ID .)


state 10

    (36) type -> REAL .
    (28) constant -> REAL .

  ! reduce/reduce conflict for ID resolved using rule 28 (constant -> REAL .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 28 (constant -> REAL .)
  ! reduce/reduce conflict for END resolved using rule 28 (constant -> REAL .)
  ! reduce/reduce conflict for RPAREN resolved using rule 28 (constant -> REAL .)
    ID              reduce using rule 28 (constant -> REAL .)
    SEMICOLON       reduce using rule 28 (constant -> REAL .)
    END             reduce using rule 28 (constant -> REAL .)
    RPAREN          reduce using rule 28 (constant -> REAL .)

  ! SEMICOLON       [ reduce using rule 36 (type -> REAL .) ]
  ! ID              [ reduce using rule 36 (type -> REAL .) ]
  ! END             [ reduce using rule 36 (type -> REAL .) ]
  ! RPAREN          [ reduce using rule 36 (type -> REAL .) ]


state 11

    (71) proc-or-func -> FUNCTION . ID parameters COLON typeid SEMICOLON block-or-forward

    ID              shift and go to state 47


state 12

    (14) block4 -> block5 .

    DOT             reduce using rule 14 (block4 -> block5 .)
    SEMICOLON       reduce using rule 14 (block4 -> block5 .)


state 13

    (12) block3 -> block4 .

    DOT             reduce using rule 12 (block3 -> block4 .)
    SEMICOLON       reduce using rule 12 (block3 -> block4 .)


state 14

    (7) block -> label-declaration . SEMICOLON block1
    (18) label-declaration -> label-declaration . COMMA INTEGER

    SEMICOLON       shift and go to state 49
    COMMA           shift and go to state 48


state 15

    (8) block1 -> block2 .

    DOT             reduce using rule 8 (block1 -> block2 .)
    SEMICOLON       reduce using rule 8 (block1 -> block2 .)


state 16

    (6) block -> block1 .

    SEMICOLON       reduce using rule 6 (block -> block1 .)
    DOT             reduce using rule 6 (block -> block1 .)


state 17

    (19) constant-declaration -> CONST . ID COMPARATION constant

    ID              shift and go to state 50


state 18

    (43) structured-type -> ARRAY . LBRACKET index-list RBRACKET OF type

    LBRACKET        shift and go to state 51


state 19

    (32) type -> simple-type .

    SEMICOLON       reduce using rule 32 (type -> simple-type .)
    ID              reduce using rule 32 (type -> simple-type .)
    END             reduce using rule 32 (type -> simple-type .)
    RPAREN          reduce using rule 32 (type -> simple-type .)


state 20

    (46) structured-type -> FILE . OF type

    OF              shift and go to state 52


state 21

    (10) block2 -> block3 .

    DOT             reduce using rule 10 (block2 -> block3 .)
    SEMICOLON       reduce using rule 10 (block2 -> block3 .)


state 22

    (16) block5 -> BEGIN . statement-list END
    (83) statement-list -> . statement
    (84) statement-list -> . statement-list SEMICOLON statement
    (85) statement -> . empty
    (86) statement -> . variable EQUAL expression
    (87) statement -> . BEGIN statement-list END
    (88) statement -> . IF expression THEN statement
    (89) statement -> . IF expression THEN statement ELSE statement
    (90) statement -> . CASE expression OF case-list END
    (91) statement -> . WHILE expression DO statement
    (92) statement -> . REPEAT statement-list UNTIL expression
    (93) statement -> . FOR varid EQUAL for-list DO statement
    (94) statement -> . procid
    (95) statement -> . procid LPAREN expression-list RPAREN
    (96) statement -> . GOTO label
    (97) statement -> . WITH record-variable-list DO statement
    (98) statement -> . label COLON statement
    (159) empty -> .
    (99) variable -> . ID
    (100) variable -> . variable LBRACKET subscript-list RBRACKET
    (101) variable -> . variable COMMA fieldid
    (102) variable -> . variable
    (156) procid -> . ID
    (111) label -> . INTEGER

    BEGIN           shift and go to state 56
    IF              shift and go to state 66
    CASE            shift and go to state 55
    WHILE           shift and go to state 53
    REPEAT          shift and go to state 60
    FOR             shift and go to state 62
    GOTO            shift and go to state 61
    WITH            shift and go to state 54
    END             reduce using rule 159 (empty -> .)
    SEMICOLON       reduce using rule 159 (empty -> .)
    ID              shift and go to state 65
    INTEGER         shift and go to state 63

    procid                         shift and go to state 67
    statement-list                 shift and go to state 68
    label                          shift and go to state 57
    statement                      shift and go to state 58
    variable                       shift and go to state 64
    empty                          shift and go to state 59

state 23

    (17) label-declaration -> label . INTEGER

    INTEGER         shift and go to state 69


state 24

    (44) structured-type -> RECORD . field-list END
    (50) field-list -> . fixed-part
    (51) field-list -> . fixed-part SEMICOLON variant-part
    (52) field-list -> . variant-part
    (53) fixed-part -> . record-field
    (54) fixed-part -> . fixed-part SEMICOLON record-field
    (59) variant-part -> . CASE tag-field OF variant-list
    (55) record-field -> . empty
    (56) record-field -> . fieldid-list COLON type
    (159) empty -> .
    (57) fieldid-list -> . ID
    (58) fieldid-list -> . fieldid-list COMMA ID

    CASE            shift and go to state 71
    SEMICOLON       reduce using rule 159 (empty -> .)
    END             reduce using rule 159 (empty -> .)
    ID              shift and go to state 76

    record-field                   shift and go to state 70
    fixed-part                     shift and go to state 72
    fieldid-list                   shift and go to state 73
    field-list                     shift and go to state 74
    variant-part                   shift and go to state 75
    empty                          shift and go to state 77

state 25

    (11) block2 -> type-declaration . SEMICOLON block3
    (22) type-declaration -> type-declaration . SEMICOLON ID COMPARATION type

    SEMICOLON       shift and go to state 78


state 26

    (68) proc-and-func-declaration -> proc-or-func .

    SEMICOLON       reduce using rule 68 (proc-and-func-declaration -> proc-or-func .)


state 27

    (111) label -> INTEGER .
    (35) type -> INTEGER .
    (27) constant -> INTEGER .

  ! reduce/reduce conflict for ID resolved using rule 27 (constant -> INTEGER .)
    INTEGER         reduce using rule 111 (label -> INTEGER .)
    ID              reduce using rule 27 (constant -> INTEGER .)

  ! ID              [ reduce using rule 35 (type -> INTEGER .) ]


state 28

    (41) simple-type -> constant .

    SEMICOLON       reduce using rule 41 (simple-type -> constant .)
    ID              reduce using rule 41 (simple-type -> constant .)
    END             reduce using rule 41 (simple-type -> constant .)
    RPAREN          reduce using rule 41 (simple-type -> constant .)
    RBRACKET        reduce using rule 41 (simple-type -> constant .)
    COMMA           reduce using rule 41 (simple-type -> constant .)


state 29

    (9) block1 -> constant-declaration . SEMICOLON block2
    (20) constant-declaration -> constant-declaration . SEMICOLON ID COMPARATION constant

    SEMICOLON       shift and go to state 79


state 30

    (21) type-declaration -> type . ID COMPARATION type

    ID              shift and go to state 80


state 31

    (38) type -> constid .
    (30) constant -> constid .

  ! reduce/reduce conflict for ID resolved using rule 30 (constant -> constid .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 30 (constant -> constid .)
  ! reduce/reduce conflict for END resolved using rule 30 (constant -> constid .)
  ! reduce/reduce conflict for RPAREN resolved using rule 30 (constant -> constid .)
    ID              reduce using rule 30 (constant -> constid .)
    SEMICOLON       reduce using rule 30 (constant -> constid .)
    END             reduce using rule 30 (constant -> constid .)
    RPAREN          reduce using rule 30 (constant -> constid .)

  ! SEMICOLON       [ reduce using rule 38 (type -> constid .) ]
  ! ID              [ reduce using rule 38 (type -> constid .) ]
  ! END             [ reduce using rule 38 (type -> constid .) ]
  ! RPAREN          [ reduce using rule 38 (type -> constid .) ]


state 32

    (39) type -> PLUS . constid
    (31) constant -> PLUS . constid
    (153) constid -> . ID

    ID              shift and go to state 82

    constid                        shift and go to state 81

state 33

    (37) type -> STRING .
    (29) constant -> STRING .

  ! reduce/reduce conflict for ID resolved using rule 29 (constant -> STRING .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 29 (constant -> STRING .)
  ! reduce/reduce conflict for END resolved using rule 29 (constant -> STRING .)
  ! reduce/reduce conflict for RPAREN resolved using rule 29 (constant -> STRING .)
    ID              reduce using rule 29 (constant -> STRING .)
    SEMICOLON       reduce using rule 29 (constant -> STRING .)
    END             reduce using rule 29 (constant -> STRING .)
    RPAREN          reduce using rule 29 (constant -> STRING .)

  ! SEMICOLON       [ reduce using rule 37 (type -> STRING .) ]
  ! ID              [ reduce using rule 37 (type -> STRING .) ]
  ! END             [ reduce using rule 37 (type -> STRING .) ]
  ! RPAREN          [ reduce using rule 37 (type -> STRING .) ]


state 34

    (34) type -> typeid .
    (42) simple-type -> typeid .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 34 (type -> typeid .)
  ! reduce/reduce conflict for ID resolved using rule 34 (type -> typeid .)
  ! reduce/reduce conflict for END resolved using rule 34 (type -> typeid .)
  ! reduce/reduce conflict for RPAREN resolved using rule 34 (type -> typeid .)
    SEMICOLON       reduce using rule 34 (type -> typeid .)
    ID              reduce using rule 34 (type -> typeid .)
    END             reduce using rule 34 (type -> typeid .)
    RPAREN          reduce using rule 34 (type -> typeid .)

  ! SEMICOLON       [ reduce using rule 42 (simple-type -> typeid .) ]
  ! ID              [ reduce using rule 42 (simple-type -> typeid .) ]
  ! END             [ reduce using rule 42 (simple-type -> typeid .) ]
  ! RPAREN          [ reduce using rule 42 (simple-type -> typeid .) ]


state 35

    (47) structured-type -> PACKED . structured-type
    (43) structured-type -> . ARRAY LBRACKET index-list RBRACKET OF type
    (44) structured-type -> . RECORD field-list END
    (45) structured-type -> . SET OF simple-type
    (46) structured-type -> . FILE OF type
    (47) structured-type -> . PACKED structured-type

    ARRAY           shift and go to state 18
    RECORD          shift and go to state 24
    SET             shift and go to state 43
    FILE            shift and go to state 20
    PACKED          shift and go to state 35

    structured-type                shift and go to state 83

state 36

    (15) block4 -> proc-and-func-declaration . SEMICOLON block5
    (69) proc-and-func-declaration -> proc-and-func-declaration . SEMICOLON proc-or-func

    SEMICOLON       shift and go to state 84


state 37

    (40) simple-type -> LPAREN . identifier-list RPAREN
    (4) identifier-list -> . ID
    (5) identifier-list -> . identifier-list COMMA ID

    ID              shift and go to state 9

    identifier-list                shift and go to state 85

state 38

    (23) variable-declaration -> VAR . variableid-list COLON type SEMICOLON
    (25) variableid-list -> . ID
    (26) variableid-list -> . variableid-list COMMA ID

    ID              shift and go to state 87

    variableid-list                shift and go to state 86

state 39

    (154) typeid -> ID .
    (153) constid -> ID .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 153 (constid -> ID .)
  ! reduce/reduce conflict for END resolved using rule 153 (constid -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 153 (constid -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 153 (constid -> ID .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 153 (constid -> ID .)
  ! reduce/reduce conflict for COMMA resolved using rule 153 (constid -> ID .)
    SEMICOLON       reduce using rule 153 (constid -> ID .)
    END             reduce using rule 153 (constid -> ID .)
    RPAREN          reduce using rule 153 (constid -> ID .)
    ID              reduce using rule 153 (constid -> ID .)
    RBRACKET        reduce using rule 153 (constid -> ID .)
    COMMA           reduce using rule 153 (constid -> ID .)

  ! SEMICOLON       [ reduce using rule 154 (typeid -> ID .) ]
  ! RBRACKET        [ reduce using rule 154 (typeid -> ID .) ]
  ! COMMA           [ reduce using rule 154 (typeid -> ID .) ]
  ! ID              [ reduce using rule 154 (typeid -> ID .) ]
  ! END             [ reduce using rule 154 (typeid -> ID .) ]
  ! RPAREN          [ reduce using rule 154 (typeid -> ID .) ]


state 40

    (70) proc-or-func -> PROCEDURE . ID parameters SEMICOLON block-or-forward

    ID              shift and go to state 88


state 41

    (13) block3 -> variable-declaration . SEMICOLON block4
    (24) variable-declaration -> variable-declaration . SEMICOLON variableid-list COLON type

    SEMICOLON       shift and go to state 89


state 42

    (33) type -> structured-type .

    SEMICOLON       reduce using rule 33 (type -> structured-type .)
    ID              reduce using rule 33 (type -> structured-type .)
    END             reduce using rule 33 (type -> structured-type .)
    RPAREN          reduce using rule 33 (type -> structured-type .)


state 43

    (45) structured-type -> SET . OF simple-type

    OF              shift and go to state 90


state 44

    (1) pascal-program -> PROGRAM ID program-heading SEMICOLON block . DOT

    DOT             shift and go to state 91


state 45

    (5) identifier-list -> identifier-list COMMA . ID

    ID              shift and go to state 92


state 46

    (3) program-heading -> LPAREN identifier-list RPAREN .

    SEMICOLON       reduce using rule 3 (program-heading -> LPAREN identifier-list RPAREN .)


state 47

    (71) proc-or-func -> FUNCTION ID . parameters COLON typeid SEMICOLON block-or-forward
    (74) parameters -> . LPAREN formal-parameter-list RPAREN

    LPAREN          shift and go to state 94

    parameters                     shift and go to state 93

state 48

    (18) label-declaration -> label-declaration COMMA . INTEGER

    INTEGER         shift and go to state 95


state 49

    (7) block -> label-declaration SEMICOLON . block1
    (8) block1 -> . block2
    (9) block1 -> . constant-declaration SEMICOLON block2
    (10) block2 -> . block3
    (11) block2 -> . type-declaration SEMICOLON block3
    (19) constant-declaration -> . CONST ID COMPARATION constant
    (20) constant-declaration -> . constant-declaration SEMICOLON ID COMPARATION constant
    (12) block3 -> . block4
    (13) block3 -> . variable-declaration SEMICOLON block4
    (21) type-declaration -> . type ID COMPARATION type
    (22) type-declaration -> . type-declaration SEMICOLON ID COMPARATION type
    (14) block4 -> . block5
    (15) block4 -> . proc-and-func-declaration SEMICOLON block5
    (23) variable-declaration -> . VAR variableid-list COLON type SEMICOLON
    (24) variable-declaration -> . variable-declaration SEMICOLON variableid-list COLON type
    (32) type -> . simple-type
    (33) type -> . structured-type
    (34) type -> . typeid
    (35) type -> . INTEGER
    (36) type -> . REAL
    (37) type -> . STRING
    (38) type -> . constid
    (39) type -> . PLUS constid
    (16) block5 -> . BEGIN statement-list END
    (68) proc-and-func-declaration -> . proc-or-func
    (69) proc-and-func-declaration -> . proc-and-func-declaration SEMICOLON proc-or-func
    (40) simple-type -> . LPAREN identifier-list RPAREN
    (41) simple-type -> . constant
    (42) simple-type -> . typeid
    (43) structured-type -> . ARRAY LBRACKET index-list RBRACKET OF type
    (44) structured-type -> . RECORD field-list END
    (45) structured-type -> . SET OF simple-type
    (46) structured-type -> . FILE OF type
    (47) structured-type -> . PACKED structured-type
    (154) typeid -> . ID
    (153) constid -> . ID
    (70) proc-or-func -> . PROCEDURE ID parameters SEMICOLON block-or-forward
    (71) proc-or-func -> . FUNCTION ID parameters COLON typeid SEMICOLON block-or-forward
    (27) constant -> . INTEGER
    (28) constant -> . REAL
    (29) constant -> . STRING
    (30) constant -> . constid
    (31) constant -> . PLUS constid

    CONST           shift and go to state 17
    VAR             shift and go to state 38
    INTEGER         shift and go to state 97
    REAL            shift and go to state 10
    STRING          shift and go to state 33
    PLUS            shift and go to state 32
    BEGIN           shift and go to state 22
    LPAREN          shift and go to state 37
    ARRAY           shift and go to state 18
    RECORD          shift and go to state 24
    SET             shift and go to state 43
    FILE            shift and go to state 20
    PACKED          shift and go to state 35
    ID              shift and go to state 39
    PROCEDURE       shift and go to state 40
    FUNCTION        shift and go to state 11

    block5                         shift and go to state 12
    block4                         shift and go to state 13
    block3                         shift and go to state 21
    block2                         shift and go to state 15
    block1                         shift and go to state 96
    simple-type                    shift and go to state 19
    type-declaration               shift and go to state 25
    proc-or-func                   shift and go to state 26
    constant                       shift and go to state 28
    constant-declaration           shift and go to state 29
    type                           shift and go to state 30
    constid                        shift and go to state 31
    typeid                         shift and go to state 34
    proc-and-func-declaration      shift and go to state 36
    variable-declaration           shift and go to state 41
    structured-type                shift and go to state 42

state 50

    (19) constant-declaration -> CONST ID . COMPARATION constant

    COMPARATION     shift and go to state 98


state 51

    (43) structured-type -> ARRAY LBRACKET . index-list RBRACKET OF type
    (48) index-list -> . simple-type
    (49) index-list -> . index-list COMMA simple-type
    (40) simple-type -> . LPAREN identifier-list RPAREN
    (41) simple-type -> . constant
    (42) simple-type -> . typeid
    (27) constant -> . INTEGER
    (28) constant -> . REAL
    (29) constant -> . STRING
    (30) constant -> . constid
    (31) constant -> . PLUS constid
    (154) typeid -> . ID
    (153) constid -> . ID

    LPAREN          shift and go to state 37
    INTEGER         shift and go to state 105
    REAL            shift and go to state 99
    STRING          shift and go to state 102
    PLUS            shift and go to state 106
    ID              shift and go to state 39

    typeid                         shift and go to state 100
    index-list                     shift and go to state 101
    constant                       shift and go to state 28
    simple-type                    shift and go to state 104
    constid                        shift and go to state 103

state 52

    (46) structured-type -> FILE OF . type
    (32) type -> . simple-type
    (33) type -> . structured-type
    (34) type -> . typeid
    (35) type -> . INTEGER
    (36) type -> . REAL
    (37) type -> . STRING
    (38) type -> . constid
    (39) type -> . PLUS constid
    (40) simple-type -> . LPAREN identifier-list RPAREN
    (41) simple-type -> . constant
    (42) simple-type -> . typeid
    (43) structured-type -> . ARRAY LBRACKET index-list RBRACKET OF type
    (44) structured-type -> . RECORD field-list END
    (45) structured-type -> . SET OF simple-type
    (46) structured-type -> . FILE OF type
    (47) structured-type -> . PACKED structured-type
    (154) typeid -> . ID
    (153) constid -> . ID
    (27) constant -> . INTEGER
    (28) constant -> . REAL
    (29) constant -> . STRING
    (30) constant -> . constid
    (31) constant -> . PLUS constid

    INTEGER         shift and go to state 97
    REAL            shift and go to state 10
    STRING          shift and go to state 33
    PLUS            shift and go to state 32
    LPAREN          shift and go to state 37
    ARRAY           shift and go to state 18
    RECORD          shift and go to state 24
    SET             shift and go to state 43
    FILE            shift and go to state 20
    PACKED          shift and go to state 35
    ID              shift and go to state 39

    typeid                         shift and go to state 34
    constant                       shift and go to state 28
    structured-type                shift and go to state 42
    simple-type                    shift and go to state 19
    type                           shift and go to state 107
    constid                        shift and go to state 31

state 53

    (91) statement -> WHILE . expression DO statement
    (114) expression -> . expression relational-op additive-expression
    (115) expression -> . additive-expression
    (122) additive-expression -> . additive-expression additive-op multiplicative-expression
    (123) additive-expression -> . multiplicative-expression
    (127) multiplicative-expression -> . multiplicative-expression multiplicative-op unary-expression
    (128) multiplicative-expression -> . unary-expression
    (135) unary-expression -> . unary-op unary-expression
    (136) unary-expression -> . primary-expression
    (137) unary-op -> . PLUS
    (138) unary-op -> . MINUS
    (139) unary-op -> . NOT
    (140) primary-expression -> . variable
    (141) primary-expression -> . INTEGER
    (142) primary-expression -> . REAL
    (143) primary-expression -> . STRING
    (144) primary-expression -> . NIL
    (145) primary-expression -> . funcid LPAREN expression-list RPAREN
    (146) primary-expression -> . LBRACKET element-list RBRACKET
    (147) primary-expression -> . LPAREN expression RPAREN
    (99) variable -> . ID
    (100) variable -> . variable LBRACKET subscript-list RBRACKET
    (101) variable -> . variable COMMA fieldid
    (102) variable -> . variable
    (155) funcid -> . ID

    PLUS            shift and go to state 113
    MINUS           shift and go to state 111
    NOT             shift and go to state 123
    INTEGER         shift and go to state 114
    REAL            shift and go to state 108
    STRING          shift and go to state 115
    NIL             shift and go to state 119
    LBRACKET        shift and go to state 109
    LPAREN          shift and go to state 116
    ID              shift and go to state 118

    multiplicative-expression      shift and go to state 120
    expression                     shift and go to state 124
    unary-expression               shift and go to state 112
    unary-op                       shift and go to state 121
    primary-expression             shift and go to state 122
    variable                       shift and go to state 117
    additive-expression            shift and go to state 110
    funcid                         shift and go to state 125

state 54

    (97) statement -> WITH . record-variable-list DO statement
    (112) record-variable-list -> . variable
    (113) record-variable-list -> . record-variable-list COMMA variable
    (99) variable -> . ID
    (100) variable -> . variable LBRACKET subscript-list RBRACKET
    (101) variable -> . variable COMMA fieldid
    (102) variable -> . variable

    ID              shift and go to state 128

    variable                       shift and go to state 126
    record-variable-list           shift and go to state 127

state 55

    (90) statement -> CASE . expression OF case-list END
    (114) expression -> . expression relational-op additive-expression
    (115) expression -> . additive-expression
    (122) additive-expression -> . additive-expression additive-op multiplicative-expression
    (123) additive-expression -> . multiplicative-expression
    (127) multiplicative-expression -> . multiplicative-expression multiplicative-op unary-expression
    (128) multiplicative-expression -> . unary-expression
    (135) unary-expression -> . unary-op unary-expression
    (136) unary-expression -> . primary-expression
    (137) unary-op -> . PLUS
    (138) unary-op -> . MINUS
    (139) unary-op -> . NOT
    (140) primary-expression -> . variable
    (141) primary-expression -> . INTEGER
    (142) primary-expression -> . REAL
    (143) primary-expression -> . STRING
    (144) primary-expression -> . NIL
    (145) primary-expression -> . funcid LPAREN expression-list RPAREN
    (146) primary-expression -> . LBRACKET element-list RBRACKET
    (147) primary-expression -> . LPAREN expression RPAREN
    (99) variable -> . ID
    (100) variable -> . variable LBRACKET subscript-list RBRACKET
    (101) variable -> . variable COMMA fieldid
    (102) variable -> . variable
    (155) funcid -> . ID

    PLUS            shift and go to state 113
    MINUS           shift and go to state 111
    NOT             shift and go to state 123
    INTEGER         shift and go to state 114
    REAL            shift and go to state 108
    STRING          shift and go to state 115
    NIL             shift and go to state 119
    LBRACKET        shift and go to state 109
    LPAREN          shift and go to state 116
    ID              shift and go to state 118

    multiplicative-expression      shift and go to state 120
    expression                     shift and go to state 129
    unary-expression               shift and go to state 112
    unary-op                       shift and go to state 121
    primary-expression             shift and go to state 122
    variable                       shift and go to state 117
    additive-expression            shift and go to state 110
    funcid                         shift and go to state 125

state 56

    (87) statement -> BEGIN . statement-list END
    (83) statement-list -> . statement
    (84) statement-list -> . statement-list SEMICOLON statement
    (85) statement -> . empty
    (86) statement -> . variable EQUAL expression
    (87) statement -> . BEGIN statement-list END
    (88) statement -> . IF expression THEN statement
    (89) statement -> . IF expression THEN statement ELSE statement
    (90) statement -> . CASE expression OF case-list END
    (91) statement -> . WHILE expression DO statement
    (92) statement -> . REPEAT statement-list UNTIL expression
    (93) statement -> . FOR varid EQUAL for-list DO statement
    (94) statement -> . procid
    (95) statement -> . procid LPAREN expression-list RPAREN
    (96) statement -> . GOTO label
    (97) statement -> . WITH record-variable-list DO statement
    (98) statement -> . label COLON statement
    (159) empty -> .
    (99) variable -> . ID
    (100) variable -> . variable LBRACKET subscript-list RBRACKET
    (101) variable -> . variable COMMA fieldid
    (102) variable -> . variable
    (156) procid -> . ID
    (111) label -> . INTEGER

    BEGIN           shift and go to state 56
    IF              shift and go to state 66
    CASE            shift and go to state 55
    WHILE           shift and go to state 53
    REPEAT          shift and go to state 60
    FOR             shift and go to state 62
    GOTO            shift and go to state 61
    WITH            shift and go to state 54
    END             reduce using rule 159 (empty -> .)
    SEMICOLON       reduce using rule 159 (empty -> .)
    ID              shift and go to state 65
    INTEGER         shift and go to state 63

    procid                         shift and go to state 67
    statement-list                 shift and go to state 130
    label                          shift and go to state 57
    statement                      shift and go to state 58
    variable                       shift and go to state 64
    empty                          shift and go to state 59

state 57

    (98) statement -> label . COLON statement

    COLON           shift and go to state 131


state 58

    (83) statement-list -> statement .

    END             reduce using rule 83 (statement-list -> statement .)
    SEMICOLON       reduce using rule 83 (statement-list -> statement .)
    UNTIL           reduce using rule 83 (statement-list -> statement .)


state 59

    (85) statement -> empty .

    END             reduce using rule 85 (statement -> empty .)
    SEMICOLON       reduce using rule 85 (statement -> empty .)
    UNTIL           reduce using rule 85 (statement -> empty .)
    ELSE            reduce using rule 85 (statement -> empty .)


state 60

    (92) statement -> REPEAT . statement-list UNTIL expression
    (83) statement-list -> . statement
    (84) statement-list -> . statement-list SEMICOLON statement
    (85) statement -> . empty
    (86) statement -> . variable EQUAL expression
    (87) statement -> . BEGIN statement-list END
    (88) statement -> . IF expression THEN statement
    (89) statement -> . IF expression THEN statement ELSE statement
    (90) statement -> . CASE expression OF case-list END
    (91) statement -> . WHILE expression DO statement
    (92) statement -> . REPEAT statement-list UNTIL expression
    (93) statement -> . FOR varid EQUAL for-list DO statement
    (94) statement -> . procid
    (95) statement -> . procid LPAREN expression-list RPAREN
    (96) statement -> . GOTO label
    (97) statement -> . WITH record-variable-list DO statement
    (98) statement -> . label COLON statement
    (159) empty -> .
    (99) variable -> . ID
    (100) variable -> . variable LBRACKET subscript-list RBRACKET
    (101) variable -> . variable COMMA fieldid
    (102) variable -> . variable
    (156) procid -> . ID
    (111) label -> . INTEGER

    BEGIN           shift and go to state 56
    IF              shift and go to state 66
    CASE            shift and go to state 55
    WHILE           shift and go to state 53
    REPEAT          shift and go to state 60
    FOR             shift and go to state 62
    GOTO            shift and go to state 61
    WITH            shift and go to state 54
    UNTIL           reduce using rule 159 (empty -> .)
    SEMICOLON       reduce using rule 159 (empty -> .)
    ID              shift and go to state 65
    INTEGER         shift and go to state 63

    procid                         shift and go to state 67
    statement-list                 shift and go to state 132
    label                          shift and go to state 57
    statement                      shift and go to state 58
    variable                       shift and go to state 64
    empty                          shift and go to state 59

state 61

    (96) statement -> GOTO . label
    (111) label -> . INTEGER

    INTEGER         shift and go to state 63

    label                          shift and go to state 133

state 62

    (93) statement -> FOR . varid EQUAL for-list DO statement
    (158) varid -> . ID

    ID              shift and go to state 135

    varid                          shift and go to state 134

state 63

    (111) label -> INTEGER .

    COLON           reduce using rule 111 (label -> INTEGER .)
    END             reduce using rule 111 (label -> INTEGER .)
    SEMICOLON       reduce using rule 111 (label -> INTEGER .)
    UNTIL           reduce using rule 111 (label -> INTEGER .)
    ELSE            reduce using rule 111 (label -> INTEGER .)


state 64

    (86) statement -> variable . EQUAL expression
    (100) variable -> variable . LBRACKET subscript-list RBRACKET
    (101) variable -> variable . COMMA fieldid
    (102) variable -> variable .

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    EQUAL           shift and go to state 136
    LBRACKET        shift and go to state 137
    COMMA           shift and go to state 138

  ! EQUAL           [ reduce using rule 102 (variable -> variable .) ]
  ! LBRACKET        [ reduce using rule 102 (variable -> variable .) ]
  ! COMMA           [ reduce using rule 102 (variable -> variable .) ]


state 65

    (99) variable -> ID .
    (156) procid -> ID .

    EQUAL           reduce using rule 99 (variable -> ID .)
    LBRACKET        reduce using rule 99 (variable -> ID .)
    COMMA           reduce using rule 99 (variable -> ID .)
    LPAREN          reduce using rule 156 (procid -> ID .)
    END             reduce using rule 156 (procid -> ID .)
    SEMICOLON       reduce using rule 156 (procid -> ID .)
    UNTIL           reduce using rule 156 (procid -> ID .)
    ELSE            reduce using rule 156 (procid -> ID .)


state 66

    (88) statement -> IF . expression THEN statement
    (89) statement -> IF . expression THEN statement ELSE statement
    (114) expression -> . expression relational-op additive-expression
    (115) expression -> . additive-expression
    (122) additive-expression -> . additive-expression additive-op multiplicative-expression
    (123) additive-expression -> . multiplicative-expression
    (127) multiplicative-expression -> . multiplicative-expression multiplicative-op unary-expression
    (128) multiplicative-expression -> . unary-expression
    (135) unary-expression -> . unary-op unary-expression
    (136) unary-expression -> . primary-expression
    (137) unary-op -> . PLUS
    (138) unary-op -> . MINUS
    (139) unary-op -> . NOT
    (140) primary-expression -> . variable
    (141) primary-expression -> . INTEGER
    (142) primary-expression -> . REAL
    (143) primary-expression -> . STRING
    (144) primary-expression -> . NIL
    (145) primary-expression -> . funcid LPAREN expression-list RPAREN
    (146) primary-expression -> . LBRACKET element-list RBRACKET
    (147) primary-expression -> . LPAREN expression RPAREN
    (99) variable -> . ID
    (100) variable -> . variable LBRACKET subscript-list RBRACKET
    (101) variable -> . variable COMMA fieldid
    (102) variable -> . variable
    (155) funcid -> . ID

    PLUS            shift and go to state 113
    MINUS           shift and go to state 111
    NOT             shift and go to state 123
    INTEGER         shift and go to state 114
    REAL            shift and go to state 108
    STRING          shift and go to state 115
    NIL             shift and go to state 119
    LBRACKET        shift and go to state 109
    LPAREN          shift and go to state 116
    ID              shift and go to state 118

    multiplicative-expression      shift and go to state 120
    expression                     shift and go to state 139
    unary-expression               shift and go to state 112
    unary-op                       shift and go to state 121
    primary-expression             shift and go to state 122
    variable                       shift and go to state 117
    additive-expression            shift and go to state 110
    funcid                         shift and go to state 125

state 67

    (94) statement -> procid .
    (95) statement -> procid . LPAREN expression-list RPAREN

    END             reduce using rule 94 (statement -> procid .)
    SEMICOLON       reduce using rule 94 (statement -> procid .)
    UNTIL           reduce using rule 94 (statement -> procid .)
    ELSE            reduce using rule 94 (statement -> procid .)
    LPAREN          shift and go to state 140


state 68

    (16) block5 -> BEGIN statement-list . END
    (84) statement-list -> statement-list . SEMICOLON statement

    END             shift and go to state 141
    SEMICOLON       shift and go to state 142


state 69

    (17) label-declaration -> label INTEGER .

    SEMICOLON       reduce using rule 17 (label-declaration -> label INTEGER .)
    COMMA           reduce using rule 17 (label-declaration -> label INTEGER .)


state 70

    (53) fixed-part -> record-field .

    SEMICOLON       reduce using rule 53 (fixed-part -> record-field .)
    RPAREN          reduce using rule 53 (fixed-part -> record-field .)
    END             reduce using rule 53 (fixed-part -> record-field .)


state 71

    (59) variant-part -> CASE . tag-field OF variant-list
    (60) tag-field -> . typeid
    (61) tag-field -> . ID COLON typeid
    (154) typeid -> . ID

    ID              shift and go to state 145

    typeid                         shift and go to state 143
    tag-field                      shift and go to state 144

state 72

    (50) field-list -> fixed-part .
    (51) field-list -> fixed-part . SEMICOLON variant-part
    (54) fixed-part -> fixed-part . SEMICOLON record-field

    RPAREN          reduce using rule 50 (field-list -> fixed-part .)
    END             reduce using rule 50 (field-list -> fixed-part .)
    SEMICOLON       shift and go to state 146


state 73

    (56) record-field -> fieldid-list . COLON type
    (58) fieldid-list -> fieldid-list . COMMA ID

    COLON           shift and go to state 148
    COMMA           shift and go to state 147


state 74

    (44) structured-type -> RECORD field-list . END

    END             shift and go to state 149


state 75

    (52) field-list -> variant-part .

    RPAREN          reduce using rule 52 (field-list -> variant-part .)
    END             reduce using rule 52 (field-list -> variant-part .)


state 76

    (57) fieldid-list -> ID .

    COLON           reduce using rule 57 (fieldid-list -> ID .)
    COMMA           reduce using rule 57 (fieldid-list -> ID .)


state 77

    (55) record-field -> empty .

    SEMICOLON       reduce using rule 55 (record-field -> empty .)
    RPAREN          reduce using rule 55 (record-field -> empty .)
    END             reduce using rule 55 (record-field -> empty .)


state 78

    (11) block2 -> type-declaration SEMICOLON . block3
    (22) type-declaration -> type-declaration SEMICOLON . ID COMPARATION type
    (12) block3 -> . block4
    (13) block3 -> . variable-declaration SEMICOLON block4
    (14) block4 -> . block5
    (15) block4 -> . proc-and-func-declaration SEMICOLON block5
    (23) variable-declaration -> . VAR variableid-list COLON type SEMICOLON
    (24) variable-declaration -> . variable-declaration SEMICOLON variableid-list COLON type
    (16) block5 -> . BEGIN statement-list END
    (68) proc-and-func-declaration -> . proc-or-func
    (69) proc-and-func-declaration -> . proc-and-func-declaration SEMICOLON proc-or-func
    (70) proc-or-func -> . PROCEDURE ID parameters SEMICOLON block-or-forward
    (71) proc-or-func -> . FUNCTION ID parameters COLON typeid SEMICOLON block-or-forward

    ID              shift and go to state 151
    VAR             shift and go to state 38
    BEGIN           shift and go to state 22
    PROCEDURE       shift and go to state 40
    FUNCTION        shift and go to state 11

    block5                         shift and go to state 12
    block4                         shift and go to state 13
    block3                         shift and go to state 150
    proc-or-func                   shift and go to state 26
    proc-and-func-declaration      shift and go to state 36
    variable-declaration           shift and go to state 41

state 79

    (9) block1 -> constant-declaration SEMICOLON . block2
    (20) constant-declaration -> constant-declaration SEMICOLON . ID COMPARATION constant
    (10) block2 -> . block3
    (11) block2 -> . type-declaration SEMICOLON block3
    (12) block3 -> . block4
    (13) block3 -> . variable-declaration SEMICOLON block4
    (21) type-declaration -> . type ID COMPARATION type
    (22) type-declaration -> . type-declaration SEMICOLON ID COMPARATION type
    (14) block4 -> . block5
    (15) block4 -> . proc-and-func-declaration SEMICOLON block5
    (23) variable-declaration -> . VAR variableid-list COLON type SEMICOLON
    (24) variable-declaration -> . variable-declaration SEMICOLON variableid-list COLON type
    (32) type -> . simple-type
    (33) type -> . structured-type
    (34) type -> . typeid
    (35) type -> . INTEGER
    (36) type -> . REAL
    (37) type -> . STRING
    (38) type -> . constid
    (39) type -> . PLUS constid
    (16) block5 -> . BEGIN statement-list END
    (68) proc-and-func-declaration -> . proc-or-func
    (69) proc-and-func-declaration -> . proc-and-func-declaration SEMICOLON proc-or-func
    (40) simple-type -> . LPAREN identifier-list RPAREN
    (41) simple-type -> . constant
    (42) simple-type -> . typeid
    (43) structured-type -> . ARRAY LBRACKET index-list RBRACKET OF type
    (44) structured-type -> . RECORD field-list END
    (45) structured-type -> . SET OF simple-type
    (46) structured-type -> . FILE OF type
    (47) structured-type -> . PACKED structured-type
    (154) typeid -> . ID
    (153) constid -> . ID
    (70) proc-or-func -> . PROCEDURE ID parameters SEMICOLON block-or-forward
    (71) proc-or-func -> . FUNCTION ID parameters COLON typeid SEMICOLON block-or-forward
    (27) constant -> . INTEGER
    (28) constant -> . REAL
    (29) constant -> . STRING
    (30) constant -> . constid
    (31) constant -> . PLUS constid

    ID              shift and go to state 153
    VAR             shift and go to state 38
    INTEGER         shift and go to state 97
    REAL            shift and go to state 10
    STRING          shift and go to state 33
    PLUS            shift and go to state 32
    BEGIN           shift and go to state 22
    LPAREN          shift and go to state 37
    ARRAY           shift and go to state 18
    RECORD          shift and go to state 24
    SET             shift and go to state 43
    FILE            shift and go to state 20
    PACKED          shift and go to state 35
    PROCEDURE       shift and go to state 40
    FUNCTION        shift and go to state 11

    block5                         shift and go to state 12
    block4                         shift and go to state 13
    block3                         shift and go to state 21
    block2                         shift and go to state 152
    simple-type                    shift and go to state 19
    constant                       shift and go to state 28
    type-declaration               shift and go to state 25
    proc-or-func                   shift and go to state 26
    type                           shift and go to state 30
    constid                        shift and go to state 31
    typeid                         shift and go to state 34
    proc-and-func-declaration      shift and go to state 36
    variable-declaration           shift and go to state 41
    structured-type                shift and go to state 42

state 80

    (21) type-declaration -> type ID . COMPARATION type

    COMPARATION     shift and go to state 154


state 81

    (39) type -> PLUS constid .
    (31) constant -> PLUS constid .

  ! reduce/reduce conflict for ID resolved using rule 31 (constant -> PLUS constid .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 31 (constant -> PLUS constid .)
  ! reduce/reduce conflict for END resolved using rule 31 (constant -> PLUS constid .)
  ! reduce/reduce conflict for RPAREN resolved using rule 31 (constant -> PLUS constid .)
    ID              reduce using rule 31 (constant -> PLUS constid .)
    SEMICOLON       reduce using rule 31 (constant -> PLUS constid .)
    END             reduce using rule 31 (constant -> PLUS constid .)
    RPAREN          reduce using rule 31 (constant -> PLUS constid .)

  ! SEMICOLON       [ reduce using rule 39 (type -> PLUS constid .) ]
  ! ID              [ reduce using rule 39 (type -> PLUS constid .) ]
  ! END             [ reduce using rule 39 (type -> PLUS constid .) ]
  ! RPAREN          [ reduce using rule 39 (type -> PLUS constid .) ]


state 82

    (153) constid -> ID .

    COLON           reduce using rule 153 (constid -> ID .)
    COMMA           reduce using rule 153 (constid -> ID .)
    SEMICOLON       reduce using rule 153 (constid -> ID .)
    ID              reduce using rule 153 (constid -> ID .)
    END             reduce using rule 153 (constid -> ID .)
    RPAREN          reduce using rule 153 (constid -> ID .)
    RBRACKET        reduce using rule 153 (constid -> ID .)


state 83

    (47) structured-type -> PACKED structured-type .

    ID              reduce using rule 47 (structured-type -> PACKED structured-type .)
    SEMICOLON       reduce using rule 47 (structured-type -> PACKED structured-type .)
    END             reduce using rule 47 (structured-type -> PACKED structured-type .)
    RPAREN          reduce using rule 47 (structured-type -> PACKED structured-type .)


state 84

    (15) block4 -> proc-and-func-declaration SEMICOLON . block5
    (69) proc-and-func-declaration -> proc-and-func-declaration SEMICOLON . proc-or-func
    (16) block5 -> . BEGIN statement-list END
    (70) proc-or-func -> . PROCEDURE ID parameters SEMICOLON block-or-forward
    (71) proc-or-func -> . FUNCTION ID parameters COLON typeid SEMICOLON block-or-forward

    BEGIN           shift and go to state 22
    PROCEDURE       shift and go to state 40
    FUNCTION        shift and go to state 11

    block5                         shift and go to state 155
    proc-or-func                   shift and go to state 156

state 85

    (40) simple-type -> LPAREN identifier-list . RPAREN
    (5) identifier-list -> identifier-list . COMMA ID

    RPAREN          shift and go to state 157
    COMMA           shift and go to state 45


state 86

    (23) variable-declaration -> VAR variableid-list . COLON type SEMICOLON
    (26) variableid-list -> variableid-list . COMMA ID

    COLON           shift and go to state 159
    COMMA           shift and go to state 158


state 87

    (25) variableid-list -> ID .

    COLON           reduce using rule 25 (variableid-list -> ID .)
    COMMA           reduce using rule 25 (variableid-list -> ID .)


state 88

    (70) proc-or-func -> PROCEDURE ID . parameters SEMICOLON block-or-forward
    (74) parameters -> . LPAREN formal-parameter-list RPAREN

    LPAREN          shift and go to state 94

    parameters                     shift and go to state 160

state 89

    (13) block3 -> variable-declaration SEMICOLON . block4
    (24) variable-declaration -> variable-declaration SEMICOLON . variableid-list COLON type
    (14) block4 -> . block5
    (15) block4 -> . proc-and-func-declaration SEMICOLON block5
    (25) variableid-list -> . ID
    (26) variableid-list -> . variableid-list COMMA ID
    (16) block5 -> . BEGIN statement-list END
    (68) proc-and-func-declaration -> . proc-or-func
    (69) proc-and-func-declaration -> . proc-and-func-declaration SEMICOLON proc-or-func
    (70) proc-or-func -> . PROCEDURE ID parameters SEMICOLON block-or-forward
    (71) proc-or-func -> . FUNCTION ID parameters COLON typeid SEMICOLON block-or-forward

    ID              shift and go to state 87
    BEGIN           shift and go to state 22
    PROCEDURE       shift and go to state 40
    FUNCTION        shift and go to state 11

    block5                         shift and go to state 12
    block4                         shift and go to state 161
    variableid-list                shift and go to state 162
    proc-or-func                   shift and go to state 26
    proc-and-func-declaration      shift and go to state 36

state 90

    (45) structured-type -> SET OF . simple-type
    (40) simple-type -> . LPAREN identifier-list RPAREN
    (41) simple-type -> . constant
    (42) simple-type -> . typeid
    (27) constant -> . INTEGER
    (28) constant -> . REAL
    (29) constant -> . STRING
    (30) constant -> . constid
    (31) constant -> . PLUS constid
    (154) typeid -> . ID
    (153) constid -> . ID

    LPAREN          shift and go to state 37
    INTEGER         shift and go to state 105
    REAL            shift and go to state 99
    STRING          shift and go to state 102
    PLUS            shift and go to state 106
    ID              shift and go to state 39

    constid                        shift and go to state 103
    constant                       shift and go to state 28
    simple-type                    shift and go to state 163
    typeid                         shift and go to state 100

state 91

    (1) pascal-program -> PROGRAM ID program-heading SEMICOLON block DOT .

    $end            reduce using rule 1 (pascal-program -> PROGRAM ID program-heading SEMICOLON block DOT .)


state 92

    (5) identifier-list -> identifier-list COMMA ID .

    RPAREN          reduce using rule 5 (identifier-list -> identifier-list COMMA ID .)
    COMMA           reduce using rule 5 (identifier-list -> identifier-list COMMA ID .)


state 93

    (71) proc-or-func -> FUNCTION ID parameters . COLON typeid SEMICOLON block-or-forward

    COLON           shift and go to state 164


state 94

    (74) parameters -> LPAREN . formal-parameter-list RPAREN
    (75) formal-parameter-list -> . formal-parameter-section
    (76) formal-parameter-list -> . formal-parameter-list SEMICOLON formal-parameter-section
    (77) formal-parameter-section -> . parameterid-list COLON typeid
    (78) formal-parameter-section -> . VAR parameterid-list COLON typeid
    (79) formal-parameter-section -> . PROCEDURE ID parameters
    (80) formal-parameter-section -> . FUNCTION ID parameters COLON typeid
    (81) parameterid-list -> . ID
    (82) parameterid-list -> . parameterid-list COMMA ID

    VAR             shift and go to state 169
    PROCEDURE       shift and go to state 171
    FUNCTION        shift and go to state 165
    ID              shift and go to state 166

    parameterid-list               shift and go to state 167
    formal-parameter-list          shift and go to state 168
    formal-parameter-section       shift and go to state 170

state 95

    (18) label-declaration -> label-declaration COMMA INTEGER .

    SEMICOLON       reduce using rule 18 (label-declaration -> label-declaration COMMA INTEGER .)
    COMMA           reduce using rule 18 (label-declaration -> label-declaration COMMA INTEGER .)


state 96

    (7) block -> label-declaration SEMICOLON block1 .

    SEMICOLON       reduce using rule 7 (block -> label-declaration SEMICOLON block1 .)
    DOT             reduce using rule 7 (block -> label-declaration SEMICOLON block1 .)


state 97

    (35) type -> INTEGER .
    (27) constant -> INTEGER .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 27 (constant -> INTEGER .)
  ! reduce/reduce conflict for ID resolved using rule 27 (constant -> INTEGER .)
  ! reduce/reduce conflict for END resolved using rule 27 (constant -> INTEGER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 27 (constant -> INTEGER .)
    SEMICOLON       reduce using rule 27 (constant -> INTEGER .)
    ID              reduce using rule 27 (constant -> INTEGER .)
    END             reduce using rule 27 (constant -> INTEGER .)
    RPAREN          reduce using rule 27 (constant -> INTEGER .)

  ! SEMICOLON       [ reduce using rule 35 (type -> INTEGER .) ]
  ! ID              [ reduce using rule 35 (type -> INTEGER .) ]
  ! END             [ reduce using rule 35 (type -> INTEGER .) ]
  ! RPAREN          [ reduce using rule 35 (type -> INTEGER .) ]


state 98

    (19) constant-declaration -> CONST ID COMPARATION . constant
    (27) constant -> . INTEGER
    (28) constant -> . REAL
    (29) constant -> . STRING
    (30) constant -> . constid
    (31) constant -> . PLUS constid
    (153) constid -> . ID

    INTEGER         shift and go to state 105
    REAL            shift and go to state 99
    STRING          shift and go to state 102
    PLUS            shift and go to state 106
    ID              shift and go to state 82

    constant                       shift and go to state 172
    constid                        shift and go to state 103

state 99

    (28) constant -> REAL .

    RBRACKET        reduce using rule 28 (constant -> REAL .)
    COMMA           reduce using rule 28 (constant -> REAL .)
    COLON           reduce using rule 28 (constant -> REAL .)
    SEMICOLON       reduce using rule 28 (constant -> REAL .)
    ID              reduce using rule 28 (constant -> REAL .)
    END             reduce using rule 28 (constant -> REAL .)
    RPAREN          reduce using rule 28 (constant -> REAL .)


state 100

    (42) simple-type -> typeid .

    RBRACKET        reduce using rule 42 (simple-type -> typeid .)
    COMMA           reduce using rule 42 (simple-type -> typeid .)
    ID              reduce using rule 42 (simple-type -> typeid .)
    SEMICOLON       reduce using rule 42 (simple-type -> typeid .)
    END             reduce using rule 42 (simple-type -> typeid .)
    RPAREN          reduce using rule 42 (simple-type -> typeid .)


state 101

    (43) structured-type -> ARRAY LBRACKET index-list . RBRACKET OF type
    (49) index-list -> index-list . COMMA simple-type

    RBRACKET        shift and go to state 174
    COMMA           shift and go to state 173


state 102

    (29) constant -> STRING .

    RBRACKET        reduce using rule 29 (constant -> STRING .)
    COMMA           reduce using rule 29 (constant -> STRING .)
    COLON           reduce using rule 29 (constant -> STRING .)
    SEMICOLON       reduce using rule 29 (constant -> STRING .)
    ID              reduce using rule 29 (constant -> STRING .)
    END             reduce using rule 29 (constant -> STRING .)
    RPAREN          reduce using rule 29 (constant -> STRING .)


state 103

    (30) constant -> constid .

    RBRACKET        reduce using rule 30 (constant -> constid .)
    COMMA           reduce using rule 30 (constant -> constid .)
    COLON           reduce using rule 30 (constant -> constid .)
    SEMICOLON       reduce using rule 30 (constant -> constid .)
    ID              reduce using rule 30 (constant -> constid .)
    END             reduce using rule 30 (constant -> constid .)
    RPAREN          reduce using rule 30 (constant -> constid .)


state 104

    (48) index-list -> simple-type .

    RBRACKET        reduce using rule 48 (index-list -> simple-type .)
    COMMA           reduce using rule 48 (index-list -> simple-type .)


state 105

    (27) constant -> INTEGER .

    RBRACKET        reduce using rule 27 (constant -> INTEGER .)
    COMMA           reduce using rule 27 (constant -> INTEGER .)
    COLON           reduce using rule 27 (constant -> INTEGER .)
    SEMICOLON       reduce using rule 27 (constant -> INTEGER .)
    ID              reduce using rule 27 (constant -> INTEGER .)
    END             reduce using rule 27 (constant -> INTEGER .)
    RPAREN          reduce using rule 27 (constant -> INTEGER .)


state 106

    (31) constant -> PLUS . constid
    (153) constid -> . ID

    ID              shift and go to state 82

    constid                        shift and go to state 175

state 107

    (46) structured-type -> FILE OF type .

    ID              reduce using rule 46 (structured-type -> FILE OF type .)
    SEMICOLON       reduce using rule 46 (structured-type -> FILE OF type .)
    END             reduce using rule 46 (structured-type -> FILE OF type .)
    RPAREN          reduce using rule 46 (structured-type -> FILE OF type .)


state 108

    (142) primary-expression -> REAL .

    TIMES           reduce using rule 142 (primary-expression -> REAL .)
    DIVIDE          reduce using rule 142 (primary-expression -> REAL .)
    DIV             reduce using rule 142 (primary-expression -> REAL .)
    MOD             reduce using rule 142 (primary-expression -> REAL .)
    AND             reduce using rule 142 (primary-expression -> REAL .)
    IN              reduce using rule 142 (primary-expression -> REAL .)
    PLUS            reduce using rule 142 (primary-expression -> REAL .)
    MINUS           reduce using rule 142 (primary-expression -> REAL .)
    OR              reduce using rule 142 (primary-expression -> REAL .)
    TO              reduce using rule 142 (primary-expression -> REAL .)
    DOWNTO          reduce using rule 142 (primary-expression -> REAL .)
    LESS            reduce using rule 142 (primary-expression -> REAL .)
    LESSEQUAL       reduce using rule 142 (primary-expression -> REAL .)
    EQUAL           reduce using rule 142 (primary-expression -> REAL .)
    DEQUAL          reduce using rule 142 (primary-expression -> REAL .)
    GREATEREQUAL    reduce using rule 142 (primary-expression -> REAL .)
    GREATER         reduce using rule 142 (primary-expression -> REAL .)
    RPAREN          reduce using rule 142 (primary-expression -> REAL .)
    DO              reduce using rule 142 (primary-expression -> REAL .)
    OF              reduce using rule 142 (primary-expression -> REAL .)
    THEN            reduce using rule 142 (primary-expression -> REAL .)
    DOT             reduce using rule 142 (primary-expression -> REAL .)
    RBRACKET        reduce using rule 142 (primary-expression -> REAL .)
    COMMA           reduce using rule 142 (primary-expression -> REAL .)
    END             reduce using rule 142 (primary-expression -> REAL .)
    SEMICOLON       reduce using rule 142 (primary-expression -> REAL .)
    UNTIL           reduce using rule 142 (primary-expression -> REAL .)
    ELSE            reduce using rule 142 (primary-expression -> REAL .)


state 109

    (146) primary-expression -> LBRACKET . element-list RBRACKET
    (148) element-list -> . empty
    (149) element-list -> . element
    (150) element-list -> . element-list COMMA element
    (159) empty -> .
    (151) element -> . expression
    (152) element -> . expression DOT DOT DOT expression
    (114) expression -> . expression relational-op additive-expression
    (115) expression -> . additive-expression
    (122) additive-expression -> . additive-expression additive-op multiplicative-expression
    (123) additive-expression -> . multiplicative-expression
    (127) multiplicative-expression -> . multiplicative-expression multiplicative-op unary-expression
    (128) multiplicative-expression -> . unary-expression
    (135) unary-expression -> . unary-op unary-expression
    (136) unary-expression -> . primary-expression
    (137) unary-op -> . PLUS
    (138) unary-op -> . MINUS
    (139) unary-op -> . NOT
    (140) primary-expression -> . variable
    (141) primary-expression -> . INTEGER
    (142) primary-expression -> . REAL
    (143) primary-expression -> . STRING
    (144) primary-expression -> . NIL
    (145) primary-expression -> . funcid LPAREN expression-list RPAREN
    (146) primary-expression -> . LBRACKET element-list RBRACKET
    (147) primary-expression -> . LPAREN expression RPAREN
    (99) variable -> . ID
    (100) variable -> . variable LBRACKET subscript-list RBRACKET
    (101) variable -> . variable COMMA fieldid
    (102) variable -> . variable
    (155) funcid -> . ID

    RBRACKET        reduce using rule 159 (empty -> .)
    COMMA           reduce using rule 159 (empty -> .)
    PLUS            shift and go to state 113
    MINUS           shift and go to state 111
    NOT             shift and go to state 123
    INTEGER         shift and go to state 114
    REAL            shift and go to state 108
    STRING          shift and go to state 115
    NIL             shift and go to state 119
    LBRACKET        shift and go to state 109
    LPAREN          shift and go to state 116
    ID              shift and go to state 118

    multiplicative-expression      shift and go to state 120
    expression                     shift and go to state 179
    unary-expression               shift and go to state 112
    element                        shift and go to state 177
    element-list                   shift and go to state 178
    unary-op                       shift and go to state 121
    primary-expression             shift and go to state 122
    variable                       shift and go to state 117
    additive-expression            shift and go to state 110
    empty                          shift and go to state 176
    funcid                         shift and go to state 125

state 110

    (115) expression -> additive-expression .
    (122) additive-expression -> additive-expression . additive-op multiplicative-expression
    (124) additive-op -> . PLUS
    (125) additive-op -> . MINUS
    (126) additive-op -> . OR

    LESS            reduce using rule 115 (expression -> additive-expression .)
    LESSEQUAL       reduce using rule 115 (expression -> additive-expression .)
    EQUAL           reduce using rule 115 (expression -> additive-expression .)
    DEQUAL          reduce using rule 115 (expression -> additive-expression .)
    GREATEREQUAL    reduce using rule 115 (expression -> additive-expression .)
    GREATER         reduce using rule 115 (expression -> additive-expression .)
    DO              reduce using rule 115 (expression -> additive-expression .)
    RBRACKET        reduce using rule 115 (expression -> additive-expression .)
    COMMA           reduce using rule 115 (expression -> additive-expression .)
    DOT             reduce using rule 115 (expression -> additive-expression .)
    RPAREN          reduce using rule 115 (expression -> additive-expression .)
    OF              reduce using rule 115 (expression -> additive-expression .)
    THEN            reduce using rule 115 (expression -> additive-expression .)
    TO              reduce using rule 115 (expression -> additive-expression .)
    DOWNTO          reduce using rule 115 (expression -> additive-expression .)
    END             reduce using rule 115 (expression -> additive-expression .)
    SEMICOLON       reduce using rule 115 (expression -> additive-expression .)
    UNTIL           reduce using rule 115 (expression -> additive-expression .)
    ELSE            reduce using rule 115 (expression -> additive-expression .)
    PLUS            shift and go to state 182
    MINUS           shift and go to state 183
    OR              shift and go to state 181

    additive-op                    shift and go to state 180

state 111

    (138) unary-op -> MINUS .

    PLUS            reduce using rule 138 (unary-op -> MINUS .)
    MINUS           reduce using rule 138 (unary-op -> MINUS .)
    NOT             reduce using rule 138 (unary-op -> MINUS .)
    INTEGER         reduce using rule 138 (unary-op -> MINUS .)
    REAL            reduce using rule 138 (unary-op -> MINUS .)
    STRING          reduce using rule 138 (unary-op -> MINUS .)
    NIL             reduce using rule 138 (unary-op -> MINUS .)
    LBRACKET        reduce using rule 138 (unary-op -> MINUS .)
    LPAREN          reduce using rule 138 (unary-op -> MINUS .)
    ID              reduce using rule 138 (unary-op -> MINUS .)


state 112

    (128) multiplicative-expression -> unary-expression .

    TIMES           reduce using rule 128 (multiplicative-expression -> unary-expression .)
    DIVIDE          reduce using rule 128 (multiplicative-expression -> unary-expression .)
    DIV             reduce using rule 128 (multiplicative-expression -> unary-expression .)
    MOD             reduce using rule 128 (multiplicative-expression -> unary-expression .)
    AND             reduce using rule 128 (multiplicative-expression -> unary-expression .)
    IN              reduce using rule 128 (multiplicative-expression -> unary-expression .)
    PLUS            reduce using rule 128 (multiplicative-expression -> unary-expression .)
    MINUS           reduce using rule 128 (multiplicative-expression -> unary-expression .)
    OR              reduce using rule 128 (multiplicative-expression -> unary-expression .)
    THEN            reduce using rule 128 (multiplicative-expression -> unary-expression .)
    LESS            reduce using rule 128 (multiplicative-expression -> unary-expression .)
    LESSEQUAL       reduce using rule 128 (multiplicative-expression -> unary-expression .)
    EQUAL           reduce using rule 128 (multiplicative-expression -> unary-expression .)
    DEQUAL          reduce using rule 128 (multiplicative-expression -> unary-expression .)
    GREATEREQUAL    reduce using rule 128 (multiplicative-expression -> unary-expression .)
    GREATER         reduce using rule 128 (multiplicative-expression -> unary-expression .)
    TO              reduce using rule 128 (multiplicative-expression -> unary-expression .)
    DOWNTO          reduce using rule 128 (multiplicative-expression -> unary-expression .)
    END             reduce using rule 128 (multiplicative-expression -> unary-expression .)
    SEMICOLON       reduce using rule 128 (multiplicative-expression -> unary-expression .)
    UNTIL           reduce using rule 128 (multiplicative-expression -> unary-expression .)
    ELSE            reduce using rule 128 (multiplicative-expression -> unary-expression .)
    DO              reduce using rule 128 (multiplicative-expression -> unary-expression .)
    RBRACKET        reduce using rule 128 (multiplicative-expression -> unary-expression .)
    COMMA           reduce using rule 128 (multiplicative-expression -> unary-expression .)
    OF              reduce using rule 128 (multiplicative-expression -> unary-expression .)
    RPAREN          reduce using rule 128 (multiplicative-expression -> unary-expression .)
    DOT             reduce using rule 128 (multiplicative-expression -> unary-expression .)


state 113

    (137) unary-op -> PLUS .

    PLUS            reduce using rule 137 (unary-op -> PLUS .)
    MINUS           reduce using rule 137 (unary-op -> PLUS .)
    NOT             reduce using rule 137 (unary-op -> PLUS .)
    INTEGER         reduce using rule 137 (unary-op -> PLUS .)
    REAL            reduce using rule 137 (unary-op -> PLUS .)
    STRING          reduce using rule 137 (unary-op -> PLUS .)
    NIL             reduce using rule 137 (unary-op -> PLUS .)
    LBRACKET        reduce using rule 137 (unary-op -> PLUS .)
    LPAREN          reduce using rule 137 (unary-op -> PLUS .)
    ID              reduce using rule 137 (unary-op -> PLUS .)


state 114

    (141) primary-expression -> INTEGER .

    TIMES           reduce using rule 141 (primary-expression -> INTEGER .)
    DIVIDE          reduce using rule 141 (primary-expression -> INTEGER .)
    DIV             reduce using rule 141 (primary-expression -> INTEGER .)
    MOD             reduce using rule 141 (primary-expression -> INTEGER .)
    AND             reduce using rule 141 (primary-expression -> INTEGER .)
    IN              reduce using rule 141 (primary-expression -> INTEGER .)
    PLUS            reduce using rule 141 (primary-expression -> INTEGER .)
    MINUS           reduce using rule 141 (primary-expression -> INTEGER .)
    OR              reduce using rule 141 (primary-expression -> INTEGER .)
    TO              reduce using rule 141 (primary-expression -> INTEGER .)
    DOWNTO          reduce using rule 141 (primary-expression -> INTEGER .)
    LESS            reduce using rule 141 (primary-expression -> INTEGER .)
    LESSEQUAL       reduce using rule 141 (primary-expression -> INTEGER .)
    EQUAL           reduce using rule 141 (primary-expression -> INTEGER .)
    DEQUAL          reduce using rule 141 (primary-expression -> INTEGER .)
    GREATEREQUAL    reduce using rule 141 (primary-expression -> INTEGER .)
    GREATER         reduce using rule 141 (primary-expression -> INTEGER .)
    RPAREN          reduce using rule 141 (primary-expression -> INTEGER .)
    DO              reduce using rule 141 (primary-expression -> INTEGER .)
    OF              reduce using rule 141 (primary-expression -> INTEGER .)
    THEN            reduce using rule 141 (primary-expression -> INTEGER .)
    DOT             reduce using rule 141 (primary-expression -> INTEGER .)
    RBRACKET        reduce using rule 141 (primary-expression -> INTEGER .)
    COMMA           reduce using rule 141 (primary-expression -> INTEGER .)
    END             reduce using rule 141 (primary-expression -> INTEGER .)
    SEMICOLON       reduce using rule 141 (primary-expression -> INTEGER .)
    UNTIL           reduce using rule 141 (primary-expression -> INTEGER .)
    ELSE            reduce using rule 141 (primary-expression -> INTEGER .)


state 115

    (143) primary-expression -> STRING .

    TIMES           reduce using rule 143 (primary-expression -> STRING .)
    DIVIDE          reduce using rule 143 (primary-expression -> STRING .)
    DIV             reduce using rule 143 (primary-expression -> STRING .)
    MOD             reduce using rule 143 (primary-expression -> STRING .)
    AND             reduce using rule 143 (primary-expression -> STRING .)
    IN              reduce using rule 143 (primary-expression -> STRING .)
    PLUS            reduce using rule 143 (primary-expression -> STRING .)
    MINUS           reduce using rule 143 (primary-expression -> STRING .)
    OR              reduce using rule 143 (primary-expression -> STRING .)
    TO              reduce using rule 143 (primary-expression -> STRING .)
    DOWNTO          reduce using rule 143 (primary-expression -> STRING .)
    LESS            reduce using rule 143 (primary-expression -> STRING .)
    LESSEQUAL       reduce using rule 143 (primary-expression -> STRING .)
    EQUAL           reduce using rule 143 (primary-expression -> STRING .)
    DEQUAL          reduce using rule 143 (primary-expression -> STRING .)
    GREATEREQUAL    reduce using rule 143 (primary-expression -> STRING .)
    GREATER         reduce using rule 143 (primary-expression -> STRING .)
    RPAREN          reduce using rule 143 (primary-expression -> STRING .)
    DO              reduce using rule 143 (primary-expression -> STRING .)
    OF              reduce using rule 143 (primary-expression -> STRING .)
    THEN            reduce using rule 143 (primary-expression -> STRING .)
    DOT             reduce using rule 143 (primary-expression -> STRING .)
    RBRACKET        reduce using rule 143 (primary-expression -> STRING .)
    COMMA           reduce using rule 143 (primary-expression -> STRING .)
    END             reduce using rule 143 (primary-expression -> STRING .)
    SEMICOLON       reduce using rule 143 (primary-expression -> STRING .)
    UNTIL           reduce using rule 143 (primary-expression -> STRING .)
    ELSE            reduce using rule 143 (primary-expression -> STRING .)


state 116

    (147) primary-expression -> LPAREN . expression RPAREN
    (114) expression -> . expression relational-op additive-expression
    (115) expression -> . additive-expression
    (122) additive-expression -> . additive-expression additive-op multiplicative-expression
    (123) additive-expression -> . multiplicative-expression
    (127) multiplicative-expression -> . multiplicative-expression multiplicative-op unary-expression
    (128) multiplicative-expression -> . unary-expression
    (135) unary-expression -> . unary-op unary-expression
    (136) unary-expression -> . primary-expression
    (137) unary-op -> . PLUS
    (138) unary-op -> . MINUS
    (139) unary-op -> . NOT
    (140) primary-expression -> . variable
    (141) primary-expression -> . INTEGER
    (142) primary-expression -> . REAL
    (143) primary-expression -> . STRING
    (144) primary-expression -> . NIL
    (145) primary-expression -> . funcid LPAREN expression-list RPAREN
    (146) primary-expression -> . LBRACKET element-list RBRACKET
    (147) primary-expression -> . LPAREN expression RPAREN
    (99) variable -> . ID
    (100) variable -> . variable LBRACKET subscript-list RBRACKET
    (101) variable -> . variable COMMA fieldid
    (102) variable -> . variable
    (155) funcid -> . ID

    PLUS            shift and go to state 113
    MINUS           shift and go to state 111
    NOT             shift and go to state 123
    INTEGER         shift and go to state 114
    REAL            shift and go to state 108
    STRING          shift and go to state 115
    NIL             shift and go to state 119
    LBRACKET        shift and go to state 109
    LPAREN          shift and go to state 116
    ID              shift and go to state 118

    multiplicative-expression      shift and go to state 120
    expression                     shift and go to state 184
    unary-expression               shift and go to state 112
    unary-op                       shift and go to state 121
    primary-expression             shift and go to state 122
    variable                       shift and go to state 117
    additive-expression            shift and go to state 110
    funcid                         shift and go to state 125

state 117

    (140) primary-expression -> variable .
    (100) variable -> variable . LBRACKET subscript-list RBRACKET
    (101) variable -> variable . COMMA fieldid
    (102) variable -> variable .

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for TIMES resolved using rule 102 (variable -> variable .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 102 (variable -> variable .)
  ! reduce/reduce conflict for DIV resolved using rule 102 (variable -> variable .)
  ! reduce/reduce conflict for MOD resolved using rule 102 (variable -> variable .)
  ! reduce/reduce conflict for AND resolved using rule 102 (variable -> variable .)
  ! reduce/reduce conflict for IN resolved using rule 102 (variable -> variable .)
  ! reduce/reduce conflict for PLUS resolved using rule 102 (variable -> variable .)
  ! reduce/reduce conflict for MINUS resolved using rule 102 (variable -> variable .)
  ! reduce/reduce conflict for OR resolved using rule 102 (variable -> variable .)
  ! reduce/reduce conflict for DO resolved using rule 102 (variable -> variable .)
  ! reduce/reduce conflict for LESS resolved using rule 102 (variable -> variable .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 102 (variable -> variable .)
  ! reduce/reduce conflict for EQUAL resolved using rule 102 (variable -> variable .)
  ! reduce/reduce conflict for DEQUAL resolved using rule 102 (variable -> variable .)
  ! reduce/reduce conflict for GREATEREQUAL resolved using rule 102 (variable -> variable .)
  ! reduce/reduce conflict for GREATER resolved using rule 102 (variable -> variable .)
  ! reduce/reduce conflict for OF resolved using rule 102 (variable -> variable .)
  ! reduce/reduce conflict for THEN resolved using rule 102 (variable -> variable .)
  ! reduce/reduce conflict for DOT resolved using rule 102 (variable -> variable .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 102 (variable -> variable .)
  ! reduce/reduce conflict for RPAREN resolved using rule 102 (variable -> variable .)
  ! reduce/reduce conflict for END resolved using rule 102 (variable -> variable .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 102 (variable -> variable .)
  ! reduce/reduce conflict for UNTIL resolved using rule 102 (variable -> variable .)
  ! reduce/reduce conflict for ELSE resolved using rule 102 (variable -> variable .)
  ! reduce/reduce conflict for TO resolved using rule 102 (variable -> variable .)
  ! reduce/reduce conflict for DOWNTO resolved using rule 102 (variable -> variable .)
    LBRACKET        shift and go to state 137
    COMMA           shift and go to state 138
    TIMES           reduce using rule 102 (variable -> variable .)
    DIVIDE          reduce using rule 102 (variable -> variable .)
    DIV             reduce using rule 102 (variable -> variable .)
    MOD             reduce using rule 102 (variable -> variable .)
    AND             reduce using rule 102 (variable -> variable .)
    IN              reduce using rule 102 (variable -> variable .)
    PLUS            reduce using rule 102 (variable -> variable .)
    MINUS           reduce using rule 102 (variable -> variable .)
    OR              reduce using rule 102 (variable -> variable .)
    DO              reduce using rule 102 (variable -> variable .)
    LESS            reduce using rule 102 (variable -> variable .)
    LESSEQUAL       reduce using rule 102 (variable -> variable .)
    EQUAL           reduce using rule 102 (variable -> variable .)
    DEQUAL          reduce using rule 102 (variable -> variable .)
    GREATEREQUAL    reduce using rule 102 (variable -> variable .)
    GREATER         reduce using rule 102 (variable -> variable .)
    OF              reduce using rule 102 (variable -> variable .)
    THEN            reduce using rule 102 (variable -> variable .)
    DOT             reduce using rule 102 (variable -> variable .)
    RBRACKET        reduce using rule 102 (variable -> variable .)
    RPAREN          reduce using rule 102 (variable -> variable .)
    END             reduce using rule 102 (variable -> variable .)
    SEMICOLON       reduce using rule 102 (variable -> variable .)
    UNTIL           reduce using rule 102 (variable -> variable .)
    ELSE            reduce using rule 102 (variable -> variable .)
    TO              reduce using rule 102 (variable -> variable .)
    DOWNTO          reduce using rule 102 (variable -> variable .)

  ! TIMES           [ reduce using rule 140 (primary-expression -> variable .) ]
  ! DIVIDE          [ reduce using rule 140 (primary-expression -> variable .) ]
  ! DIV             [ reduce using rule 140 (primary-expression -> variable .) ]
  ! MOD             [ reduce using rule 140 (primary-expression -> variable .) ]
  ! AND             [ reduce using rule 140 (primary-expression -> variable .) ]
  ! IN              [ reduce using rule 140 (primary-expression -> variable .) ]
  ! PLUS            [ reduce using rule 140 (primary-expression -> variable .) ]
  ! MINUS           [ reduce using rule 140 (primary-expression -> variable .) ]
  ! OR              [ reduce using rule 140 (primary-expression -> variable .) ]
  ! TO              [ reduce using rule 140 (primary-expression -> variable .) ]
  ! DOWNTO          [ reduce using rule 140 (primary-expression -> variable .) ]
  ! LESS            [ reduce using rule 140 (primary-expression -> variable .) ]
  ! LESSEQUAL       [ reduce using rule 140 (primary-expression -> variable .) ]
  ! EQUAL           [ reduce using rule 140 (primary-expression -> variable .) ]
  ! DEQUAL          [ reduce using rule 140 (primary-expression -> variable .) ]
  ! GREATEREQUAL    [ reduce using rule 140 (primary-expression -> variable .) ]
  ! GREATER         [ reduce using rule 140 (primary-expression -> variable .) ]
  ! RPAREN          [ reduce using rule 140 (primary-expression -> variable .) ]
  ! DO              [ reduce using rule 140 (primary-expression -> variable .) ]
  ! OF              [ reduce using rule 140 (primary-expression -> variable .) ]
  ! THEN            [ reduce using rule 140 (primary-expression -> variable .) ]
  ! DOT             [ reduce using rule 140 (primary-expression -> variable .) ]
  ! RBRACKET        [ reduce using rule 140 (primary-expression -> variable .) ]
  ! COMMA           [ reduce using rule 140 (primary-expression -> variable .) ]
  ! END             [ reduce using rule 140 (primary-expression -> variable .) ]
  ! SEMICOLON       [ reduce using rule 140 (primary-expression -> variable .) ]
  ! UNTIL           [ reduce using rule 140 (primary-expression -> variable .) ]
  ! ELSE            [ reduce using rule 140 (primary-expression -> variable .) ]
  ! LBRACKET        [ reduce using rule 102 (variable -> variable .) ]
  ! COMMA           [ reduce using rule 102 (variable -> variable .) ]


state 118

    (99) variable -> ID .
    (155) funcid -> ID .

    LBRACKET        reduce using rule 99 (variable -> ID .)
    COMMA           reduce using rule 99 (variable -> ID .)
    TIMES           reduce using rule 99 (variable -> ID .)
    DIVIDE          reduce using rule 99 (variable -> ID .)
    DIV             reduce using rule 99 (variable -> ID .)
    MOD             reduce using rule 99 (variable -> ID .)
    AND             reduce using rule 99 (variable -> ID .)
    IN              reduce using rule 99 (variable -> ID .)
    PLUS            reduce using rule 99 (variable -> ID .)
    MINUS           reduce using rule 99 (variable -> ID .)
    OR              reduce using rule 99 (variable -> ID .)
    DO              reduce using rule 99 (variable -> ID .)
    LESS            reduce using rule 99 (variable -> ID .)
    LESSEQUAL       reduce using rule 99 (variable -> ID .)
    EQUAL           reduce using rule 99 (variable -> ID .)
    DEQUAL          reduce using rule 99 (variable -> ID .)
    GREATEREQUAL    reduce using rule 99 (variable -> ID .)
    GREATER         reduce using rule 99 (variable -> ID .)
    OF              reduce using rule 99 (variable -> ID .)
    THEN            reduce using rule 99 (variable -> ID .)
    DOT             reduce using rule 99 (variable -> ID .)
    RBRACKET        reduce using rule 99 (variable -> ID .)
    RPAREN          reduce using rule 99 (variable -> ID .)
    END             reduce using rule 99 (variable -> ID .)
    SEMICOLON       reduce using rule 99 (variable -> ID .)
    UNTIL           reduce using rule 99 (variable -> ID .)
    ELSE            reduce using rule 99 (variable -> ID .)
    TO              reduce using rule 99 (variable -> ID .)
    DOWNTO          reduce using rule 99 (variable -> ID .)
    LPAREN          reduce using rule 155 (funcid -> ID .)


state 119

    (144) primary-expression -> NIL .

    TIMES           reduce using rule 144 (primary-expression -> NIL .)
    DIVIDE          reduce using rule 144 (primary-expression -> NIL .)
    DIV             reduce using rule 144 (primary-expression -> NIL .)
    MOD             reduce using rule 144 (primary-expression -> NIL .)
    AND             reduce using rule 144 (primary-expression -> NIL .)
    IN              reduce using rule 144 (primary-expression -> NIL .)
    PLUS            reduce using rule 144 (primary-expression -> NIL .)
    MINUS           reduce using rule 144 (primary-expression -> NIL .)
    OR              reduce using rule 144 (primary-expression -> NIL .)
    TO              reduce using rule 144 (primary-expression -> NIL .)
    DOWNTO          reduce using rule 144 (primary-expression -> NIL .)
    LESS            reduce using rule 144 (primary-expression -> NIL .)
    LESSEQUAL       reduce using rule 144 (primary-expression -> NIL .)
    EQUAL           reduce using rule 144 (primary-expression -> NIL .)
    DEQUAL          reduce using rule 144 (primary-expression -> NIL .)
    GREATEREQUAL    reduce using rule 144 (primary-expression -> NIL .)
    GREATER         reduce using rule 144 (primary-expression -> NIL .)
    RPAREN          reduce using rule 144 (primary-expression -> NIL .)
    DO              reduce using rule 144 (primary-expression -> NIL .)
    OF              reduce using rule 144 (primary-expression -> NIL .)
    THEN            reduce using rule 144 (primary-expression -> NIL .)
    DOT             reduce using rule 144 (primary-expression -> NIL .)
    RBRACKET        reduce using rule 144 (primary-expression -> NIL .)
    COMMA           reduce using rule 144 (primary-expression -> NIL .)
    END             reduce using rule 144 (primary-expression -> NIL .)
    SEMICOLON       reduce using rule 144 (primary-expression -> NIL .)
    UNTIL           reduce using rule 144 (primary-expression -> NIL .)
    ELSE            reduce using rule 144 (primary-expression -> NIL .)


state 120

    (123) additive-expression -> multiplicative-expression .
    (127) multiplicative-expression -> multiplicative-expression . multiplicative-op unary-expression
    (129) multiplicative-op -> . TIMES
    (130) multiplicative-op -> . DIVIDE
    (131) multiplicative-op -> . DIV
    (132) multiplicative-op -> . MOD
    (133) multiplicative-op -> . AND
    (134) multiplicative-op -> . IN

    PLUS            reduce using rule 123 (additive-expression -> multiplicative-expression .)
    MINUS           reduce using rule 123 (additive-expression -> multiplicative-expression .)
    OR              reduce using rule 123 (additive-expression -> multiplicative-expression .)
    DOT             reduce using rule 123 (additive-expression -> multiplicative-expression .)
    LESS            reduce using rule 123 (additive-expression -> multiplicative-expression .)
    LESSEQUAL       reduce using rule 123 (additive-expression -> multiplicative-expression .)
    EQUAL           reduce using rule 123 (additive-expression -> multiplicative-expression .)
    DEQUAL          reduce using rule 123 (additive-expression -> multiplicative-expression .)
    GREATEREQUAL    reduce using rule 123 (additive-expression -> multiplicative-expression .)
    GREATER         reduce using rule 123 (additive-expression -> multiplicative-expression .)
    RBRACKET        reduce using rule 123 (additive-expression -> multiplicative-expression .)
    COMMA           reduce using rule 123 (additive-expression -> multiplicative-expression .)
    RPAREN          reduce using rule 123 (additive-expression -> multiplicative-expression .)
    END             reduce using rule 123 (additive-expression -> multiplicative-expression .)
    SEMICOLON       reduce using rule 123 (additive-expression -> multiplicative-expression .)
    UNTIL           reduce using rule 123 (additive-expression -> multiplicative-expression .)
    ELSE            reduce using rule 123 (additive-expression -> multiplicative-expression .)
    DO              reduce using rule 123 (additive-expression -> multiplicative-expression .)
    OF              reduce using rule 123 (additive-expression -> multiplicative-expression .)
    THEN            reduce using rule 123 (additive-expression -> multiplicative-expression .)
    TO              reduce using rule 123 (additive-expression -> multiplicative-expression .)
    DOWNTO          reduce using rule 123 (additive-expression -> multiplicative-expression .)
    TIMES           shift and go to state 188
    DIVIDE          shift and go to state 186
    DIV             shift and go to state 190
    MOD             shift and go to state 191
    AND             shift and go to state 185
    IN              shift and go to state 189

    multiplicative-op              shift and go to state 187

state 121

    (135) unary-expression -> unary-op . unary-expression
    (135) unary-expression -> . unary-op unary-expression
    (136) unary-expression -> . primary-expression
    (137) unary-op -> . PLUS
    (138) unary-op -> . MINUS
    (139) unary-op -> . NOT
    (140) primary-expression -> . variable
    (141) primary-expression -> . INTEGER
    (142) primary-expression -> . REAL
    (143) primary-expression -> . STRING
    (144) primary-expression -> . NIL
    (145) primary-expression -> . funcid LPAREN expression-list RPAREN
    (146) primary-expression -> . LBRACKET element-list RBRACKET
    (147) primary-expression -> . LPAREN expression RPAREN
    (99) variable -> . ID
    (100) variable -> . variable LBRACKET subscript-list RBRACKET
    (101) variable -> . variable COMMA fieldid
    (102) variable -> . variable
    (155) funcid -> . ID

    PLUS            shift and go to state 113
    MINUS           shift and go to state 111
    NOT             shift and go to state 123
    INTEGER         shift and go to state 114
    REAL            shift and go to state 108
    STRING          shift and go to state 115
    NIL             shift and go to state 119
    LBRACKET        shift and go to state 109
    LPAREN          shift and go to state 116
    ID              shift and go to state 118

    unary-expression               shift and go to state 192
    unary-op                       shift and go to state 121
    primary-expression             shift and go to state 122
    variable                       shift and go to state 117
    funcid                         shift and go to state 125

state 122

    (136) unary-expression -> primary-expression .

    TIMES           reduce using rule 136 (unary-expression -> primary-expression .)
    DIVIDE          reduce using rule 136 (unary-expression -> primary-expression .)
    DIV             reduce using rule 136 (unary-expression -> primary-expression .)
    MOD             reduce using rule 136 (unary-expression -> primary-expression .)
    AND             reduce using rule 136 (unary-expression -> primary-expression .)
    IN              reduce using rule 136 (unary-expression -> primary-expression .)
    PLUS            reduce using rule 136 (unary-expression -> primary-expression .)
    MINUS           reduce using rule 136 (unary-expression -> primary-expression .)
    OR              reduce using rule 136 (unary-expression -> primary-expression .)
    LESS            reduce using rule 136 (unary-expression -> primary-expression .)
    LESSEQUAL       reduce using rule 136 (unary-expression -> primary-expression .)
    EQUAL           reduce using rule 136 (unary-expression -> primary-expression .)
    DEQUAL          reduce using rule 136 (unary-expression -> primary-expression .)
    GREATEREQUAL    reduce using rule 136 (unary-expression -> primary-expression .)
    GREATER         reduce using rule 136 (unary-expression -> primary-expression .)
    RPAREN          reduce using rule 136 (unary-expression -> primary-expression .)
    COMMA           reduce using rule 136 (unary-expression -> primary-expression .)
    END             reduce using rule 136 (unary-expression -> primary-expression .)
    SEMICOLON       reduce using rule 136 (unary-expression -> primary-expression .)
    UNTIL           reduce using rule 136 (unary-expression -> primary-expression .)
    ELSE            reduce using rule 136 (unary-expression -> primary-expression .)
    DO              reduce using rule 136 (unary-expression -> primary-expression .)
    RBRACKET        reduce using rule 136 (unary-expression -> primary-expression .)
    OF              reduce using rule 136 (unary-expression -> primary-expression .)
    THEN            reduce using rule 136 (unary-expression -> primary-expression .)
    DOT             reduce using rule 136 (unary-expression -> primary-expression .)
    TO              reduce using rule 136 (unary-expression -> primary-expression .)
    DOWNTO          reduce using rule 136 (unary-expression -> primary-expression .)


state 123

    (139) unary-op -> NOT .

    PLUS            reduce using rule 139 (unary-op -> NOT .)
    MINUS           reduce using rule 139 (unary-op -> NOT .)
    NOT             reduce using rule 139 (unary-op -> NOT .)
    INTEGER         reduce using rule 139 (unary-op -> NOT .)
    REAL            reduce using rule 139 (unary-op -> NOT .)
    STRING          reduce using rule 139 (unary-op -> NOT .)
    NIL             reduce using rule 139 (unary-op -> NOT .)
    LBRACKET        reduce using rule 139 (unary-op -> NOT .)
    LPAREN          reduce using rule 139 (unary-op -> NOT .)
    ID              reduce using rule 139 (unary-op -> NOT .)


state 124

    (91) statement -> WHILE expression . DO statement
    (114) expression -> expression . relational-op additive-expression
    (116) relational-op -> . LESS
    (117) relational-op -> . LESSEQUAL
    (118) relational-op -> . EQUAL
    (119) relational-op -> . DEQUAL
    (120) relational-op -> . GREATEREQUAL
    (121) relational-op -> . GREATER

    DO              shift and go to state 193
    LESS            shift and go to state 197
    LESSEQUAL       shift and go to state 200
    EQUAL           shift and go to state 199
    DEQUAL          shift and go to state 198
    GREATEREQUAL    shift and go to state 194
    GREATER         shift and go to state 196

    relational-op                  shift and go to state 195

state 125

    (145) primary-expression -> funcid . LPAREN expression-list RPAREN

    LPAREN          shift and go to state 201


state 126

    (112) record-variable-list -> variable .
    (100) variable -> variable . LBRACKET subscript-list RBRACKET
    (101) variable -> variable . COMMA fieldid
    (102) variable -> variable .

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for DO resolved using rule 102 (variable -> variable .)
    LBRACKET        shift and go to state 137
    COMMA           shift and go to state 138
    DO              reduce using rule 102 (variable -> variable .)

  ! DO              [ reduce using rule 112 (record-variable-list -> variable .) ]
  ! COMMA           [ reduce using rule 112 (record-variable-list -> variable .) ]
  ! LBRACKET        [ reduce using rule 102 (variable -> variable .) ]
  ! COMMA           [ reduce using rule 102 (variable -> variable .) ]


state 127

    (97) statement -> WITH record-variable-list . DO statement
    (113) record-variable-list -> record-variable-list . COMMA variable

    DO              shift and go to state 202
    COMMA           shift and go to state 203


state 128

    (99) variable -> ID .

    LBRACKET        reduce using rule 99 (variable -> ID .)
    COMMA           reduce using rule 99 (variable -> ID .)
    DO              reduce using rule 99 (variable -> ID .)


state 129

    (90) statement -> CASE expression . OF case-list END
    (114) expression -> expression . relational-op additive-expression
    (116) relational-op -> . LESS
    (117) relational-op -> . LESSEQUAL
    (118) relational-op -> . EQUAL
    (119) relational-op -> . DEQUAL
    (120) relational-op -> . GREATEREQUAL
    (121) relational-op -> . GREATER

    OF              shift and go to state 204
    LESS            shift and go to state 197
    LESSEQUAL       shift and go to state 200
    EQUAL           shift and go to state 199
    DEQUAL          shift and go to state 198
    GREATEREQUAL    shift and go to state 194
    GREATER         shift and go to state 196

    relational-op                  shift and go to state 195

state 130

    (87) statement -> BEGIN statement-list . END
    (84) statement-list -> statement-list . SEMICOLON statement

    END             shift and go to state 205
    SEMICOLON       shift and go to state 142


state 131

    (98) statement -> label COLON . statement
    (85) statement -> . empty
    (86) statement -> . variable EQUAL expression
    (87) statement -> . BEGIN statement-list END
    (88) statement -> . IF expression THEN statement
    (89) statement -> . IF expression THEN statement ELSE statement
    (90) statement -> . CASE expression OF case-list END
    (91) statement -> . WHILE expression DO statement
    (92) statement -> . REPEAT statement-list UNTIL expression
    (93) statement -> . FOR varid EQUAL for-list DO statement
    (94) statement -> . procid
    (95) statement -> . procid LPAREN expression-list RPAREN
    (96) statement -> . GOTO label
    (97) statement -> . WITH record-variable-list DO statement
    (98) statement -> . label COLON statement
    (159) empty -> .
    (99) variable -> . ID
    (100) variable -> . variable LBRACKET subscript-list RBRACKET
    (101) variable -> . variable COMMA fieldid
    (102) variable -> . variable
    (156) procid -> . ID
    (111) label -> . INTEGER

    BEGIN           shift and go to state 56
    IF              shift and go to state 66
    CASE            shift and go to state 55
    WHILE           shift and go to state 53
    REPEAT          shift and go to state 60
    FOR             shift and go to state 62
    GOTO            shift and go to state 61
    WITH            shift and go to state 54
    END             reduce using rule 159 (empty -> .)
    SEMICOLON       reduce using rule 159 (empty -> .)
    UNTIL           reduce using rule 159 (empty -> .)
    ELSE            reduce using rule 159 (empty -> .)
    ID              shift and go to state 65
    INTEGER         shift and go to state 63

    procid                         shift and go to state 67
    statement                      shift and go to state 206
    label                          shift and go to state 57
    variable                       shift and go to state 64
    empty                          shift and go to state 59

state 132

    (92) statement -> REPEAT statement-list . UNTIL expression
    (84) statement-list -> statement-list . SEMICOLON statement

    UNTIL           shift and go to state 207
    SEMICOLON       shift and go to state 142


state 133

    (96) statement -> GOTO label .

    END             reduce using rule 96 (statement -> GOTO label .)
    SEMICOLON       reduce using rule 96 (statement -> GOTO label .)
    UNTIL           reduce using rule 96 (statement -> GOTO label .)
    ELSE            reduce using rule 96 (statement -> GOTO label .)


state 134

    (93) statement -> FOR varid . EQUAL for-list DO statement

    EQUAL           shift and go to state 208


state 135

    (158) varid -> ID .

    EQUAL           reduce using rule 158 (varid -> ID .)


state 136

    (86) statement -> variable EQUAL . expression
    (114) expression -> . expression relational-op additive-expression
    (115) expression -> . additive-expression
    (122) additive-expression -> . additive-expression additive-op multiplicative-expression
    (123) additive-expression -> . multiplicative-expression
    (127) multiplicative-expression -> . multiplicative-expression multiplicative-op unary-expression
    (128) multiplicative-expression -> . unary-expression
    (135) unary-expression -> . unary-op unary-expression
    (136) unary-expression -> . primary-expression
    (137) unary-op -> . PLUS
    (138) unary-op -> . MINUS
    (139) unary-op -> . NOT
    (140) primary-expression -> . variable
    (141) primary-expression -> . INTEGER
    (142) primary-expression -> . REAL
    (143) primary-expression -> . STRING
    (144) primary-expression -> . NIL
    (145) primary-expression -> . funcid LPAREN expression-list RPAREN
    (146) primary-expression -> . LBRACKET element-list RBRACKET
    (147) primary-expression -> . LPAREN expression RPAREN
    (99) variable -> . ID
    (100) variable -> . variable LBRACKET subscript-list RBRACKET
    (101) variable -> . variable COMMA fieldid
    (102) variable -> . variable
    (155) funcid -> . ID

    PLUS            shift and go to state 113
    MINUS           shift and go to state 111
    NOT             shift and go to state 123
    INTEGER         shift and go to state 114
    REAL            shift and go to state 108
    STRING          shift and go to state 115
    NIL             shift and go to state 119
    LBRACKET        shift and go to state 109
    LPAREN          shift and go to state 116
    ID              shift and go to state 118

    multiplicative-expression      shift and go to state 120
    expression                     shift and go to state 209
    unary-expression               shift and go to state 112
    unary-op                       shift and go to state 121
    primary-expression             shift and go to state 122
    variable                       shift and go to state 117
    additive-expression            shift and go to state 110
    funcid                         shift and go to state 125

state 137

    (100) variable -> variable LBRACKET . subscript-list RBRACKET
    (103) subscript-list -> . expression
    (104) subscript-list -> . subscript-list COMMA expression
    (114) expression -> . expression relational-op additive-expression
    (115) expression -> . additive-expression
    (122) additive-expression -> . additive-expression additive-op multiplicative-expression
    (123) additive-expression -> . multiplicative-expression
    (127) multiplicative-expression -> . multiplicative-expression multiplicative-op unary-expression
    (128) multiplicative-expression -> . unary-expression
    (135) unary-expression -> . unary-op unary-expression
    (136) unary-expression -> . primary-expression
    (137) unary-op -> . PLUS
    (138) unary-op -> . MINUS
    (139) unary-op -> . NOT
    (140) primary-expression -> . variable
    (141) primary-expression -> . INTEGER
    (142) primary-expression -> . REAL
    (143) primary-expression -> . STRING
    (144) primary-expression -> . NIL
    (145) primary-expression -> . funcid LPAREN expression-list RPAREN
    (146) primary-expression -> . LBRACKET element-list RBRACKET
    (147) primary-expression -> . LPAREN expression RPAREN
    (99) variable -> . ID
    (100) variable -> . variable LBRACKET subscript-list RBRACKET
    (101) variable -> . variable COMMA fieldid
    (102) variable -> . variable
    (155) funcid -> . ID

    PLUS            shift and go to state 113
    MINUS           shift and go to state 111
    NOT             shift and go to state 123
    INTEGER         shift and go to state 114
    REAL            shift and go to state 108
    STRING          shift and go to state 115
    NIL             shift and go to state 119
    LBRACKET        shift and go to state 109
    LPAREN          shift and go to state 116
    ID              shift and go to state 118

    multiplicative-expression      shift and go to state 120
    additive-expression            shift and go to state 110
    unary-expression               shift and go to state 112
    subscript-list                 shift and go to state 210
    unary-op                       shift and go to state 121
    primary-expression             shift and go to state 122
    variable                       shift and go to state 117
    expression                     shift and go to state 211
    funcid                         shift and go to state 125

state 138

    (101) variable -> variable COMMA . fieldid
    (157) fieldid -> . ID

    ID              shift and go to state 213

    fieldid                        shift and go to state 212

state 139

    (88) statement -> IF expression . THEN statement
    (89) statement -> IF expression . THEN statement ELSE statement
    (114) expression -> expression . relational-op additive-expression
    (116) relational-op -> . LESS
    (117) relational-op -> . LESSEQUAL
    (118) relational-op -> . EQUAL
    (119) relational-op -> . DEQUAL
    (120) relational-op -> . GREATEREQUAL
    (121) relational-op -> . GREATER

    THEN            shift and go to state 214
    LESS            shift and go to state 197
    LESSEQUAL       shift and go to state 200
    EQUAL           shift and go to state 199
    DEQUAL          shift and go to state 198
    GREATEREQUAL    shift and go to state 194
    GREATER         shift and go to state 196

    relational-op                  shift and go to state 195

state 140

    (95) statement -> procid LPAREN . expression-list RPAREN
    (109) expression-list -> . expression
    (110) expression-list -> . expression-list COMMA expression
    (114) expression -> . expression relational-op additive-expression
    (115) expression -> . additive-expression
    (122) additive-expression -> . additive-expression additive-op multiplicative-expression
    (123) additive-expression -> . multiplicative-expression
    (127) multiplicative-expression -> . multiplicative-expression multiplicative-op unary-expression
    (128) multiplicative-expression -> . unary-expression
    (135) unary-expression -> . unary-op unary-expression
    (136) unary-expression -> . primary-expression
    (137) unary-op -> . PLUS
    (138) unary-op -> . MINUS
    (139) unary-op -> . NOT
    (140) primary-expression -> . variable
    (141) primary-expression -> . INTEGER
    (142) primary-expression -> . REAL
    (143) primary-expression -> . STRING
    (144) primary-expression -> . NIL
    (145) primary-expression -> . funcid LPAREN expression-list RPAREN
    (146) primary-expression -> . LBRACKET element-list RBRACKET
    (147) primary-expression -> . LPAREN expression RPAREN
    (99) variable -> . ID
    (100) variable -> . variable LBRACKET subscript-list RBRACKET
    (101) variable -> . variable COMMA fieldid
    (102) variable -> . variable
    (155) funcid -> . ID

    PLUS            shift and go to state 113
    MINUS           shift and go to state 111
    NOT             shift and go to state 123
    INTEGER         shift and go to state 114
    REAL            shift and go to state 108
    STRING          shift and go to state 115
    NIL             shift and go to state 119
    LBRACKET        shift and go to state 109
    LPAREN          shift and go to state 116
    ID              shift and go to state 118

    multiplicative-expression      shift and go to state 120
    expression-list                shift and go to state 215
    unary-expression               shift and go to state 112
    unary-op                       shift and go to state 121
    expression                     shift and go to state 216
    primary-expression             shift and go to state 122
    variable                       shift and go to state 117
    additive-expression            shift and go to state 110
    funcid                         shift and go to state 125

state 141

    (16) block5 -> BEGIN statement-list END .

    DOT             reduce using rule 16 (block5 -> BEGIN statement-list END .)
    SEMICOLON       reduce using rule 16 (block5 -> BEGIN statement-list END .)


state 142

    (84) statement-list -> statement-list SEMICOLON . statement
    (85) statement -> . empty
    (86) statement -> . variable EQUAL expression
    (87) statement -> . BEGIN statement-list END
    (88) statement -> . IF expression THEN statement
    (89) statement -> . IF expression THEN statement ELSE statement
    (90) statement -> . CASE expression OF case-list END
    (91) statement -> . WHILE expression DO statement
    (92) statement -> . REPEAT statement-list UNTIL expression
    (93) statement -> . FOR varid EQUAL for-list DO statement
    (94) statement -> . procid
    (95) statement -> . procid LPAREN expression-list RPAREN
    (96) statement -> . GOTO label
    (97) statement -> . WITH record-variable-list DO statement
    (98) statement -> . label COLON statement
    (159) empty -> .
    (99) variable -> . ID
    (100) variable -> . variable LBRACKET subscript-list RBRACKET
    (101) variable -> . variable COMMA fieldid
    (102) variable -> . variable
    (156) procid -> . ID
    (111) label -> . INTEGER

    BEGIN           shift and go to state 56
    IF              shift and go to state 66
    CASE            shift and go to state 55
    WHILE           shift and go to state 53
    REPEAT          shift and go to state 60
    FOR             shift and go to state 62
    GOTO            shift and go to state 61
    WITH            shift and go to state 54
    END             reduce using rule 159 (empty -> .)
    SEMICOLON       reduce using rule 159 (empty -> .)
    UNTIL           reduce using rule 159 (empty -> .)
    ID              shift and go to state 65
    INTEGER         shift and go to state 63

    procid                         shift and go to state 67
    label                          shift and go to state 57
    statement                      shift and go to state 217
    variable                       shift and go to state 64
    empty                          shift and go to state 59

state 143

    (60) tag-field -> typeid .

    OF              reduce using rule 60 (tag-field -> typeid .)


state 144

    (59) variant-part -> CASE tag-field . OF variant-list

    OF              shift and go to state 218


state 145

    (61) tag-field -> ID . COLON typeid
    (154) typeid -> ID .

    COLON           shift and go to state 219
    OF              reduce using rule 154 (typeid -> ID .)


state 146

    (51) field-list -> fixed-part SEMICOLON . variant-part
    (54) fixed-part -> fixed-part SEMICOLON . record-field
    (59) variant-part -> . CASE tag-field OF variant-list
    (55) record-field -> . empty
    (56) record-field -> . fieldid-list COLON type
    (159) empty -> .
    (57) fieldid-list -> . ID
    (58) fieldid-list -> . fieldid-list COMMA ID

    CASE            shift and go to state 71
    SEMICOLON       reduce using rule 159 (empty -> .)
    END             reduce using rule 159 (empty -> .)
    RPAREN          reduce using rule 159 (empty -> .)
    ID              shift and go to state 76

    record-field                   shift and go to state 220
    fieldid-list                   shift and go to state 73
    variant-part                   shift and go to state 221
    empty                          shift and go to state 77

state 147

    (58) fieldid-list -> fieldid-list COMMA . ID

    ID              shift and go to state 222


state 148

    (56) record-field -> fieldid-list COLON . type
    (32) type -> . simple-type
    (33) type -> . structured-type
    (34) type -> . typeid
    (35) type -> . INTEGER
    (36) type -> . REAL
    (37) type -> . STRING
    (38) type -> . constid
    (39) type -> . PLUS constid
    (40) simple-type -> . LPAREN identifier-list RPAREN
    (41) simple-type -> . constant
    (42) simple-type -> . typeid
    (43) structured-type -> . ARRAY LBRACKET index-list RBRACKET OF type
    (44) structured-type -> . RECORD field-list END
    (45) structured-type -> . SET OF simple-type
    (46) structured-type -> . FILE OF type
    (47) structured-type -> . PACKED structured-type
    (154) typeid -> . ID
    (153) constid -> . ID
    (27) constant -> . INTEGER
    (28) constant -> . REAL
    (29) constant -> . STRING
    (30) constant -> . constid
    (31) constant -> . PLUS constid

    INTEGER         shift and go to state 97
    REAL            shift and go to state 10
    STRING          shift and go to state 33
    PLUS            shift and go to state 32
    LPAREN          shift and go to state 37
    ARRAY           shift and go to state 18
    RECORD          shift and go to state 24
    SET             shift and go to state 43
    FILE            shift and go to state 20
    PACKED          shift and go to state 35
    ID              shift and go to state 39

    typeid                         shift and go to state 34
    constant                       shift and go to state 28
    structured-type                shift and go to state 42
    simple-type                    shift and go to state 19
    type                           shift and go to state 223
    constid                        shift and go to state 31

state 149

    (44) structured-type -> RECORD field-list END .

    ID              reduce using rule 44 (structured-type -> RECORD field-list END .)
    SEMICOLON       reduce using rule 44 (structured-type -> RECORD field-list END .)
    END             reduce using rule 44 (structured-type -> RECORD field-list END .)
    RPAREN          reduce using rule 44 (structured-type -> RECORD field-list END .)


state 150

    (11) block2 -> type-declaration SEMICOLON block3 .

    DOT             reduce using rule 11 (block2 -> type-declaration SEMICOLON block3 .)
    SEMICOLON       reduce using rule 11 (block2 -> type-declaration SEMICOLON block3 .)


state 151

    (22) type-declaration -> type-declaration SEMICOLON ID . COMPARATION type

    COMPARATION     shift and go to state 224


state 152

    (9) block1 -> constant-declaration SEMICOLON block2 .

    DOT             reduce using rule 9 (block1 -> constant-declaration SEMICOLON block2 .)
    SEMICOLON       reduce using rule 9 (block1 -> constant-declaration SEMICOLON block2 .)


state 153

    (20) constant-declaration -> constant-declaration SEMICOLON ID . COMPARATION constant
    (154) typeid -> ID .
    (153) constid -> ID .

  ! reduce/reduce conflict for ID resolved using rule 153 (constid -> ID .)
    COMPARATION     shift and go to state 225
    ID              reduce using rule 153 (constid -> ID .)

  ! ID              [ reduce using rule 154 (typeid -> ID .) ]


state 154

    (21) type-declaration -> type ID COMPARATION . type
    (32) type -> . simple-type
    (33) type -> . structured-type
    (34) type -> . typeid
    (35) type -> . INTEGER
    (36) type -> . REAL
    (37) type -> . STRING
    (38) type -> . constid
    (39) type -> . PLUS constid
    (40) simple-type -> . LPAREN identifier-list RPAREN
    (41) simple-type -> . constant
    (42) simple-type -> . typeid
    (43) structured-type -> . ARRAY LBRACKET index-list RBRACKET OF type
    (44) structured-type -> . RECORD field-list END
    (45) structured-type -> . SET OF simple-type
    (46) structured-type -> . FILE OF type
    (47) structured-type -> . PACKED structured-type
    (154) typeid -> . ID
    (153) constid -> . ID
    (27) constant -> . INTEGER
    (28) constant -> . REAL
    (29) constant -> . STRING
    (30) constant -> . constid
    (31) constant -> . PLUS constid

    INTEGER         shift and go to state 97
    REAL            shift and go to state 10
    STRING          shift and go to state 33
    PLUS            shift and go to state 32
    LPAREN          shift and go to state 37
    ARRAY           shift and go to state 18
    RECORD          shift and go to state 24
    SET             shift and go to state 43
    FILE            shift and go to state 20
    PACKED          shift and go to state 35
    ID              shift and go to state 39

    typeid                         shift and go to state 34
    constant                       shift and go to state 28
    structured-type                shift and go to state 42
    simple-type                    shift and go to state 19
    type                           shift and go to state 226
    constid                        shift and go to state 31

state 155

    (15) block4 -> proc-and-func-declaration SEMICOLON block5 .

    DOT             reduce using rule 15 (block4 -> proc-and-func-declaration SEMICOLON block5 .)
    SEMICOLON       reduce using rule 15 (block4 -> proc-and-func-declaration SEMICOLON block5 .)


state 156

    (69) proc-and-func-declaration -> proc-and-func-declaration SEMICOLON proc-or-func .

    SEMICOLON       reduce using rule 69 (proc-and-func-declaration -> proc-and-func-declaration SEMICOLON proc-or-func .)


state 157

    (40) simple-type -> LPAREN identifier-list RPAREN .

    SEMICOLON       reduce using rule 40 (simple-type -> LPAREN identifier-list RPAREN .)
    ID              reduce using rule 40 (simple-type -> LPAREN identifier-list RPAREN .)
    END             reduce using rule 40 (simple-type -> LPAREN identifier-list RPAREN .)
    RPAREN          reduce using rule 40 (simple-type -> LPAREN identifier-list RPAREN .)
    RBRACKET        reduce using rule 40 (simple-type -> LPAREN identifier-list RPAREN .)
    COMMA           reduce using rule 40 (simple-type -> LPAREN identifier-list RPAREN .)


state 158

    (26) variableid-list -> variableid-list COMMA . ID

    ID              shift and go to state 227


state 159

    (23) variable-declaration -> VAR variableid-list COLON . type SEMICOLON
    (32) type -> . simple-type
    (33) type -> . structured-type
    (34) type -> . typeid
    (35) type -> . INTEGER
    (36) type -> . REAL
    (37) type -> . STRING
    (38) type -> . constid
    (39) type -> . PLUS constid
    (40) simple-type -> . LPAREN identifier-list RPAREN
    (41) simple-type -> . constant
    (42) simple-type -> . typeid
    (43) structured-type -> . ARRAY LBRACKET index-list RBRACKET OF type
    (44) structured-type -> . RECORD field-list END
    (45) structured-type -> . SET OF simple-type
    (46) structured-type -> . FILE OF type
    (47) structured-type -> . PACKED structured-type
    (154) typeid -> . ID
    (153) constid -> . ID
    (27) constant -> . INTEGER
    (28) constant -> . REAL
    (29) constant -> . STRING
    (30) constant -> . constid
    (31) constant -> . PLUS constid

    INTEGER         shift and go to state 97
    REAL            shift and go to state 10
    STRING          shift and go to state 33
    PLUS            shift and go to state 32
    LPAREN          shift and go to state 37
    ARRAY           shift and go to state 18
    RECORD          shift and go to state 24
    SET             shift and go to state 43
    FILE            shift and go to state 20
    PACKED          shift and go to state 35
    ID              shift and go to state 39

    structured-type                shift and go to state 42
    constant                       shift and go to state 28
    typeid                         shift and go to state 34
    simple-type                    shift and go to state 19
    type                           shift and go to state 228
    constid                        shift and go to state 31

state 160

    (70) proc-or-func -> PROCEDURE ID parameters . SEMICOLON block-or-forward

    SEMICOLON       shift and go to state 229


state 161

    (13) block3 -> variable-declaration SEMICOLON block4 .

    DOT             reduce using rule 13 (block3 -> variable-declaration SEMICOLON block4 .)
    SEMICOLON       reduce using rule 13 (block3 -> variable-declaration SEMICOLON block4 .)


state 162

    (24) variable-declaration -> variable-declaration SEMICOLON variableid-list . COLON type
    (26) variableid-list -> variableid-list . COMMA ID

    COLON           shift and go to state 230
    COMMA           shift and go to state 158


state 163

    (45) structured-type -> SET OF simple-type .

    ID              reduce using rule 45 (structured-type -> SET OF simple-type .)
    SEMICOLON       reduce using rule 45 (structured-type -> SET OF simple-type .)
    END             reduce using rule 45 (structured-type -> SET OF simple-type .)
    RPAREN          reduce using rule 45 (structured-type -> SET OF simple-type .)


state 164

    (71) proc-or-func -> FUNCTION ID parameters COLON . typeid SEMICOLON block-or-forward
    (154) typeid -> . ID

    ID              shift and go to state 232

    typeid                         shift and go to state 231

state 165

    (80) formal-parameter-section -> FUNCTION . ID parameters COLON typeid

    ID              shift and go to state 233


state 166

    (81) parameterid-list -> ID .

    COLON           reduce using rule 81 (parameterid-list -> ID .)
    COMMA           reduce using rule 81 (parameterid-list -> ID .)


state 167

    (77) formal-parameter-section -> parameterid-list . COLON typeid
    (82) parameterid-list -> parameterid-list . COMMA ID

    COLON           shift and go to state 234
    COMMA           shift and go to state 235


state 168

    (74) parameters -> LPAREN formal-parameter-list . RPAREN
    (76) formal-parameter-list -> formal-parameter-list . SEMICOLON formal-parameter-section

    RPAREN          shift and go to state 237
    SEMICOLON       shift and go to state 236


state 169

    (78) formal-parameter-section -> VAR . parameterid-list COLON typeid
    (81) parameterid-list -> . ID
    (82) parameterid-list -> . parameterid-list COMMA ID

    ID              shift and go to state 166

    parameterid-list               shift and go to state 238

state 170

    (75) formal-parameter-list -> formal-parameter-section .

    RPAREN          reduce using rule 75 (formal-parameter-list -> formal-parameter-section .)
    SEMICOLON       reduce using rule 75 (formal-parameter-list -> formal-parameter-section .)


state 171

    (79) formal-parameter-section -> PROCEDURE . ID parameters

    ID              shift and go to state 239


state 172

    (19) constant-declaration -> CONST ID COMPARATION constant .

    SEMICOLON       reduce using rule 19 (constant-declaration -> CONST ID COMPARATION constant .)


state 173

    (49) index-list -> index-list COMMA . simple-type
    (40) simple-type -> . LPAREN identifier-list RPAREN
    (41) simple-type -> . constant
    (42) simple-type -> . typeid
    (27) constant -> . INTEGER
    (28) constant -> . REAL
    (29) constant -> . STRING
    (30) constant -> . constid
    (31) constant -> . PLUS constid
    (154) typeid -> . ID
    (153) constid -> . ID

    LPAREN          shift and go to state 37
    INTEGER         shift and go to state 105
    REAL            shift and go to state 99
    STRING          shift and go to state 102
    PLUS            shift and go to state 106
    ID              shift and go to state 39

    typeid                         shift and go to state 100
    constant                       shift and go to state 28
    simple-type                    shift and go to state 240
    constid                        shift and go to state 103

state 174

    (43) structured-type -> ARRAY LBRACKET index-list RBRACKET . OF type

    OF              shift and go to state 241


state 175

    (31) constant -> PLUS constid .

    RBRACKET        reduce using rule 31 (constant -> PLUS constid .)
    COMMA           reduce using rule 31 (constant -> PLUS constid .)
    COLON           reduce using rule 31 (constant -> PLUS constid .)
    SEMICOLON       reduce using rule 31 (constant -> PLUS constid .)
    ID              reduce using rule 31 (constant -> PLUS constid .)
    END             reduce using rule 31 (constant -> PLUS constid .)
    RPAREN          reduce using rule 31 (constant -> PLUS constid .)


state 176

    (148) element-list -> empty .

    RBRACKET        reduce using rule 148 (element-list -> empty .)
    COMMA           reduce using rule 148 (element-list -> empty .)


state 177

    (149) element-list -> element .

    RBRACKET        reduce using rule 149 (element-list -> element .)
    COMMA           reduce using rule 149 (element-list -> element .)


state 178

    (146) primary-expression -> LBRACKET element-list . RBRACKET
    (150) element-list -> element-list . COMMA element

    RBRACKET        shift and go to state 242
    COMMA           shift and go to state 243


state 179

    (151) element -> expression .
    (152) element -> expression . DOT DOT DOT expression
    (114) expression -> expression . relational-op additive-expression
    (116) relational-op -> . LESS
    (117) relational-op -> . LESSEQUAL
    (118) relational-op -> . EQUAL
    (119) relational-op -> . DEQUAL
    (120) relational-op -> . GREATEREQUAL
    (121) relational-op -> . GREATER

    RBRACKET        reduce using rule 151 (element -> expression .)
    COMMA           reduce using rule 151 (element -> expression .)
    DOT             shift and go to state 244
    LESS            shift and go to state 197
    LESSEQUAL       shift and go to state 200
    EQUAL           shift and go to state 199
    DEQUAL          shift and go to state 198
    GREATEREQUAL    shift and go to state 194
    GREATER         shift and go to state 196

    relational-op                  shift and go to state 195

state 180

    (122) additive-expression -> additive-expression additive-op . multiplicative-expression
    (127) multiplicative-expression -> . multiplicative-expression multiplicative-op unary-expression
    (128) multiplicative-expression -> . unary-expression
    (135) unary-expression -> . unary-op unary-expression
    (136) unary-expression -> . primary-expression
    (137) unary-op -> . PLUS
    (138) unary-op -> . MINUS
    (139) unary-op -> . NOT
    (140) primary-expression -> . variable
    (141) primary-expression -> . INTEGER
    (142) primary-expression -> . REAL
    (143) primary-expression -> . STRING
    (144) primary-expression -> . NIL
    (145) primary-expression -> . funcid LPAREN expression-list RPAREN
    (146) primary-expression -> . LBRACKET element-list RBRACKET
    (147) primary-expression -> . LPAREN expression RPAREN
    (99) variable -> . ID
    (100) variable -> . variable LBRACKET subscript-list RBRACKET
    (101) variable -> . variable COMMA fieldid
    (102) variable -> . variable
    (155) funcid -> . ID

    PLUS            shift and go to state 113
    MINUS           shift and go to state 111
    NOT             shift and go to state 123
    INTEGER         shift and go to state 114
    REAL            shift and go to state 108
    STRING          shift and go to state 115
    NIL             shift and go to state 119
    LBRACKET        shift and go to state 109
    LPAREN          shift and go to state 116
    ID              shift and go to state 118

    multiplicative-expression      shift and go to state 245
    unary-expression               shift and go to state 112
    unary-op                       shift and go to state 121
    primary-expression             shift and go to state 122
    variable                       shift and go to state 117
    funcid                         shift and go to state 125

state 181

    (126) additive-op -> OR .

    PLUS            reduce using rule 126 (additive-op -> OR .)
    MINUS           reduce using rule 126 (additive-op -> OR .)
    NOT             reduce using rule 126 (additive-op -> OR .)
    INTEGER         reduce using rule 126 (additive-op -> OR .)
    REAL            reduce using rule 126 (additive-op -> OR .)
    STRING          reduce using rule 126 (additive-op -> OR .)
    NIL             reduce using rule 126 (additive-op -> OR .)
    LBRACKET        reduce using rule 126 (additive-op -> OR .)
    LPAREN          reduce using rule 126 (additive-op -> OR .)
    ID              reduce using rule 126 (additive-op -> OR .)


state 182

    (124) additive-op -> PLUS .

    PLUS            reduce using rule 124 (additive-op -> PLUS .)
    MINUS           reduce using rule 124 (additive-op -> PLUS .)
    NOT             reduce using rule 124 (additive-op -> PLUS .)
    INTEGER         reduce using rule 124 (additive-op -> PLUS .)
    REAL            reduce using rule 124 (additive-op -> PLUS .)
    STRING          reduce using rule 124 (additive-op -> PLUS .)
    NIL             reduce using rule 124 (additive-op -> PLUS .)
    LBRACKET        reduce using rule 124 (additive-op -> PLUS .)
    LPAREN          reduce using rule 124 (additive-op -> PLUS .)
    ID              reduce using rule 124 (additive-op -> PLUS .)


state 183

    (125) additive-op -> MINUS .

    PLUS            reduce using rule 125 (additive-op -> MINUS .)
    MINUS           reduce using rule 125 (additive-op -> MINUS .)
    NOT             reduce using rule 125 (additive-op -> MINUS .)
    INTEGER         reduce using rule 125 (additive-op -> MINUS .)
    REAL            reduce using rule 125 (additive-op -> MINUS .)
    STRING          reduce using rule 125 (additive-op -> MINUS .)
    NIL             reduce using rule 125 (additive-op -> MINUS .)
    LBRACKET        reduce using rule 125 (additive-op -> MINUS .)
    LPAREN          reduce using rule 125 (additive-op -> MINUS .)
    ID              reduce using rule 125 (additive-op -> MINUS .)


state 184

    (147) primary-expression -> LPAREN expression . RPAREN
    (114) expression -> expression . relational-op additive-expression
    (116) relational-op -> . LESS
    (117) relational-op -> . LESSEQUAL
    (118) relational-op -> . EQUAL
    (119) relational-op -> . DEQUAL
    (120) relational-op -> . GREATEREQUAL
    (121) relational-op -> . GREATER

    RPAREN          shift and go to state 246
    LESS            shift and go to state 197
    LESSEQUAL       shift and go to state 200
    EQUAL           shift and go to state 199
    DEQUAL          shift and go to state 198
    GREATEREQUAL    shift and go to state 194
    GREATER         shift and go to state 196

    relational-op                  shift and go to state 195

state 185

    (133) multiplicative-op -> AND .

    PLUS            reduce using rule 133 (multiplicative-op -> AND .)
    MINUS           reduce using rule 133 (multiplicative-op -> AND .)
    NOT             reduce using rule 133 (multiplicative-op -> AND .)
    INTEGER         reduce using rule 133 (multiplicative-op -> AND .)
    REAL            reduce using rule 133 (multiplicative-op -> AND .)
    STRING          reduce using rule 133 (multiplicative-op -> AND .)
    NIL             reduce using rule 133 (multiplicative-op -> AND .)
    LBRACKET        reduce using rule 133 (multiplicative-op -> AND .)
    LPAREN          reduce using rule 133 (multiplicative-op -> AND .)
    ID              reduce using rule 133 (multiplicative-op -> AND .)


state 186

    (130) multiplicative-op -> DIVIDE .

    PLUS            reduce using rule 130 (multiplicative-op -> DIVIDE .)
    MINUS           reduce using rule 130 (multiplicative-op -> DIVIDE .)
    NOT             reduce using rule 130 (multiplicative-op -> DIVIDE .)
    INTEGER         reduce using rule 130 (multiplicative-op -> DIVIDE .)
    REAL            reduce using rule 130 (multiplicative-op -> DIVIDE .)
    STRING          reduce using rule 130 (multiplicative-op -> DIVIDE .)
    NIL             reduce using rule 130 (multiplicative-op -> DIVIDE .)
    LBRACKET        reduce using rule 130 (multiplicative-op -> DIVIDE .)
    LPAREN          reduce using rule 130 (multiplicative-op -> DIVIDE .)
    ID              reduce using rule 130 (multiplicative-op -> DIVIDE .)


state 187

    (127) multiplicative-expression -> multiplicative-expression multiplicative-op . unary-expression
    (135) unary-expression -> . unary-op unary-expression
    (136) unary-expression -> . primary-expression
    (137) unary-op -> . PLUS
    (138) unary-op -> . MINUS
    (139) unary-op -> . NOT
    (140) primary-expression -> . variable
    (141) primary-expression -> . INTEGER
    (142) primary-expression -> . REAL
    (143) primary-expression -> . STRING
    (144) primary-expression -> . NIL
    (145) primary-expression -> . funcid LPAREN expression-list RPAREN
    (146) primary-expression -> . LBRACKET element-list RBRACKET
    (147) primary-expression -> . LPAREN expression RPAREN
    (99) variable -> . ID
    (100) variable -> . variable LBRACKET subscript-list RBRACKET
    (101) variable -> . variable COMMA fieldid
    (102) variable -> . variable
    (155) funcid -> . ID

    PLUS            shift and go to state 113
    MINUS           shift and go to state 111
    NOT             shift and go to state 123
    INTEGER         shift and go to state 114
    REAL            shift and go to state 108
    STRING          shift and go to state 115
    NIL             shift and go to state 119
    LBRACKET        shift and go to state 109
    LPAREN          shift and go to state 116
    ID              shift and go to state 118

    unary-expression               shift and go to state 247
    unary-op                       shift and go to state 121
    primary-expression             shift and go to state 122
    variable                       shift and go to state 117
    funcid                         shift and go to state 125

state 188

    (129) multiplicative-op -> TIMES .

    PLUS            reduce using rule 129 (multiplicative-op -> TIMES .)
    MINUS           reduce using rule 129 (multiplicative-op -> TIMES .)
    NOT             reduce using rule 129 (multiplicative-op -> TIMES .)
    INTEGER         reduce using rule 129 (multiplicative-op -> TIMES .)
    REAL            reduce using rule 129 (multiplicative-op -> TIMES .)
    STRING          reduce using rule 129 (multiplicative-op -> TIMES .)
    NIL             reduce using rule 129 (multiplicative-op -> TIMES .)
    LBRACKET        reduce using rule 129 (multiplicative-op -> TIMES .)
    LPAREN          reduce using rule 129 (multiplicative-op -> TIMES .)
    ID              reduce using rule 129 (multiplicative-op -> TIMES .)


state 189

    (134) multiplicative-op -> IN .

    PLUS            reduce using rule 134 (multiplicative-op -> IN .)
    MINUS           reduce using rule 134 (multiplicative-op -> IN .)
    NOT             reduce using rule 134 (multiplicative-op -> IN .)
    INTEGER         reduce using rule 134 (multiplicative-op -> IN .)
    REAL            reduce using rule 134 (multiplicative-op -> IN .)
    STRING          reduce using rule 134 (multiplicative-op -> IN .)
    NIL             reduce using rule 134 (multiplicative-op -> IN .)
    LBRACKET        reduce using rule 134 (multiplicative-op -> IN .)
    LPAREN          reduce using rule 134 (multiplicative-op -> IN .)
    ID              reduce using rule 134 (multiplicative-op -> IN .)


state 190

    (131) multiplicative-op -> DIV .

    PLUS            reduce using rule 131 (multiplicative-op -> DIV .)
    MINUS           reduce using rule 131 (multiplicative-op -> DIV .)
    NOT             reduce using rule 131 (multiplicative-op -> DIV .)
    INTEGER         reduce using rule 131 (multiplicative-op -> DIV .)
    REAL            reduce using rule 131 (multiplicative-op -> DIV .)
    STRING          reduce using rule 131 (multiplicative-op -> DIV .)
    NIL             reduce using rule 131 (multiplicative-op -> DIV .)
    LBRACKET        reduce using rule 131 (multiplicative-op -> DIV .)
    LPAREN          reduce using rule 131 (multiplicative-op -> DIV .)
    ID              reduce using rule 131 (multiplicative-op -> DIV .)


state 191

    (132) multiplicative-op -> MOD .

    PLUS            reduce using rule 132 (multiplicative-op -> MOD .)
    MINUS           reduce using rule 132 (multiplicative-op -> MOD .)
    NOT             reduce using rule 132 (multiplicative-op -> MOD .)
    INTEGER         reduce using rule 132 (multiplicative-op -> MOD .)
    REAL            reduce using rule 132 (multiplicative-op -> MOD .)
    STRING          reduce using rule 132 (multiplicative-op -> MOD .)
    NIL             reduce using rule 132 (multiplicative-op -> MOD .)
    LBRACKET        reduce using rule 132 (multiplicative-op -> MOD .)
    LPAREN          reduce using rule 132 (multiplicative-op -> MOD .)
    ID              reduce using rule 132 (multiplicative-op -> MOD .)


state 192

    (135) unary-expression -> unary-op unary-expression .

    TIMES           reduce using rule 135 (unary-expression -> unary-op unary-expression .)
    DIVIDE          reduce using rule 135 (unary-expression -> unary-op unary-expression .)
    DIV             reduce using rule 135 (unary-expression -> unary-op unary-expression .)
    MOD             reduce using rule 135 (unary-expression -> unary-op unary-expression .)
    AND             reduce using rule 135 (unary-expression -> unary-op unary-expression .)
    IN              reduce using rule 135 (unary-expression -> unary-op unary-expression .)
    PLUS            reduce using rule 135 (unary-expression -> unary-op unary-expression .)
    MINUS           reduce using rule 135 (unary-expression -> unary-op unary-expression .)
    OR              reduce using rule 135 (unary-expression -> unary-op unary-expression .)
    LESS            reduce using rule 135 (unary-expression -> unary-op unary-expression .)
    LESSEQUAL       reduce using rule 135 (unary-expression -> unary-op unary-expression .)
    EQUAL           reduce using rule 135 (unary-expression -> unary-op unary-expression .)
    DEQUAL          reduce using rule 135 (unary-expression -> unary-op unary-expression .)
    GREATEREQUAL    reduce using rule 135 (unary-expression -> unary-op unary-expression .)
    GREATER         reduce using rule 135 (unary-expression -> unary-op unary-expression .)
    RPAREN          reduce using rule 135 (unary-expression -> unary-op unary-expression .)
    COMMA           reduce using rule 135 (unary-expression -> unary-op unary-expression .)
    END             reduce using rule 135 (unary-expression -> unary-op unary-expression .)
    SEMICOLON       reduce using rule 135 (unary-expression -> unary-op unary-expression .)
    UNTIL           reduce using rule 135 (unary-expression -> unary-op unary-expression .)
    ELSE            reduce using rule 135 (unary-expression -> unary-op unary-expression .)
    DO              reduce using rule 135 (unary-expression -> unary-op unary-expression .)
    RBRACKET        reduce using rule 135 (unary-expression -> unary-op unary-expression .)
    OF              reduce using rule 135 (unary-expression -> unary-op unary-expression .)
    THEN            reduce using rule 135 (unary-expression -> unary-op unary-expression .)
    DOT             reduce using rule 135 (unary-expression -> unary-op unary-expression .)
    TO              reduce using rule 135 (unary-expression -> unary-op unary-expression .)
    DOWNTO          reduce using rule 135 (unary-expression -> unary-op unary-expression .)


state 193

    (91) statement -> WHILE expression DO . statement
    (85) statement -> . empty
    (86) statement -> . variable EQUAL expression
    (87) statement -> . BEGIN statement-list END
    (88) statement -> . IF expression THEN statement
    (89) statement -> . IF expression THEN statement ELSE statement
    (90) statement -> . CASE expression OF case-list END
    (91) statement -> . WHILE expression DO statement
    (92) statement -> . REPEAT statement-list UNTIL expression
    (93) statement -> . FOR varid EQUAL for-list DO statement
    (94) statement -> . procid
    (95) statement -> . procid LPAREN expression-list RPAREN
    (96) statement -> . GOTO label
    (97) statement -> . WITH record-variable-list DO statement
    (98) statement -> . label COLON statement
    (159) empty -> .
    (99) variable -> . ID
    (100) variable -> . variable LBRACKET subscript-list RBRACKET
    (101) variable -> . variable COMMA fieldid
    (102) variable -> . variable
    (156) procid -> . ID
    (111) label -> . INTEGER

    BEGIN           shift and go to state 56
    IF              shift and go to state 66
    CASE            shift and go to state 55
    WHILE           shift and go to state 53
    REPEAT          shift and go to state 60
    FOR             shift and go to state 62
    GOTO            shift and go to state 61
    WITH            shift and go to state 54
    END             reduce using rule 159 (empty -> .)
    SEMICOLON       reduce using rule 159 (empty -> .)
    UNTIL           reduce using rule 159 (empty -> .)
    ELSE            reduce using rule 159 (empty -> .)
    ID              shift and go to state 65
    INTEGER         shift and go to state 63

    procid                         shift and go to state 67
    statement                      shift and go to state 248
    label                          shift and go to state 57
    variable                       shift and go to state 64
    empty                          shift and go to state 59

state 194

    (120) relational-op -> GREATEREQUAL .

    PLUS            reduce using rule 120 (relational-op -> GREATEREQUAL .)
    MINUS           reduce using rule 120 (relational-op -> GREATEREQUAL .)
    NOT             reduce using rule 120 (relational-op -> GREATEREQUAL .)
    INTEGER         reduce using rule 120 (relational-op -> GREATEREQUAL .)
    REAL            reduce using rule 120 (relational-op -> GREATEREQUAL .)
    STRING          reduce using rule 120 (relational-op -> GREATEREQUAL .)
    NIL             reduce using rule 120 (relational-op -> GREATEREQUAL .)
    LBRACKET        reduce using rule 120 (relational-op -> GREATEREQUAL .)
    LPAREN          reduce using rule 120 (relational-op -> GREATEREQUAL .)
    ID              reduce using rule 120 (relational-op -> GREATEREQUAL .)


state 195

    (114) expression -> expression relational-op . additive-expression
    (122) additive-expression -> . additive-expression additive-op multiplicative-expression
    (123) additive-expression -> . multiplicative-expression
    (127) multiplicative-expression -> . multiplicative-expression multiplicative-op unary-expression
    (128) multiplicative-expression -> . unary-expression
    (135) unary-expression -> . unary-op unary-expression
    (136) unary-expression -> . primary-expression
    (137) unary-op -> . PLUS
    (138) unary-op -> . MINUS
    (139) unary-op -> . NOT
    (140) primary-expression -> . variable
    (141) primary-expression -> . INTEGER
    (142) primary-expression -> . REAL
    (143) primary-expression -> . STRING
    (144) primary-expression -> . NIL
    (145) primary-expression -> . funcid LPAREN expression-list RPAREN
    (146) primary-expression -> . LBRACKET element-list RBRACKET
    (147) primary-expression -> . LPAREN expression RPAREN
    (99) variable -> . ID
    (100) variable -> . variable LBRACKET subscript-list RBRACKET
    (101) variable -> . variable COMMA fieldid
    (102) variable -> . variable
    (155) funcid -> . ID

    PLUS            shift and go to state 113
    MINUS           shift and go to state 111
    NOT             shift and go to state 123
    INTEGER         shift and go to state 114
    REAL            shift and go to state 108
    STRING          shift and go to state 115
    NIL             shift and go to state 119
    LBRACKET        shift and go to state 109
    LPAREN          shift and go to state 116
    ID              shift and go to state 118

    multiplicative-expression      shift and go to state 120
    unary-expression               shift and go to state 112
    unary-op                       shift and go to state 121
    primary-expression             shift and go to state 122
    variable                       shift and go to state 117
    additive-expression            shift and go to state 249
    funcid                         shift and go to state 125

state 196

    (121) relational-op -> GREATER .

    PLUS            reduce using rule 121 (relational-op -> GREATER .)
    MINUS           reduce using rule 121 (relational-op -> GREATER .)
    NOT             reduce using rule 121 (relational-op -> GREATER .)
    INTEGER         reduce using rule 121 (relational-op -> GREATER .)
    REAL            reduce using rule 121 (relational-op -> GREATER .)
    STRING          reduce using rule 121 (relational-op -> GREATER .)
    NIL             reduce using rule 121 (relational-op -> GREATER .)
    LBRACKET        reduce using rule 121 (relational-op -> GREATER .)
    LPAREN          reduce using rule 121 (relational-op -> GREATER .)
    ID              reduce using rule 121 (relational-op -> GREATER .)


state 197

    (116) relational-op -> LESS .

    PLUS            reduce using rule 116 (relational-op -> LESS .)
    MINUS           reduce using rule 116 (relational-op -> LESS .)
    NOT             reduce using rule 116 (relational-op -> LESS .)
    INTEGER         reduce using rule 116 (relational-op -> LESS .)
    REAL            reduce using rule 116 (relational-op -> LESS .)
    STRING          reduce using rule 116 (relational-op -> LESS .)
    NIL             reduce using rule 116 (relational-op -> LESS .)
    LBRACKET        reduce using rule 116 (relational-op -> LESS .)
    LPAREN          reduce using rule 116 (relational-op -> LESS .)
    ID              reduce using rule 116 (relational-op -> LESS .)


state 198

    (119) relational-op -> DEQUAL .

    PLUS            reduce using rule 119 (relational-op -> DEQUAL .)
    MINUS           reduce using rule 119 (relational-op -> DEQUAL .)
    NOT             reduce using rule 119 (relational-op -> DEQUAL .)
    INTEGER         reduce using rule 119 (relational-op -> DEQUAL .)
    REAL            reduce using rule 119 (relational-op -> DEQUAL .)
    STRING          reduce using rule 119 (relational-op -> DEQUAL .)
    NIL             reduce using rule 119 (relational-op -> DEQUAL .)
    LBRACKET        reduce using rule 119 (relational-op -> DEQUAL .)
    LPAREN          reduce using rule 119 (relational-op -> DEQUAL .)
    ID              reduce using rule 119 (relational-op -> DEQUAL .)


state 199

    (118) relational-op -> EQUAL .

    PLUS            reduce using rule 118 (relational-op -> EQUAL .)
    MINUS           reduce using rule 118 (relational-op -> EQUAL .)
    NOT             reduce using rule 118 (relational-op -> EQUAL .)
    INTEGER         reduce using rule 118 (relational-op -> EQUAL .)
    REAL            reduce using rule 118 (relational-op -> EQUAL .)
    STRING          reduce using rule 118 (relational-op -> EQUAL .)
    NIL             reduce using rule 118 (relational-op -> EQUAL .)
    LBRACKET        reduce using rule 118 (relational-op -> EQUAL .)
    LPAREN          reduce using rule 118 (relational-op -> EQUAL .)
    ID              reduce using rule 118 (relational-op -> EQUAL .)


state 200

    (117) relational-op -> LESSEQUAL .

    PLUS            reduce using rule 117 (relational-op -> LESSEQUAL .)
    MINUS           reduce using rule 117 (relational-op -> LESSEQUAL .)
    NOT             reduce using rule 117 (relational-op -> LESSEQUAL .)
    INTEGER         reduce using rule 117 (relational-op -> LESSEQUAL .)
    REAL            reduce using rule 117 (relational-op -> LESSEQUAL .)
    STRING          reduce using rule 117 (relational-op -> LESSEQUAL .)
    NIL             reduce using rule 117 (relational-op -> LESSEQUAL .)
    LBRACKET        reduce using rule 117 (relational-op -> LESSEQUAL .)
    LPAREN          reduce using rule 117 (relational-op -> LESSEQUAL .)
    ID              reduce using rule 117 (relational-op -> LESSEQUAL .)


state 201

    (145) primary-expression -> funcid LPAREN . expression-list RPAREN
    (109) expression-list -> . expression
    (110) expression-list -> . expression-list COMMA expression
    (114) expression -> . expression relational-op additive-expression
    (115) expression -> . additive-expression
    (122) additive-expression -> . additive-expression additive-op multiplicative-expression
    (123) additive-expression -> . multiplicative-expression
    (127) multiplicative-expression -> . multiplicative-expression multiplicative-op unary-expression
    (128) multiplicative-expression -> . unary-expression
    (135) unary-expression -> . unary-op unary-expression
    (136) unary-expression -> . primary-expression
    (137) unary-op -> . PLUS
    (138) unary-op -> . MINUS
    (139) unary-op -> . NOT
    (140) primary-expression -> . variable
    (141) primary-expression -> . INTEGER
    (142) primary-expression -> . REAL
    (143) primary-expression -> . STRING
    (144) primary-expression -> . NIL
    (145) primary-expression -> . funcid LPAREN expression-list RPAREN
    (146) primary-expression -> . LBRACKET element-list RBRACKET
    (147) primary-expression -> . LPAREN expression RPAREN
    (99) variable -> . ID
    (100) variable -> . variable LBRACKET subscript-list RBRACKET
    (101) variable -> . variable COMMA fieldid
    (102) variable -> . variable
    (155) funcid -> . ID

    PLUS            shift and go to state 113
    MINUS           shift and go to state 111
    NOT             shift and go to state 123
    INTEGER         shift and go to state 114
    REAL            shift and go to state 108
    STRING          shift and go to state 115
    NIL             shift and go to state 119
    LBRACKET        shift and go to state 109
    LPAREN          shift and go to state 116
    ID              shift and go to state 118

    expression-list                shift and go to state 250
    additive-expression            shift and go to state 110
    unary-expression               shift and go to state 112
    multiplicative-expression      shift and go to state 120
    unary-op                       shift and go to state 121
    primary-expression             shift and go to state 122
    variable                       shift and go to state 117
    expression                     shift and go to state 216
    funcid                         shift and go to state 125

state 202

    (97) statement -> WITH record-variable-list DO . statement
    (85) statement -> . empty
    (86) statement -> . variable EQUAL expression
    (87) statement -> . BEGIN statement-list END
    (88) statement -> . IF expression THEN statement
    (89) statement -> . IF expression THEN statement ELSE statement
    (90) statement -> . CASE expression OF case-list END
    (91) statement -> . WHILE expression DO statement
    (92) statement -> . REPEAT statement-list UNTIL expression
    (93) statement -> . FOR varid EQUAL for-list DO statement
    (94) statement -> . procid
    (95) statement -> . procid LPAREN expression-list RPAREN
    (96) statement -> . GOTO label
    (97) statement -> . WITH record-variable-list DO statement
    (98) statement -> . label COLON statement
    (159) empty -> .
    (99) variable -> . ID
    (100) variable -> . variable LBRACKET subscript-list RBRACKET
    (101) variable -> . variable COMMA fieldid
    (102) variable -> . variable
    (156) procid -> . ID
    (111) label -> . INTEGER

    BEGIN           shift and go to state 56
    IF              shift and go to state 66
    CASE            shift and go to state 55
    WHILE           shift and go to state 53
    REPEAT          shift and go to state 60
    FOR             shift and go to state 62
    GOTO            shift and go to state 61
    WITH            shift and go to state 54
    END             reduce using rule 159 (empty -> .)
    SEMICOLON       reduce using rule 159 (empty -> .)
    UNTIL           reduce using rule 159 (empty -> .)
    ELSE            reduce using rule 159 (empty -> .)
    ID              shift and go to state 65
    INTEGER         shift and go to state 63

    procid                         shift and go to state 67
    label                          shift and go to state 57
    statement                      shift and go to state 251
    variable                       shift and go to state 64
    empty                          shift and go to state 59

state 203

    (113) record-variable-list -> record-variable-list COMMA . variable
    (99) variable -> . ID
    (100) variable -> . variable LBRACKET subscript-list RBRACKET
    (101) variable -> . variable COMMA fieldid
    (102) variable -> . variable

    ID              shift and go to state 128

    variable                       shift and go to state 252

state 204

    (90) statement -> CASE expression OF . case-list END
    (105) case-list -> . case-label-list COLON statement
    (106) case-list -> . case-list SEMICOLON case-label-list COLON statement
    (66) case-label-list -> . constant
    (67) case-label-list -> . case-label-list COMMA constant
    (27) constant -> . INTEGER
    (28) constant -> . REAL
    (29) constant -> . STRING
    (30) constant -> . constid
    (31) constant -> . PLUS constid
    (153) constid -> . ID

    INTEGER         shift and go to state 105
    REAL            shift and go to state 99
    STRING          shift and go to state 102
    PLUS            shift and go to state 106
    ID              shift and go to state 82

    case-list                      shift and go to state 253
    constant                       shift and go to state 255
    case-label-list                shift and go to state 254
    constid                        shift and go to state 103

state 205

    (87) statement -> BEGIN statement-list END .

    END             reduce using rule 87 (statement -> BEGIN statement-list END .)
    SEMICOLON       reduce using rule 87 (statement -> BEGIN statement-list END .)
    UNTIL           reduce using rule 87 (statement -> BEGIN statement-list END .)
    ELSE            reduce using rule 87 (statement -> BEGIN statement-list END .)


state 206

    (98) statement -> label COLON statement .

    END             reduce using rule 98 (statement -> label COLON statement .)
    SEMICOLON       reduce using rule 98 (statement -> label COLON statement .)
    UNTIL           reduce using rule 98 (statement -> label COLON statement .)
    ELSE            reduce using rule 98 (statement -> label COLON statement .)


state 207

    (92) statement -> REPEAT statement-list UNTIL . expression
    (114) expression -> . expression relational-op additive-expression
    (115) expression -> . additive-expression
    (122) additive-expression -> . additive-expression additive-op multiplicative-expression
    (123) additive-expression -> . multiplicative-expression
    (127) multiplicative-expression -> . multiplicative-expression multiplicative-op unary-expression
    (128) multiplicative-expression -> . unary-expression
    (135) unary-expression -> . unary-op unary-expression
    (136) unary-expression -> . primary-expression
    (137) unary-op -> . PLUS
    (138) unary-op -> . MINUS
    (139) unary-op -> . NOT
    (140) primary-expression -> . variable
    (141) primary-expression -> . INTEGER
    (142) primary-expression -> . REAL
    (143) primary-expression -> . STRING
    (144) primary-expression -> . NIL
    (145) primary-expression -> . funcid LPAREN expression-list RPAREN
    (146) primary-expression -> . LBRACKET element-list RBRACKET
    (147) primary-expression -> . LPAREN expression RPAREN
    (99) variable -> . ID
    (100) variable -> . variable LBRACKET subscript-list RBRACKET
    (101) variable -> . variable COMMA fieldid
    (102) variable -> . variable
    (155) funcid -> . ID

    PLUS            shift and go to state 113
    MINUS           shift and go to state 111
    NOT             shift and go to state 123
    INTEGER         shift and go to state 114
    REAL            shift and go to state 108
    STRING          shift and go to state 115
    NIL             shift and go to state 119
    LBRACKET        shift and go to state 109
    LPAREN          shift and go to state 116
    ID              shift and go to state 118

    multiplicative-expression      shift and go to state 120
    expression                     shift and go to state 256
    unary-expression               shift and go to state 112
    unary-op                       shift and go to state 121
    primary-expression             shift and go to state 122
    variable                       shift and go to state 117
    additive-expression            shift and go to state 110
    funcid                         shift and go to state 125

state 208

    (93) statement -> FOR varid EQUAL . for-list DO statement
    (107) for-list -> . expression TO expression
    (108) for-list -> . expression DOWNTO expression
    (114) expression -> . expression relational-op additive-expression
    (115) expression -> . additive-expression
    (122) additive-expression -> . additive-expression additive-op multiplicative-expression
    (123) additive-expression -> . multiplicative-expression
    (127) multiplicative-expression -> . multiplicative-expression multiplicative-op unary-expression
    (128) multiplicative-expression -> . unary-expression
    (135) unary-expression -> . unary-op unary-expression
    (136) unary-expression -> . primary-expression
    (137) unary-op -> . PLUS
    (138) unary-op -> . MINUS
    (139) unary-op -> . NOT
    (140) primary-expression -> . variable
    (141) primary-expression -> . INTEGER
    (142) primary-expression -> . REAL
    (143) primary-expression -> . STRING
    (144) primary-expression -> . NIL
    (145) primary-expression -> . funcid LPAREN expression-list RPAREN
    (146) primary-expression -> . LBRACKET element-list RBRACKET
    (147) primary-expression -> . LPAREN expression RPAREN
    (99) variable -> . ID
    (100) variable -> . variable LBRACKET subscript-list RBRACKET
    (101) variable -> . variable COMMA fieldid
    (102) variable -> . variable
    (155) funcid -> . ID

    PLUS            shift and go to state 113
    MINUS           shift and go to state 111
    NOT             shift and go to state 123
    INTEGER         shift and go to state 114
    REAL            shift and go to state 108
    STRING          shift and go to state 115
    NIL             shift and go to state 119
    LBRACKET        shift and go to state 109
    LPAREN          shift and go to state 116
    ID              shift and go to state 118

    multiplicative-expression      shift and go to state 120
    unary-expression               shift and go to state 112
    unary-op                       shift and go to state 121
    expression                     shift and go to state 258
    primary-expression             shift and go to state 122
    variable                       shift and go to state 117
    additive-expression            shift and go to state 110
    for-list                       shift and go to state 257
    funcid                         shift and go to state 125

state 209

    (86) statement -> variable EQUAL expression .
    (114) expression -> expression . relational-op additive-expression
    (116) relational-op -> . LESS
    (117) relational-op -> . LESSEQUAL
    (118) relational-op -> . EQUAL
    (119) relational-op -> . DEQUAL
    (120) relational-op -> . GREATEREQUAL
    (121) relational-op -> . GREATER

    END             reduce using rule 86 (statement -> variable EQUAL expression .)
    SEMICOLON       reduce using rule 86 (statement -> variable EQUAL expression .)
    UNTIL           reduce using rule 86 (statement -> variable EQUAL expression .)
    ELSE            reduce using rule 86 (statement -> variable EQUAL expression .)
    LESS            shift and go to state 197
    LESSEQUAL       shift and go to state 200
    EQUAL           shift and go to state 199
    DEQUAL          shift and go to state 198
    GREATEREQUAL    shift and go to state 194
    GREATER         shift and go to state 196

    relational-op                  shift and go to state 195

state 210

    (100) variable -> variable LBRACKET subscript-list . RBRACKET
    (104) subscript-list -> subscript-list . COMMA expression

    RBRACKET        shift and go to state 260
    COMMA           shift and go to state 259


state 211

    (103) subscript-list -> expression .
    (114) expression -> expression . relational-op additive-expression
    (116) relational-op -> . LESS
    (117) relational-op -> . LESSEQUAL
    (118) relational-op -> . EQUAL
    (119) relational-op -> . DEQUAL
    (120) relational-op -> . GREATEREQUAL
    (121) relational-op -> . GREATER

    RBRACKET        reduce using rule 103 (subscript-list -> expression .)
    COMMA           reduce using rule 103 (subscript-list -> expression .)
    LESS            shift and go to state 197
    LESSEQUAL       shift and go to state 200
    EQUAL           shift and go to state 199
    DEQUAL          shift and go to state 198
    GREATEREQUAL    shift and go to state 194
    GREATER         shift and go to state 196

    relational-op                  shift and go to state 195

state 212

    (101) variable -> variable COMMA fieldid .

    EQUAL           reduce using rule 101 (variable -> variable COMMA fieldid .)
    LBRACKET        reduce using rule 101 (variable -> variable COMMA fieldid .)
    COMMA           reduce using rule 101 (variable -> variable COMMA fieldid .)
    TIMES           reduce using rule 101 (variable -> variable COMMA fieldid .)
    DIVIDE          reduce using rule 101 (variable -> variable COMMA fieldid .)
    DIV             reduce using rule 101 (variable -> variable COMMA fieldid .)
    MOD             reduce using rule 101 (variable -> variable COMMA fieldid .)
    AND             reduce using rule 101 (variable -> variable COMMA fieldid .)
    IN              reduce using rule 101 (variable -> variable COMMA fieldid .)
    PLUS            reduce using rule 101 (variable -> variable COMMA fieldid .)
    MINUS           reduce using rule 101 (variable -> variable COMMA fieldid .)
    OR              reduce using rule 101 (variable -> variable COMMA fieldid .)
    DO              reduce using rule 101 (variable -> variable COMMA fieldid .)
    LESS            reduce using rule 101 (variable -> variable COMMA fieldid .)
    LESSEQUAL       reduce using rule 101 (variable -> variable COMMA fieldid .)
    DEQUAL          reduce using rule 101 (variable -> variable COMMA fieldid .)
    GREATEREQUAL    reduce using rule 101 (variable -> variable COMMA fieldid .)
    GREATER         reduce using rule 101 (variable -> variable COMMA fieldid .)
    OF              reduce using rule 101 (variable -> variable COMMA fieldid .)
    THEN            reduce using rule 101 (variable -> variable COMMA fieldid .)
    DOT             reduce using rule 101 (variable -> variable COMMA fieldid .)
    RBRACKET        reduce using rule 101 (variable -> variable COMMA fieldid .)
    RPAREN          reduce using rule 101 (variable -> variable COMMA fieldid .)
    END             reduce using rule 101 (variable -> variable COMMA fieldid .)
    SEMICOLON       reduce using rule 101 (variable -> variable COMMA fieldid .)
    UNTIL           reduce using rule 101 (variable -> variable COMMA fieldid .)
    ELSE            reduce using rule 101 (variable -> variable COMMA fieldid .)
    TO              reduce using rule 101 (variable -> variable COMMA fieldid .)
    DOWNTO          reduce using rule 101 (variable -> variable COMMA fieldid .)


state 213

    (157) fieldid -> ID .

    EQUAL           reduce using rule 157 (fieldid -> ID .)
    LBRACKET        reduce using rule 157 (fieldid -> ID .)
    COMMA           reduce using rule 157 (fieldid -> ID .)
    TIMES           reduce using rule 157 (fieldid -> ID .)
    DIVIDE          reduce using rule 157 (fieldid -> ID .)
    DIV             reduce using rule 157 (fieldid -> ID .)
    MOD             reduce using rule 157 (fieldid -> ID .)
    AND             reduce using rule 157 (fieldid -> ID .)
    IN              reduce using rule 157 (fieldid -> ID .)
    PLUS            reduce using rule 157 (fieldid -> ID .)
    MINUS           reduce using rule 157 (fieldid -> ID .)
    OR              reduce using rule 157 (fieldid -> ID .)
    DO              reduce using rule 157 (fieldid -> ID .)
    LESS            reduce using rule 157 (fieldid -> ID .)
    LESSEQUAL       reduce using rule 157 (fieldid -> ID .)
    DEQUAL          reduce using rule 157 (fieldid -> ID .)
    GREATEREQUAL    reduce using rule 157 (fieldid -> ID .)
    GREATER         reduce using rule 157 (fieldid -> ID .)
    OF              reduce using rule 157 (fieldid -> ID .)
    THEN            reduce using rule 157 (fieldid -> ID .)
    DOT             reduce using rule 157 (fieldid -> ID .)
    RBRACKET        reduce using rule 157 (fieldid -> ID .)
    RPAREN          reduce using rule 157 (fieldid -> ID .)
    END             reduce using rule 157 (fieldid -> ID .)
    SEMICOLON       reduce using rule 157 (fieldid -> ID .)
    UNTIL           reduce using rule 157 (fieldid -> ID .)
    ELSE            reduce using rule 157 (fieldid -> ID .)
    TO              reduce using rule 157 (fieldid -> ID .)
    DOWNTO          reduce using rule 157 (fieldid -> ID .)


state 214

    (88) statement -> IF expression THEN . statement
    (89) statement -> IF expression THEN . statement ELSE statement
    (85) statement -> . empty
    (86) statement -> . variable EQUAL expression
    (87) statement -> . BEGIN statement-list END
    (88) statement -> . IF expression THEN statement
    (89) statement -> . IF expression THEN statement ELSE statement
    (90) statement -> . CASE expression OF case-list END
    (91) statement -> . WHILE expression DO statement
    (92) statement -> . REPEAT statement-list UNTIL expression
    (93) statement -> . FOR varid EQUAL for-list DO statement
    (94) statement -> . procid
    (95) statement -> . procid LPAREN expression-list RPAREN
    (96) statement -> . GOTO label
    (97) statement -> . WITH record-variable-list DO statement
    (98) statement -> . label COLON statement
    (159) empty -> .
    (99) variable -> . ID
    (100) variable -> . variable LBRACKET subscript-list RBRACKET
    (101) variable -> . variable COMMA fieldid
    (102) variable -> . variable
    (156) procid -> . ID
    (111) label -> . INTEGER

    BEGIN           shift and go to state 56
    IF              shift and go to state 66
    CASE            shift and go to state 55
    WHILE           shift and go to state 53
    REPEAT          shift and go to state 60
    FOR             shift and go to state 62
    GOTO            shift and go to state 61
    WITH            shift and go to state 54
    END             reduce using rule 159 (empty -> .)
    SEMICOLON       reduce using rule 159 (empty -> .)
    UNTIL           reduce using rule 159 (empty -> .)
    ELSE            reduce using rule 159 (empty -> .)
    ID              shift and go to state 65
    INTEGER         shift and go to state 63

    procid                         shift and go to state 67
    statement                      shift and go to state 261
    label                          shift and go to state 57
    variable                       shift and go to state 64
    empty                          shift and go to state 59

state 215

    (95) statement -> procid LPAREN expression-list . RPAREN
    (110) expression-list -> expression-list . COMMA expression

    RPAREN          shift and go to state 262
    COMMA           shift and go to state 263


state 216

    (109) expression-list -> expression .
    (114) expression -> expression . relational-op additive-expression
    (116) relational-op -> . LESS
    (117) relational-op -> . LESSEQUAL
    (118) relational-op -> . EQUAL
    (119) relational-op -> . DEQUAL
    (120) relational-op -> . GREATEREQUAL
    (121) relational-op -> . GREATER

    RPAREN          reduce using rule 109 (expression-list -> expression .)
    COMMA           reduce using rule 109 (expression-list -> expression .)
    LESS            shift and go to state 197
    LESSEQUAL       shift and go to state 200
    EQUAL           shift and go to state 199
    DEQUAL          shift and go to state 198
    GREATEREQUAL    shift and go to state 194
    GREATER         shift and go to state 196

    relational-op                  shift and go to state 195

state 217

    (84) statement-list -> statement-list SEMICOLON statement .

    END             reduce using rule 84 (statement-list -> statement-list SEMICOLON statement .)
    SEMICOLON       reduce using rule 84 (statement-list -> statement-list SEMICOLON statement .)
    UNTIL           reduce using rule 84 (statement-list -> statement-list SEMICOLON statement .)


state 218

    (59) variant-part -> CASE tag-field OF . variant-list
    (62) variant-list -> . variant
    (63) variant-list -> . variant-list SEMICOLON variant
    (64) variant -> . empty
    (65) variant -> . case-label-list COLON LPAREN field-list RPAREN
    (159) empty -> .
    (66) case-label-list -> . constant
    (67) case-label-list -> . case-label-list COMMA constant
    (27) constant -> . INTEGER
    (28) constant -> . REAL
    (29) constant -> . STRING
    (30) constant -> . constid
    (31) constant -> . PLUS constid
    (153) constid -> . ID

    SEMICOLON       reduce using rule 159 (empty -> .)
    END             reduce using rule 159 (empty -> .)
    RPAREN          reduce using rule 159 (empty -> .)
    INTEGER         shift and go to state 105
    REAL            shift and go to state 99
    STRING          shift and go to state 102
    PLUS            shift and go to state 106
    ID              shift and go to state 82

    constant                       shift and go to state 255
    variant                        shift and go to state 264
    case-label-list                shift and go to state 265
    variant-list                   shift and go to state 266
    constid                        shift and go to state 103
    empty                          shift and go to state 267

state 219

    (61) tag-field -> ID COLON . typeid
    (154) typeid -> . ID

    ID              shift and go to state 232

    typeid                         shift and go to state 268

state 220

    (54) fixed-part -> fixed-part SEMICOLON record-field .

    SEMICOLON       reduce using rule 54 (fixed-part -> fixed-part SEMICOLON record-field .)
    RPAREN          reduce using rule 54 (fixed-part -> fixed-part SEMICOLON record-field .)
    END             reduce using rule 54 (fixed-part -> fixed-part SEMICOLON record-field .)


state 221

    (51) field-list -> fixed-part SEMICOLON variant-part .

    RPAREN          reduce using rule 51 (field-list -> fixed-part SEMICOLON variant-part .)
    END             reduce using rule 51 (field-list -> fixed-part SEMICOLON variant-part .)


state 222

    (58) fieldid-list -> fieldid-list COMMA ID .

    COLON           reduce using rule 58 (fieldid-list -> fieldid-list COMMA ID .)
    COMMA           reduce using rule 58 (fieldid-list -> fieldid-list COMMA ID .)


state 223

    (56) record-field -> fieldid-list COLON type .

    SEMICOLON       reduce using rule 56 (record-field -> fieldid-list COLON type .)
    RPAREN          reduce using rule 56 (record-field -> fieldid-list COLON type .)
    END             reduce using rule 56 (record-field -> fieldid-list COLON type .)


state 224

    (22) type-declaration -> type-declaration SEMICOLON ID COMPARATION . type
    (32) type -> . simple-type
    (33) type -> . structured-type
    (34) type -> . typeid
    (35) type -> . INTEGER
    (36) type -> . REAL
    (37) type -> . STRING
    (38) type -> . constid
    (39) type -> . PLUS constid
    (40) simple-type -> . LPAREN identifier-list RPAREN
    (41) simple-type -> . constant
    (42) simple-type -> . typeid
    (43) structured-type -> . ARRAY LBRACKET index-list RBRACKET OF type
    (44) structured-type -> . RECORD field-list END
    (45) structured-type -> . SET OF simple-type
    (46) structured-type -> . FILE OF type
    (47) structured-type -> . PACKED structured-type
    (154) typeid -> . ID
    (153) constid -> . ID
    (27) constant -> . INTEGER
    (28) constant -> . REAL
    (29) constant -> . STRING
    (30) constant -> . constid
    (31) constant -> . PLUS constid

    INTEGER         shift and go to state 97
    REAL            shift and go to state 10
    STRING          shift and go to state 33
    PLUS            shift and go to state 32
    LPAREN          shift and go to state 37
    ARRAY           shift and go to state 18
    RECORD          shift and go to state 24
    SET             shift and go to state 43
    FILE            shift and go to state 20
    PACKED          shift and go to state 35
    ID              shift and go to state 39

    typeid                         shift and go to state 34
    constant                       shift and go to state 28
    structured-type                shift and go to state 42
    simple-type                    shift and go to state 19
    type                           shift and go to state 269
    constid                        shift and go to state 31

state 225

    (20) constant-declaration -> constant-declaration SEMICOLON ID COMPARATION . constant
    (27) constant -> . INTEGER
    (28) constant -> . REAL
    (29) constant -> . STRING
    (30) constant -> . constid
    (31) constant -> . PLUS constid
    (153) constid -> . ID

    INTEGER         shift and go to state 105
    REAL            shift and go to state 99
    STRING          shift and go to state 102
    PLUS            shift and go to state 106
    ID              shift and go to state 82

    constant                       shift and go to state 270
    constid                        shift and go to state 103

state 226

    (21) type-declaration -> type ID COMPARATION type .

    SEMICOLON       reduce using rule 21 (type-declaration -> type ID COMPARATION type .)


state 227

    (26) variableid-list -> variableid-list COMMA ID .

    COLON           reduce using rule 26 (variableid-list -> variableid-list COMMA ID .)
    COMMA           reduce using rule 26 (variableid-list -> variableid-list COMMA ID .)


state 228

    (23) variable-declaration -> VAR variableid-list COLON type . SEMICOLON

    SEMICOLON       shift and go to state 271


state 229

    (70) proc-or-func -> PROCEDURE ID parameters SEMICOLON . block-or-forward
    (72) block-or-forward -> . block
    (73) block-or-forward -> . FORWARD
    (6) block -> . block1
    (7) block -> . label-declaration SEMICOLON block1
    (8) block1 -> . block2
    (9) block1 -> . constant-declaration SEMICOLON block2
    (17) label-declaration -> . label INTEGER
    (18) label-declaration -> . label-declaration COMMA INTEGER
    (10) block2 -> . block3
    (11) block2 -> . type-declaration SEMICOLON block3
    (19) constant-declaration -> . CONST ID COMPARATION constant
    (20) constant-declaration -> . constant-declaration SEMICOLON ID COMPARATION constant
    (111) label -> . INTEGER
    (12) block3 -> . block4
    (13) block3 -> . variable-declaration SEMICOLON block4
    (21) type-declaration -> . type ID COMPARATION type
    (22) type-declaration -> . type-declaration SEMICOLON ID COMPARATION type
    (14) block4 -> . block5
    (15) block4 -> . proc-and-func-declaration SEMICOLON block5
    (23) variable-declaration -> . VAR variableid-list COLON type SEMICOLON
    (24) variable-declaration -> . variable-declaration SEMICOLON variableid-list COLON type
    (32) type -> . simple-type
    (33) type -> . structured-type
    (34) type -> . typeid
    (35) type -> . INTEGER
    (36) type -> . REAL
    (37) type -> . STRING
    (38) type -> . constid
    (39) type -> . PLUS constid
    (16) block5 -> . BEGIN statement-list END
    (68) proc-and-func-declaration -> . proc-or-func
    (69) proc-and-func-declaration -> . proc-and-func-declaration SEMICOLON proc-or-func
    (40) simple-type -> . LPAREN identifier-list RPAREN
    (41) simple-type -> . constant
    (42) simple-type -> . typeid
    (43) structured-type -> . ARRAY LBRACKET index-list RBRACKET OF type
    (44) structured-type -> . RECORD field-list END
    (45) structured-type -> . SET OF simple-type
    (46) structured-type -> . FILE OF type
    (47) structured-type -> . PACKED structured-type
    (154) typeid -> . ID
    (153) constid -> . ID
    (70) proc-or-func -> . PROCEDURE ID parameters SEMICOLON block-or-forward
    (71) proc-or-func -> . FUNCTION ID parameters COLON typeid SEMICOLON block-or-forward
    (27) constant -> . INTEGER
    (28) constant -> . REAL
    (29) constant -> . STRING
    (30) constant -> . constid
    (31) constant -> . PLUS constid

    FORWARD         shift and go to state 273
    CONST           shift and go to state 17
    INTEGER         shift and go to state 27
    VAR             shift and go to state 38
    REAL            shift and go to state 10
    STRING          shift and go to state 33
    PLUS            shift and go to state 32
    BEGIN           shift and go to state 22
    LPAREN          shift and go to state 37
    ARRAY           shift and go to state 18
    RECORD          shift and go to state 24
    SET             shift and go to state 43
    FILE            shift and go to state 20
    PACKED          shift and go to state 35
    ID              shift and go to state 39
    PROCEDURE       shift and go to state 40
    FUNCTION        shift and go to state 11

    block5                         shift and go to state 12
    block4                         shift and go to state 13
    label-declaration              shift and go to state 14
    block2                         shift and go to state 15
    block1                         shift and go to state 16
    simple-type                    shift and go to state 19
    block3                         shift and go to state 21
    block-or-forward               shift and go to state 272
    label                          shift and go to state 23
    type-declaration               shift and go to state 25
    proc-or-func                   shift and go to state 26
    constant                       shift and go to state 28
    constant-declaration           shift and go to state 29
    type                           shift and go to state 30
    constid                        shift and go to state 31
    typeid                         shift and go to state 34
    proc-and-func-declaration      shift and go to state 36
    variable-declaration           shift and go to state 41
    structured-type                shift and go to state 42
    block                          shift and go to state 274

state 230

    (24) variable-declaration -> variable-declaration SEMICOLON variableid-list COLON . type
    (32) type -> . simple-type
    (33) type -> . structured-type
    (34) type -> . typeid
    (35) type -> . INTEGER
    (36) type -> . REAL
    (37) type -> . STRING
    (38) type -> . constid
    (39) type -> . PLUS constid
    (40) simple-type -> . LPAREN identifier-list RPAREN
    (41) simple-type -> . constant
    (42) simple-type -> . typeid
    (43) structured-type -> . ARRAY LBRACKET index-list RBRACKET OF type
    (44) structured-type -> . RECORD field-list END
    (45) structured-type -> . SET OF simple-type
    (46) structured-type -> . FILE OF type
    (47) structured-type -> . PACKED structured-type
    (154) typeid -> . ID
    (153) constid -> . ID
    (27) constant -> . INTEGER
    (28) constant -> . REAL
    (29) constant -> . STRING
    (30) constant -> . constid
    (31) constant -> . PLUS constid

    INTEGER         shift and go to state 97
    REAL            shift and go to state 10
    STRING          shift and go to state 33
    PLUS            shift and go to state 32
    LPAREN          shift and go to state 37
    ARRAY           shift and go to state 18
    RECORD          shift and go to state 24
    SET             shift and go to state 43
    FILE            shift and go to state 20
    PACKED          shift and go to state 35
    ID              shift and go to state 39

    structured-type                shift and go to state 42
    typeid                         shift and go to state 34
    constant                       shift and go to state 28
    simple-type                    shift and go to state 19
    type                           shift and go to state 275
    constid                        shift and go to state 31

state 231

    (71) proc-or-func -> FUNCTION ID parameters COLON typeid . SEMICOLON block-or-forward

    SEMICOLON       shift and go to state 276


state 232

    (154) typeid -> ID .

    OF              reduce using rule 154 (typeid -> ID .)
    RPAREN          reduce using rule 154 (typeid -> ID .)
    SEMICOLON       reduce using rule 154 (typeid -> ID .)


state 233

    (80) formal-parameter-section -> FUNCTION ID . parameters COLON typeid
    (74) parameters -> . LPAREN formal-parameter-list RPAREN

    LPAREN          shift and go to state 94

    parameters                     shift and go to state 277

state 234

    (77) formal-parameter-section -> parameterid-list COLON . typeid
    (154) typeid -> . ID

    ID              shift and go to state 232

    typeid                         shift and go to state 278

state 235

    (82) parameterid-list -> parameterid-list COMMA . ID

    ID              shift and go to state 279


state 236

    (76) formal-parameter-list -> formal-parameter-list SEMICOLON . formal-parameter-section
    (77) formal-parameter-section -> . parameterid-list COLON typeid
    (78) formal-parameter-section -> . VAR parameterid-list COLON typeid
    (79) formal-parameter-section -> . PROCEDURE ID parameters
    (80) formal-parameter-section -> . FUNCTION ID parameters COLON typeid
    (81) parameterid-list -> . ID
    (82) parameterid-list -> . parameterid-list COMMA ID

    VAR             shift and go to state 169
    PROCEDURE       shift and go to state 171
    FUNCTION        shift and go to state 165
    ID              shift and go to state 166

    parameterid-list               shift and go to state 167
    formal-parameter-section       shift and go to state 280

state 237

    (74) parameters -> LPAREN formal-parameter-list RPAREN .

    RPAREN          reduce using rule 74 (parameters -> LPAREN formal-parameter-list RPAREN .)
    SEMICOLON       reduce using rule 74 (parameters -> LPAREN formal-parameter-list RPAREN .)
    COLON           reduce using rule 74 (parameters -> LPAREN formal-parameter-list RPAREN .)


state 238

    (78) formal-parameter-section -> VAR parameterid-list . COLON typeid
    (82) parameterid-list -> parameterid-list . COMMA ID

    COLON           shift and go to state 281
    COMMA           shift and go to state 235


state 239

    (79) formal-parameter-section -> PROCEDURE ID . parameters
    (74) parameters -> . LPAREN formal-parameter-list RPAREN

    LPAREN          shift and go to state 94

    parameters                     shift and go to state 282

state 240

    (49) index-list -> index-list COMMA simple-type .

    RBRACKET        reduce using rule 49 (index-list -> index-list COMMA simple-type .)
    COMMA           reduce using rule 49 (index-list -> index-list COMMA simple-type .)


state 241

    (43) structured-type -> ARRAY LBRACKET index-list RBRACKET OF . type
    (32) type -> . simple-type
    (33) type -> . structured-type
    (34) type -> . typeid
    (35) type -> . INTEGER
    (36) type -> . REAL
    (37) type -> . STRING
    (38) type -> . constid
    (39) type -> . PLUS constid
    (40) simple-type -> . LPAREN identifier-list RPAREN
    (41) simple-type -> . constant
    (42) simple-type -> . typeid
    (43) structured-type -> . ARRAY LBRACKET index-list RBRACKET OF type
    (44) structured-type -> . RECORD field-list END
    (45) structured-type -> . SET OF simple-type
    (46) structured-type -> . FILE OF type
    (47) structured-type -> . PACKED structured-type
    (154) typeid -> . ID
    (153) constid -> . ID
    (27) constant -> . INTEGER
    (28) constant -> . REAL
    (29) constant -> . STRING
    (30) constant -> . constid
    (31) constant -> . PLUS constid

    INTEGER         shift and go to state 97
    REAL            shift and go to state 10
    STRING          shift and go to state 33
    PLUS            shift and go to state 32
    LPAREN          shift and go to state 37
    ARRAY           shift and go to state 18
    RECORD          shift and go to state 24
    SET             shift and go to state 43
    FILE            shift and go to state 20
    PACKED          shift and go to state 35
    ID              shift and go to state 39

    typeid                         shift and go to state 34
    constant                       shift and go to state 28
    structured-type                shift and go to state 42
    simple-type                    shift and go to state 19
    type                           shift and go to state 283
    constid                        shift and go to state 31

state 242

    (146) primary-expression -> LBRACKET element-list RBRACKET .

    TIMES           reduce using rule 146 (primary-expression -> LBRACKET element-list RBRACKET .)
    DIVIDE          reduce using rule 146 (primary-expression -> LBRACKET element-list RBRACKET .)
    DIV             reduce using rule 146 (primary-expression -> LBRACKET element-list RBRACKET .)
    MOD             reduce using rule 146 (primary-expression -> LBRACKET element-list RBRACKET .)
    AND             reduce using rule 146 (primary-expression -> LBRACKET element-list RBRACKET .)
    IN              reduce using rule 146 (primary-expression -> LBRACKET element-list RBRACKET .)
    PLUS            reduce using rule 146 (primary-expression -> LBRACKET element-list RBRACKET .)
    MINUS           reduce using rule 146 (primary-expression -> LBRACKET element-list RBRACKET .)
    OR              reduce using rule 146 (primary-expression -> LBRACKET element-list RBRACKET .)
    TO              reduce using rule 146 (primary-expression -> LBRACKET element-list RBRACKET .)
    DOWNTO          reduce using rule 146 (primary-expression -> LBRACKET element-list RBRACKET .)
    LESS            reduce using rule 146 (primary-expression -> LBRACKET element-list RBRACKET .)
    LESSEQUAL       reduce using rule 146 (primary-expression -> LBRACKET element-list RBRACKET .)
    EQUAL           reduce using rule 146 (primary-expression -> LBRACKET element-list RBRACKET .)
    DEQUAL          reduce using rule 146 (primary-expression -> LBRACKET element-list RBRACKET .)
    GREATEREQUAL    reduce using rule 146 (primary-expression -> LBRACKET element-list RBRACKET .)
    GREATER         reduce using rule 146 (primary-expression -> LBRACKET element-list RBRACKET .)
    RPAREN          reduce using rule 146 (primary-expression -> LBRACKET element-list RBRACKET .)
    DO              reduce using rule 146 (primary-expression -> LBRACKET element-list RBRACKET .)
    OF              reduce using rule 146 (primary-expression -> LBRACKET element-list RBRACKET .)
    THEN            reduce using rule 146 (primary-expression -> LBRACKET element-list RBRACKET .)
    DOT             reduce using rule 146 (primary-expression -> LBRACKET element-list RBRACKET .)
    RBRACKET        reduce using rule 146 (primary-expression -> LBRACKET element-list RBRACKET .)
    COMMA           reduce using rule 146 (primary-expression -> LBRACKET element-list RBRACKET .)
    END             reduce using rule 146 (primary-expression -> LBRACKET element-list RBRACKET .)
    SEMICOLON       reduce using rule 146 (primary-expression -> LBRACKET element-list RBRACKET .)
    UNTIL           reduce using rule 146 (primary-expression -> LBRACKET element-list RBRACKET .)
    ELSE            reduce using rule 146 (primary-expression -> LBRACKET element-list RBRACKET .)


state 243

    (150) element-list -> element-list COMMA . element
    (151) element -> . expression
    (152) element -> . expression DOT DOT DOT expression
    (114) expression -> . expression relational-op additive-expression
    (115) expression -> . additive-expression
    (122) additive-expression -> . additive-expression additive-op multiplicative-expression
    (123) additive-expression -> . multiplicative-expression
    (127) multiplicative-expression -> . multiplicative-expression multiplicative-op unary-expression
    (128) multiplicative-expression -> . unary-expression
    (135) unary-expression -> . unary-op unary-expression
    (136) unary-expression -> . primary-expression
    (137) unary-op -> . PLUS
    (138) unary-op -> . MINUS
    (139) unary-op -> . NOT
    (140) primary-expression -> . variable
    (141) primary-expression -> . INTEGER
    (142) primary-expression -> . REAL
    (143) primary-expression -> . STRING
    (144) primary-expression -> . NIL
    (145) primary-expression -> . funcid LPAREN expression-list RPAREN
    (146) primary-expression -> . LBRACKET element-list RBRACKET
    (147) primary-expression -> . LPAREN expression RPAREN
    (99) variable -> . ID
    (100) variable -> . variable LBRACKET subscript-list RBRACKET
    (101) variable -> . variable COMMA fieldid
    (102) variable -> . variable
    (155) funcid -> . ID

    PLUS            shift and go to state 113
    MINUS           shift and go to state 111
    NOT             shift and go to state 123
    INTEGER         shift and go to state 114
    REAL            shift and go to state 108
    STRING          shift and go to state 115
    NIL             shift and go to state 119
    LBRACKET        shift and go to state 109
    LPAREN          shift and go to state 116
    ID              shift and go to state 118

    multiplicative-expression      shift and go to state 120
    expression                     shift and go to state 179
    unary-expression               shift and go to state 112
    element                        shift and go to state 284
    unary-op                       shift and go to state 121
    primary-expression             shift and go to state 122
    variable                       shift and go to state 117
    additive-expression            shift and go to state 110
    funcid                         shift and go to state 125

state 244

    (152) element -> expression DOT . DOT DOT expression

    DOT             shift and go to state 285


state 245

    (122) additive-expression -> additive-expression additive-op multiplicative-expression .
    (127) multiplicative-expression -> multiplicative-expression . multiplicative-op unary-expression
    (129) multiplicative-op -> . TIMES
    (130) multiplicative-op -> . DIVIDE
    (131) multiplicative-op -> . DIV
    (132) multiplicative-op -> . MOD
    (133) multiplicative-op -> . AND
    (134) multiplicative-op -> . IN

    PLUS            reduce using rule 122 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    MINUS           reduce using rule 122 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    OR              reduce using rule 122 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    DOT             reduce using rule 122 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    LESS            reduce using rule 122 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    LESSEQUAL       reduce using rule 122 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    EQUAL           reduce using rule 122 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    DEQUAL          reduce using rule 122 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    GREATEREQUAL    reduce using rule 122 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    GREATER         reduce using rule 122 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    RBRACKET        reduce using rule 122 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    COMMA           reduce using rule 122 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    RPAREN          reduce using rule 122 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    END             reduce using rule 122 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    SEMICOLON       reduce using rule 122 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    UNTIL           reduce using rule 122 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    ELSE            reduce using rule 122 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    DO              reduce using rule 122 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    OF              reduce using rule 122 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    THEN            reduce using rule 122 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    TO              reduce using rule 122 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    DOWNTO          reduce using rule 122 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    TIMES           shift and go to state 188
    DIVIDE          shift and go to state 186
    DIV             shift and go to state 190
    MOD             shift and go to state 191
    AND             shift and go to state 185
    IN              shift and go to state 189

    multiplicative-op              shift and go to state 187

state 246

    (147) primary-expression -> LPAREN expression RPAREN .

    TIMES           reduce using rule 147 (primary-expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 147 (primary-expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 147 (primary-expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 147 (primary-expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 147 (primary-expression -> LPAREN expression RPAREN .)
    IN              reduce using rule 147 (primary-expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 147 (primary-expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 147 (primary-expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 147 (primary-expression -> LPAREN expression RPAREN .)
    TO              reduce using rule 147 (primary-expression -> LPAREN expression RPAREN .)
    DOWNTO          reduce using rule 147 (primary-expression -> LPAREN expression RPAREN .)
    LESS            reduce using rule 147 (primary-expression -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 147 (primary-expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 147 (primary-expression -> LPAREN expression RPAREN .)
    DEQUAL          reduce using rule 147 (primary-expression -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 147 (primary-expression -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 147 (primary-expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 147 (primary-expression -> LPAREN expression RPAREN .)
    DO              reduce using rule 147 (primary-expression -> LPAREN expression RPAREN .)
    OF              reduce using rule 147 (primary-expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 147 (primary-expression -> LPAREN expression RPAREN .)
    DOT             reduce using rule 147 (primary-expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 147 (primary-expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 147 (primary-expression -> LPAREN expression RPAREN .)
    END             reduce using rule 147 (primary-expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 147 (primary-expression -> LPAREN expression RPAREN .)
    UNTIL           reduce using rule 147 (primary-expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 147 (primary-expression -> LPAREN expression RPAREN .)


state 247

    (127) multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .

    TIMES           reduce using rule 127 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    DIVIDE          reduce using rule 127 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    DIV             reduce using rule 127 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    MOD             reduce using rule 127 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    AND             reduce using rule 127 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    IN              reduce using rule 127 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    PLUS            reduce using rule 127 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    MINUS           reduce using rule 127 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    OR              reduce using rule 127 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    THEN            reduce using rule 127 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    LESS            reduce using rule 127 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    LESSEQUAL       reduce using rule 127 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    EQUAL           reduce using rule 127 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    DEQUAL          reduce using rule 127 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    GREATEREQUAL    reduce using rule 127 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    GREATER         reduce using rule 127 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    TO              reduce using rule 127 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    DOWNTO          reduce using rule 127 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    END             reduce using rule 127 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    SEMICOLON       reduce using rule 127 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    UNTIL           reduce using rule 127 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    ELSE            reduce using rule 127 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    DO              reduce using rule 127 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    RBRACKET        reduce using rule 127 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    COMMA           reduce using rule 127 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    OF              reduce using rule 127 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    RPAREN          reduce using rule 127 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    DOT             reduce using rule 127 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)


state 248

    (91) statement -> WHILE expression DO statement .

    END             reduce using rule 91 (statement -> WHILE expression DO statement .)
    SEMICOLON       reduce using rule 91 (statement -> WHILE expression DO statement .)
    UNTIL           reduce using rule 91 (statement -> WHILE expression DO statement .)
    ELSE            reduce using rule 91 (statement -> WHILE expression DO statement .)


state 249

    (114) expression -> expression relational-op additive-expression .
    (122) additive-expression -> additive-expression . additive-op multiplicative-expression
    (124) additive-op -> . PLUS
    (125) additive-op -> . MINUS
    (126) additive-op -> . OR

    LESS            reduce using rule 114 (expression -> expression relational-op additive-expression .)
    LESSEQUAL       reduce using rule 114 (expression -> expression relational-op additive-expression .)
    EQUAL           reduce using rule 114 (expression -> expression relational-op additive-expression .)
    DEQUAL          reduce using rule 114 (expression -> expression relational-op additive-expression .)
    GREATEREQUAL    reduce using rule 114 (expression -> expression relational-op additive-expression .)
    GREATER         reduce using rule 114 (expression -> expression relational-op additive-expression .)
    DO              reduce using rule 114 (expression -> expression relational-op additive-expression .)
    RBRACKET        reduce using rule 114 (expression -> expression relational-op additive-expression .)
    COMMA           reduce using rule 114 (expression -> expression relational-op additive-expression .)
    DOT             reduce using rule 114 (expression -> expression relational-op additive-expression .)
    RPAREN          reduce using rule 114 (expression -> expression relational-op additive-expression .)
    OF              reduce using rule 114 (expression -> expression relational-op additive-expression .)
    THEN            reduce using rule 114 (expression -> expression relational-op additive-expression .)
    TO              reduce using rule 114 (expression -> expression relational-op additive-expression .)
    DOWNTO          reduce using rule 114 (expression -> expression relational-op additive-expression .)
    END             reduce using rule 114 (expression -> expression relational-op additive-expression .)
    SEMICOLON       reduce using rule 114 (expression -> expression relational-op additive-expression .)
    UNTIL           reduce using rule 114 (expression -> expression relational-op additive-expression .)
    ELSE            reduce using rule 114 (expression -> expression relational-op additive-expression .)
    PLUS            shift and go to state 182
    MINUS           shift and go to state 183
    OR              shift and go to state 181

    additive-op                    shift and go to state 180

state 250

    (145) primary-expression -> funcid LPAREN expression-list . RPAREN
    (110) expression-list -> expression-list . COMMA expression

    RPAREN          shift and go to state 286
    COMMA           shift and go to state 263


state 251

    (97) statement -> WITH record-variable-list DO statement .

    END             reduce using rule 97 (statement -> WITH record-variable-list DO statement .)
    SEMICOLON       reduce using rule 97 (statement -> WITH record-variable-list DO statement .)
    UNTIL           reduce using rule 97 (statement -> WITH record-variable-list DO statement .)
    ELSE            reduce using rule 97 (statement -> WITH record-variable-list DO statement .)


state 252

    (113) record-variable-list -> record-variable-list COMMA variable .
    (100) variable -> variable . LBRACKET subscript-list RBRACKET
    (101) variable -> variable . COMMA fieldid
    (102) variable -> variable .

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for DO resolved using rule 102 (variable -> variable .)
    LBRACKET        shift and go to state 137
    COMMA           shift and go to state 138
    DO              reduce using rule 102 (variable -> variable .)

  ! DO              [ reduce using rule 113 (record-variable-list -> record-variable-list COMMA variable .) ]
  ! COMMA           [ reduce using rule 113 (record-variable-list -> record-variable-list COMMA variable .) ]
  ! LBRACKET        [ reduce using rule 102 (variable -> variable .) ]
  ! COMMA           [ reduce using rule 102 (variable -> variable .) ]


state 253

    (90) statement -> CASE expression OF case-list . END
    (106) case-list -> case-list . SEMICOLON case-label-list COLON statement

    END             shift and go to state 287
    SEMICOLON       shift and go to state 288


state 254

    (105) case-list -> case-label-list . COLON statement
    (67) case-label-list -> case-label-list . COMMA constant

    COLON           shift and go to state 290
    COMMA           shift and go to state 289


state 255

    (66) case-label-list -> constant .

    COLON           reduce using rule 66 (case-label-list -> constant .)
    COMMA           reduce using rule 66 (case-label-list -> constant .)


state 256

    (92) statement -> REPEAT statement-list UNTIL expression .
    (114) expression -> expression . relational-op additive-expression
    (116) relational-op -> . LESS
    (117) relational-op -> . LESSEQUAL
    (118) relational-op -> . EQUAL
    (119) relational-op -> . DEQUAL
    (120) relational-op -> . GREATEREQUAL
    (121) relational-op -> . GREATER

    END             reduce using rule 92 (statement -> REPEAT statement-list UNTIL expression .)
    SEMICOLON       reduce using rule 92 (statement -> REPEAT statement-list UNTIL expression .)
    UNTIL           reduce using rule 92 (statement -> REPEAT statement-list UNTIL expression .)
    ELSE            reduce using rule 92 (statement -> REPEAT statement-list UNTIL expression .)
    LESS            shift and go to state 197
    LESSEQUAL       shift and go to state 200
    EQUAL           shift and go to state 199
    DEQUAL          shift and go to state 198
    GREATEREQUAL    shift and go to state 194
    GREATER         shift and go to state 196

    relational-op                  shift and go to state 195

state 257

    (93) statement -> FOR varid EQUAL for-list . DO statement

    DO              shift and go to state 291


state 258

    (107) for-list -> expression . TO expression
    (108) for-list -> expression . DOWNTO expression
    (114) expression -> expression . relational-op additive-expression
    (116) relational-op -> . LESS
    (117) relational-op -> . LESSEQUAL
    (118) relational-op -> . EQUAL
    (119) relational-op -> . DEQUAL
    (120) relational-op -> . GREATEREQUAL
    (121) relational-op -> . GREATER

    TO              shift and go to state 293
    DOWNTO          shift and go to state 292
    LESS            shift and go to state 197
    LESSEQUAL       shift and go to state 200
    EQUAL           shift and go to state 199
    DEQUAL          shift and go to state 198
    GREATEREQUAL    shift and go to state 194
    GREATER         shift and go to state 196

    relational-op                  shift and go to state 195

state 259

    (104) subscript-list -> subscript-list COMMA . expression
    (114) expression -> . expression relational-op additive-expression
    (115) expression -> . additive-expression
    (122) additive-expression -> . additive-expression additive-op multiplicative-expression
    (123) additive-expression -> . multiplicative-expression
    (127) multiplicative-expression -> . multiplicative-expression multiplicative-op unary-expression
    (128) multiplicative-expression -> . unary-expression
    (135) unary-expression -> . unary-op unary-expression
    (136) unary-expression -> . primary-expression
    (137) unary-op -> . PLUS
    (138) unary-op -> . MINUS
    (139) unary-op -> . NOT
    (140) primary-expression -> . variable
    (141) primary-expression -> . INTEGER
    (142) primary-expression -> . REAL
    (143) primary-expression -> . STRING
    (144) primary-expression -> . NIL
    (145) primary-expression -> . funcid LPAREN expression-list RPAREN
    (146) primary-expression -> . LBRACKET element-list RBRACKET
    (147) primary-expression -> . LPAREN expression RPAREN
    (99) variable -> . ID
    (100) variable -> . variable LBRACKET subscript-list RBRACKET
    (101) variable -> . variable COMMA fieldid
    (102) variable -> . variable
    (155) funcid -> . ID

    PLUS            shift and go to state 113
    MINUS           shift and go to state 111
    NOT             shift and go to state 123
    INTEGER         shift and go to state 114
    REAL            shift and go to state 108
    STRING          shift and go to state 115
    NIL             shift and go to state 119
    LBRACKET        shift and go to state 109
    LPAREN          shift and go to state 116
    ID              shift and go to state 118

    multiplicative-expression      shift and go to state 120
    expression                     shift and go to state 294
    unary-expression               shift and go to state 112
    unary-op                       shift and go to state 121
    primary-expression             shift and go to state 122
    variable                       shift and go to state 117
    additive-expression            shift and go to state 110
    funcid                         shift and go to state 125

state 260

    (100) variable -> variable LBRACKET subscript-list RBRACKET .

    EQUAL           reduce using rule 100 (variable -> variable LBRACKET subscript-list RBRACKET .)
    LBRACKET        reduce using rule 100 (variable -> variable LBRACKET subscript-list RBRACKET .)
    COMMA           reduce using rule 100 (variable -> variable LBRACKET subscript-list RBRACKET .)
    TIMES           reduce using rule 100 (variable -> variable LBRACKET subscript-list RBRACKET .)
    DIVIDE          reduce using rule 100 (variable -> variable LBRACKET subscript-list RBRACKET .)
    DIV             reduce using rule 100 (variable -> variable LBRACKET subscript-list RBRACKET .)
    MOD             reduce using rule 100 (variable -> variable LBRACKET subscript-list RBRACKET .)
    AND             reduce using rule 100 (variable -> variable LBRACKET subscript-list RBRACKET .)
    IN              reduce using rule 100 (variable -> variable LBRACKET subscript-list RBRACKET .)
    PLUS            reduce using rule 100 (variable -> variable LBRACKET subscript-list RBRACKET .)
    MINUS           reduce using rule 100 (variable -> variable LBRACKET subscript-list RBRACKET .)
    OR              reduce using rule 100 (variable -> variable LBRACKET subscript-list RBRACKET .)
    DO              reduce using rule 100 (variable -> variable LBRACKET subscript-list RBRACKET .)
    LESS            reduce using rule 100 (variable -> variable LBRACKET subscript-list RBRACKET .)
    LESSEQUAL       reduce using rule 100 (variable -> variable LBRACKET subscript-list RBRACKET .)
    DEQUAL          reduce using rule 100 (variable -> variable LBRACKET subscript-list RBRACKET .)
    GREATEREQUAL    reduce using rule 100 (variable -> variable LBRACKET subscript-list RBRACKET .)
    GREATER         reduce using rule 100 (variable -> variable LBRACKET subscript-list RBRACKET .)
    OF              reduce using rule 100 (variable -> variable LBRACKET subscript-list RBRACKET .)
    THEN            reduce using rule 100 (variable -> variable LBRACKET subscript-list RBRACKET .)
    DOT             reduce using rule 100 (variable -> variable LBRACKET subscript-list RBRACKET .)
    RBRACKET        reduce using rule 100 (variable -> variable LBRACKET subscript-list RBRACKET .)
    RPAREN          reduce using rule 100 (variable -> variable LBRACKET subscript-list RBRACKET .)
    END             reduce using rule 100 (variable -> variable LBRACKET subscript-list RBRACKET .)
    SEMICOLON       reduce using rule 100 (variable -> variable LBRACKET subscript-list RBRACKET .)
    UNTIL           reduce using rule 100 (variable -> variable LBRACKET subscript-list RBRACKET .)
    ELSE            reduce using rule 100 (variable -> variable LBRACKET subscript-list RBRACKET .)
    TO              reduce using rule 100 (variable -> variable LBRACKET subscript-list RBRACKET .)
    DOWNTO          reduce using rule 100 (variable -> variable LBRACKET subscript-list RBRACKET .)


state 261

    (88) statement -> IF expression THEN statement .
    (89) statement -> IF expression THEN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    END             reduce using rule 88 (statement -> IF expression THEN statement .)
    SEMICOLON       reduce using rule 88 (statement -> IF expression THEN statement .)
    UNTIL           reduce using rule 88 (statement -> IF expression THEN statement .)
    ELSE            shift and go to state 295

  ! ELSE            [ reduce using rule 88 (statement -> IF expression THEN statement .) ]


state 262

    (95) statement -> procid LPAREN expression-list RPAREN .

    END             reduce using rule 95 (statement -> procid LPAREN expression-list RPAREN .)
    SEMICOLON       reduce using rule 95 (statement -> procid LPAREN expression-list RPAREN .)
    UNTIL           reduce using rule 95 (statement -> procid LPAREN expression-list RPAREN .)
    ELSE            reduce using rule 95 (statement -> procid LPAREN expression-list RPAREN .)


state 263

    (110) expression-list -> expression-list COMMA . expression
    (114) expression -> . expression relational-op additive-expression
    (115) expression -> . additive-expression
    (122) additive-expression -> . additive-expression additive-op multiplicative-expression
    (123) additive-expression -> . multiplicative-expression
    (127) multiplicative-expression -> . multiplicative-expression multiplicative-op unary-expression
    (128) multiplicative-expression -> . unary-expression
    (135) unary-expression -> . unary-op unary-expression
    (136) unary-expression -> . primary-expression
    (137) unary-op -> . PLUS
    (138) unary-op -> . MINUS
    (139) unary-op -> . NOT
    (140) primary-expression -> . variable
    (141) primary-expression -> . INTEGER
    (142) primary-expression -> . REAL
    (143) primary-expression -> . STRING
    (144) primary-expression -> . NIL
    (145) primary-expression -> . funcid LPAREN expression-list RPAREN
    (146) primary-expression -> . LBRACKET element-list RBRACKET
    (147) primary-expression -> . LPAREN expression RPAREN
    (99) variable -> . ID
    (100) variable -> . variable LBRACKET subscript-list RBRACKET
    (101) variable -> . variable COMMA fieldid
    (102) variable -> . variable
    (155) funcid -> . ID

    PLUS            shift and go to state 113
    MINUS           shift and go to state 111
    NOT             shift and go to state 123
    INTEGER         shift and go to state 114
    REAL            shift and go to state 108
    STRING          shift and go to state 115
    NIL             shift and go to state 119
    LBRACKET        shift and go to state 109
    LPAREN          shift and go to state 116
    ID              shift and go to state 118

    multiplicative-expression      shift and go to state 120
    additive-expression            shift and go to state 110
    unary-expression               shift and go to state 112
    unary-op                       shift and go to state 121
    primary-expression             shift and go to state 122
    variable                       shift and go to state 117
    expression                     shift and go to state 296
    funcid                         shift and go to state 125

state 264

    (62) variant-list -> variant .

    SEMICOLON       reduce using rule 62 (variant-list -> variant .)
    END             reduce using rule 62 (variant-list -> variant .)
    RPAREN          reduce using rule 62 (variant-list -> variant .)


state 265

    (65) variant -> case-label-list . COLON LPAREN field-list RPAREN
    (67) case-label-list -> case-label-list . COMMA constant

    COLON           shift and go to state 297
    COMMA           shift and go to state 289


state 266

    (59) variant-part -> CASE tag-field OF variant-list .
    (63) variant-list -> variant-list . SEMICOLON variant

    RPAREN          reduce using rule 59 (variant-part -> CASE tag-field OF variant-list .)
    END             reduce using rule 59 (variant-part -> CASE tag-field OF variant-list .)
    SEMICOLON       shift and go to state 298


state 267

    (64) variant -> empty .

    SEMICOLON       reduce using rule 64 (variant -> empty .)
    END             reduce using rule 64 (variant -> empty .)
    RPAREN          reduce using rule 64 (variant -> empty .)


state 268

    (61) tag-field -> ID COLON typeid .

    OF              reduce using rule 61 (tag-field -> ID COLON typeid .)


state 269

    (22) type-declaration -> type-declaration SEMICOLON ID COMPARATION type .

    SEMICOLON       reduce using rule 22 (type-declaration -> type-declaration SEMICOLON ID COMPARATION type .)


state 270

    (20) constant-declaration -> constant-declaration SEMICOLON ID COMPARATION constant .

    SEMICOLON       reduce using rule 20 (constant-declaration -> constant-declaration SEMICOLON ID COMPARATION constant .)


state 271

    (23) variable-declaration -> VAR variableid-list COLON type SEMICOLON .

    SEMICOLON       reduce using rule 23 (variable-declaration -> VAR variableid-list COLON type SEMICOLON .)


state 272

    (70) proc-or-func -> PROCEDURE ID parameters SEMICOLON block-or-forward .

    SEMICOLON       reduce using rule 70 (proc-or-func -> PROCEDURE ID parameters SEMICOLON block-or-forward .)


state 273

    (73) block-or-forward -> FORWARD .

    SEMICOLON       reduce using rule 73 (block-or-forward -> FORWARD .)


state 274

    (72) block-or-forward -> block .

    SEMICOLON       reduce using rule 72 (block-or-forward -> block .)


state 275

    (24) variable-declaration -> variable-declaration SEMICOLON variableid-list COLON type .

    SEMICOLON       reduce using rule 24 (variable-declaration -> variable-declaration SEMICOLON variableid-list COLON type .)


state 276

    (71) proc-or-func -> FUNCTION ID parameters COLON typeid SEMICOLON . block-or-forward
    (72) block-or-forward -> . block
    (73) block-or-forward -> . FORWARD
    (6) block -> . block1
    (7) block -> . label-declaration SEMICOLON block1
    (8) block1 -> . block2
    (9) block1 -> . constant-declaration SEMICOLON block2
    (17) label-declaration -> . label INTEGER
    (18) label-declaration -> . label-declaration COMMA INTEGER
    (10) block2 -> . block3
    (11) block2 -> . type-declaration SEMICOLON block3
    (19) constant-declaration -> . CONST ID COMPARATION constant
    (20) constant-declaration -> . constant-declaration SEMICOLON ID COMPARATION constant
    (111) label -> . INTEGER
    (12) block3 -> . block4
    (13) block3 -> . variable-declaration SEMICOLON block4
    (21) type-declaration -> . type ID COMPARATION type
    (22) type-declaration -> . type-declaration SEMICOLON ID COMPARATION type
    (14) block4 -> . block5
    (15) block4 -> . proc-and-func-declaration SEMICOLON block5
    (23) variable-declaration -> . VAR variableid-list COLON type SEMICOLON
    (24) variable-declaration -> . variable-declaration SEMICOLON variableid-list COLON type
    (32) type -> . simple-type
    (33) type -> . structured-type
    (34) type -> . typeid
    (35) type -> . INTEGER
    (36) type -> . REAL
    (37) type -> . STRING
    (38) type -> . constid
    (39) type -> . PLUS constid
    (16) block5 -> . BEGIN statement-list END
    (68) proc-and-func-declaration -> . proc-or-func
    (69) proc-and-func-declaration -> . proc-and-func-declaration SEMICOLON proc-or-func
    (40) simple-type -> . LPAREN identifier-list RPAREN
    (41) simple-type -> . constant
    (42) simple-type -> . typeid
    (43) structured-type -> . ARRAY LBRACKET index-list RBRACKET OF type
    (44) structured-type -> . RECORD field-list END
    (45) structured-type -> . SET OF simple-type
    (46) structured-type -> . FILE OF type
    (47) structured-type -> . PACKED structured-type
    (154) typeid -> . ID
    (153) constid -> . ID
    (70) proc-or-func -> . PROCEDURE ID parameters SEMICOLON block-or-forward
    (71) proc-or-func -> . FUNCTION ID parameters COLON typeid SEMICOLON block-or-forward
    (27) constant -> . INTEGER
    (28) constant -> . REAL
    (29) constant -> . STRING
    (30) constant -> . constid
    (31) constant -> . PLUS constid

    FORWARD         shift and go to state 273
    CONST           shift and go to state 17
    INTEGER         shift and go to state 27
    VAR             shift and go to state 38
    REAL            shift and go to state 10
    STRING          shift and go to state 33
    PLUS            shift and go to state 32
    BEGIN           shift and go to state 22
    LPAREN          shift and go to state 37
    ARRAY           shift and go to state 18
    RECORD          shift and go to state 24
    SET             shift and go to state 43
    FILE            shift and go to state 20
    PACKED          shift and go to state 35
    ID              shift and go to state 39
    PROCEDURE       shift and go to state 40
    FUNCTION        shift and go to state 11

    block5                         shift and go to state 12
    block4                         shift and go to state 13
    label-declaration              shift and go to state 14
    block2                         shift and go to state 15
    block1                         shift and go to state 16
    simple-type                    shift and go to state 19
    block3                         shift and go to state 21
    block-or-forward               shift and go to state 299
    label                          shift and go to state 23
    type-declaration               shift and go to state 25
    proc-or-func                   shift and go to state 26
    constant                       shift and go to state 28
    constant-declaration           shift and go to state 29
    type                           shift and go to state 30
    constid                        shift and go to state 31
    structured-type                shift and go to state 42
    proc-and-func-declaration      shift and go to state 36
    variable-declaration           shift and go to state 41
    typeid                         shift and go to state 34
    block                          shift and go to state 274

state 277

    (80) formal-parameter-section -> FUNCTION ID parameters . COLON typeid

    COLON           shift and go to state 300


state 278

    (77) formal-parameter-section -> parameterid-list COLON typeid .

    RPAREN          reduce using rule 77 (formal-parameter-section -> parameterid-list COLON typeid .)
    SEMICOLON       reduce using rule 77 (formal-parameter-section -> parameterid-list COLON typeid .)


state 279

    (82) parameterid-list -> parameterid-list COMMA ID .

    COLON           reduce using rule 82 (parameterid-list -> parameterid-list COMMA ID .)
    COMMA           reduce using rule 82 (parameterid-list -> parameterid-list COMMA ID .)


state 280

    (76) formal-parameter-list -> formal-parameter-list SEMICOLON formal-parameter-section .

    RPAREN          reduce using rule 76 (formal-parameter-list -> formal-parameter-list SEMICOLON formal-parameter-section .)
    SEMICOLON       reduce using rule 76 (formal-parameter-list -> formal-parameter-list SEMICOLON formal-parameter-section .)


state 281

    (78) formal-parameter-section -> VAR parameterid-list COLON . typeid
    (154) typeid -> . ID

    ID              shift and go to state 232

    typeid                         shift and go to state 301

state 282

    (79) formal-parameter-section -> PROCEDURE ID parameters .

    RPAREN          reduce using rule 79 (formal-parameter-section -> PROCEDURE ID parameters .)
    SEMICOLON       reduce using rule 79 (formal-parameter-section -> PROCEDURE ID parameters .)


state 283

    (43) structured-type -> ARRAY LBRACKET index-list RBRACKET OF type .

    ID              reduce using rule 43 (structured-type -> ARRAY LBRACKET index-list RBRACKET OF type .)
    SEMICOLON       reduce using rule 43 (structured-type -> ARRAY LBRACKET index-list RBRACKET OF type .)
    END             reduce using rule 43 (structured-type -> ARRAY LBRACKET index-list RBRACKET OF type .)
    RPAREN          reduce using rule 43 (structured-type -> ARRAY LBRACKET index-list RBRACKET OF type .)


state 284

    (150) element-list -> element-list COMMA element .

    RBRACKET        reduce using rule 150 (element-list -> element-list COMMA element .)
    COMMA           reduce using rule 150 (element-list -> element-list COMMA element .)


state 285

    (152) element -> expression DOT DOT . DOT expression

    DOT             shift and go to state 302


state 286

    (145) primary-expression -> funcid LPAREN expression-list RPAREN .

    TIMES           reduce using rule 145 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    DIVIDE          reduce using rule 145 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    DIV             reduce using rule 145 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    MOD             reduce using rule 145 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    AND             reduce using rule 145 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    IN              reduce using rule 145 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    PLUS            reduce using rule 145 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    MINUS           reduce using rule 145 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    OR              reduce using rule 145 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    TO              reduce using rule 145 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    DOWNTO          reduce using rule 145 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    LESS            reduce using rule 145 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    LESSEQUAL       reduce using rule 145 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    EQUAL           reduce using rule 145 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    DEQUAL          reduce using rule 145 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    GREATEREQUAL    reduce using rule 145 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    GREATER         reduce using rule 145 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    RPAREN          reduce using rule 145 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    DO              reduce using rule 145 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    OF              reduce using rule 145 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    THEN            reduce using rule 145 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    DOT             reduce using rule 145 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    RBRACKET        reduce using rule 145 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    COMMA           reduce using rule 145 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    END             reduce using rule 145 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    SEMICOLON       reduce using rule 145 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    UNTIL           reduce using rule 145 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    ELSE            reduce using rule 145 (primary-expression -> funcid LPAREN expression-list RPAREN .)


state 287

    (90) statement -> CASE expression OF case-list END .

    END             reduce using rule 90 (statement -> CASE expression OF case-list END .)
    SEMICOLON       reduce using rule 90 (statement -> CASE expression OF case-list END .)
    UNTIL           reduce using rule 90 (statement -> CASE expression OF case-list END .)
    ELSE            reduce using rule 90 (statement -> CASE expression OF case-list END .)


state 288

    (106) case-list -> case-list SEMICOLON . case-label-list COLON statement
    (66) case-label-list -> . constant
    (67) case-label-list -> . case-label-list COMMA constant
    (27) constant -> . INTEGER
    (28) constant -> . REAL
    (29) constant -> . STRING
    (30) constant -> . constid
    (31) constant -> . PLUS constid
    (153) constid -> . ID

    INTEGER         shift and go to state 105
    REAL            shift and go to state 99
    STRING          shift and go to state 102
    PLUS            shift and go to state 106
    ID              shift and go to state 82

    constant                       shift and go to state 255
    case-label-list                shift and go to state 303
    constid                        shift and go to state 103

state 289

    (67) case-label-list -> case-label-list COMMA . constant
    (27) constant -> . INTEGER
    (28) constant -> . REAL
    (29) constant -> . STRING
    (30) constant -> . constid
    (31) constant -> . PLUS constid
    (153) constid -> . ID

    INTEGER         shift and go to state 105
    REAL            shift and go to state 99
    STRING          shift and go to state 102
    PLUS            shift and go to state 106
    ID              shift and go to state 82

    constant                       shift and go to state 304
    constid                        shift and go to state 103

state 290

    (105) case-list -> case-label-list COLON . statement
    (85) statement -> . empty
    (86) statement -> . variable EQUAL expression
    (87) statement -> . BEGIN statement-list END
    (88) statement -> . IF expression THEN statement
    (89) statement -> . IF expression THEN statement ELSE statement
    (90) statement -> . CASE expression OF case-list END
    (91) statement -> . WHILE expression DO statement
    (92) statement -> . REPEAT statement-list UNTIL expression
    (93) statement -> . FOR varid EQUAL for-list DO statement
    (94) statement -> . procid
    (95) statement -> . procid LPAREN expression-list RPAREN
    (96) statement -> . GOTO label
    (97) statement -> . WITH record-variable-list DO statement
    (98) statement -> . label COLON statement
    (159) empty -> .
    (99) variable -> . ID
    (100) variable -> . variable LBRACKET subscript-list RBRACKET
    (101) variable -> . variable COMMA fieldid
    (102) variable -> . variable
    (156) procid -> . ID
    (111) label -> . INTEGER

    BEGIN           shift and go to state 56
    IF              shift and go to state 66
    CASE            shift and go to state 55
    WHILE           shift and go to state 53
    REPEAT          shift and go to state 60
    FOR             shift and go to state 62
    GOTO            shift and go to state 61
    WITH            shift and go to state 54
    END             reduce using rule 159 (empty -> .)
    SEMICOLON       reduce using rule 159 (empty -> .)
    ID              shift and go to state 65
    INTEGER         shift and go to state 63

    procid                         shift and go to state 67
    statement                      shift and go to state 305
    label                          shift and go to state 57
    variable                       shift and go to state 64
    empty                          shift and go to state 59

state 291

    (93) statement -> FOR varid EQUAL for-list DO . statement
    (85) statement -> . empty
    (86) statement -> . variable EQUAL expression
    (87) statement -> . BEGIN statement-list END
    (88) statement -> . IF expression THEN statement
    (89) statement -> . IF expression THEN statement ELSE statement
    (90) statement -> . CASE expression OF case-list END
    (91) statement -> . WHILE expression DO statement
    (92) statement -> . REPEAT statement-list UNTIL expression
    (93) statement -> . FOR varid EQUAL for-list DO statement
    (94) statement -> . procid
    (95) statement -> . procid LPAREN expression-list RPAREN
    (96) statement -> . GOTO label
    (97) statement -> . WITH record-variable-list DO statement
    (98) statement -> . label COLON statement
    (159) empty -> .
    (99) variable -> . ID
    (100) variable -> . variable LBRACKET subscript-list RBRACKET
    (101) variable -> . variable COMMA fieldid
    (102) variable -> . variable
    (156) procid -> . ID
    (111) label -> . INTEGER

    BEGIN           shift and go to state 56
    IF              shift and go to state 66
    CASE            shift and go to state 55
    WHILE           shift and go to state 53
    REPEAT          shift and go to state 60
    FOR             shift and go to state 62
    GOTO            shift and go to state 61
    WITH            shift and go to state 54
    END             reduce using rule 159 (empty -> .)
    SEMICOLON       reduce using rule 159 (empty -> .)
    UNTIL           reduce using rule 159 (empty -> .)
    ELSE            reduce using rule 159 (empty -> .)
    ID              shift and go to state 65
    INTEGER         shift and go to state 63

    procid                         shift and go to state 67
    label                          shift and go to state 57
    statement                      shift and go to state 306
    variable                       shift and go to state 64
    empty                          shift and go to state 59

state 292

    (108) for-list -> expression DOWNTO . expression
    (114) expression -> . expression relational-op additive-expression
    (115) expression -> . additive-expression
    (122) additive-expression -> . additive-expression additive-op multiplicative-expression
    (123) additive-expression -> . multiplicative-expression
    (127) multiplicative-expression -> . multiplicative-expression multiplicative-op unary-expression
    (128) multiplicative-expression -> . unary-expression
    (135) unary-expression -> . unary-op unary-expression
    (136) unary-expression -> . primary-expression
    (137) unary-op -> . PLUS
    (138) unary-op -> . MINUS
    (139) unary-op -> . NOT
    (140) primary-expression -> . variable
    (141) primary-expression -> . INTEGER
    (142) primary-expression -> . REAL
    (143) primary-expression -> . STRING
    (144) primary-expression -> . NIL
    (145) primary-expression -> . funcid LPAREN expression-list RPAREN
    (146) primary-expression -> . LBRACKET element-list RBRACKET
    (147) primary-expression -> . LPAREN expression RPAREN
    (99) variable -> . ID
    (100) variable -> . variable LBRACKET subscript-list RBRACKET
    (101) variable -> . variable COMMA fieldid
    (102) variable -> . variable
    (155) funcid -> . ID

    PLUS            shift and go to state 113
    MINUS           shift and go to state 111
    NOT             shift and go to state 123
    INTEGER         shift and go to state 114
    REAL            shift and go to state 108
    STRING          shift and go to state 115
    NIL             shift and go to state 119
    LBRACKET        shift and go to state 109
    LPAREN          shift and go to state 116
    ID              shift and go to state 118

    multiplicative-expression      shift and go to state 120
    expression                     shift and go to state 307
    unary-expression               shift and go to state 112
    unary-op                       shift and go to state 121
    primary-expression             shift and go to state 122
    variable                       shift and go to state 117
    additive-expression            shift and go to state 110
    funcid                         shift and go to state 125

state 293

    (107) for-list -> expression TO . expression
    (114) expression -> . expression relational-op additive-expression
    (115) expression -> . additive-expression
    (122) additive-expression -> . additive-expression additive-op multiplicative-expression
    (123) additive-expression -> . multiplicative-expression
    (127) multiplicative-expression -> . multiplicative-expression multiplicative-op unary-expression
    (128) multiplicative-expression -> . unary-expression
    (135) unary-expression -> . unary-op unary-expression
    (136) unary-expression -> . primary-expression
    (137) unary-op -> . PLUS
    (138) unary-op -> . MINUS
    (139) unary-op -> . NOT
    (140) primary-expression -> . variable
    (141) primary-expression -> . INTEGER
    (142) primary-expression -> . REAL
    (143) primary-expression -> . STRING
    (144) primary-expression -> . NIL
    (145) primary-expression -> . funcid LPAREN expression-list RPAREN
    (146) primary-expression -> . LBRACKET element-list RBRACKET
    (147) primary-expression -> . LPAREN expression RPAREN
    (99) variable -> . ID
    (100) variable -> . variable LBRACKET subscript-list RBRACKET
    (101) variable -> . variable COMMA fieldid
    (102) variable -> . variable
    (155) funcid -> . ID

    PLUS            shift and go to state 113
    MINUS           shift and go to state 111
    NOT             shift and go to state 123
    INTEGER         shift and go to state 114
    REAL            shift and go to state 108
    STRING          shift and go to state 115
    NIL             shift and go to state 119
    LBRACKET        shift and go to state 109
    LPAREN          shift and go to state 116
    ID              shift and go to state 118

    multiplicative-expression      shift and go to state 120
    expression                     shift and go to state 308
    unary-expression               shift and go to state 112
    unary-op                       shift and go to state 121
    primary-expression             shift and go to state 122
    variable                       shift and go to state 117
    additive-expression            shift and go to state 110
    funcid                         shift and go to state 125

state 294

    (104) subscript-list -> subscript-list COMMA expression .
    (114) expression -> expression . relational-op additive-expression
    (116) relational-op -> . LESS
    (117) relational-op -> . LESSEQUAL
    (118) relational-op -> . EQUAL
    (119) relational-op -> . DEQUAL
    (120) relational-op -> . GREATEREQUAL
    (121) relational-op -> . GREATER

    RBRACKET        reduce using rule 104 (subscript-list -> subscript-list COMMA expression .)
    COMMA           reduce using rule 104 (subscript-list -> subscript-list COMMA expression .)
    LESS            shift and go to state 197
    LESSEQUAL       shift and go to state 200
    EQUAL           shift and go to state 199
    DEQUAL          shift and go to state 198
    GREATEREQUAL    shift and go to state 194
    GREATER         shift and go to state 196

    relational-op                  shift and go to state 195

state 295

    (89) statement -> IF expression THEN statement ELSE . statement
    (85) statement -> . empty
    (86) statement -> . variable EQUAL expression
    (87) statement -> . BEGIN statement-list END
    (88) statement -> . IF expression THEN statement
    (89) statement -> . IF expression THEN statement ELSE statement
    (90) statement -> . CASE expression OF case-list END
    (91) statement -> . WHILE expression DO statement
    (92) statement -> . REPEAT statement-list UNTIL expression
    (93) statement -> . FOR varid EQUAL for-list DO statement
    (94) statement -> . procid
    (95) statement -> . procid LPAREN expression-list RPAREN
    (96) statement -> . GOTO label
    (97) statement -> . WITH record-variable-list DO statement
    (98) statement -> . label COLON statement
    (159) empty -> .
    (99) variable -> . ID
    (100) variable -> . variable LBRACKET subscript-list RBRACKET
    (101) variable -> . variable COMMA fieldid
    (102) variable -> . variable
    (156) procid -> . ID
    (111) label -> . INTEGER

    BEGIN           shift and go to state 56
    IF              shift and go to state 66
    CASE            shift and go to state 55
    WHILE           shift and go to state 53
    REPEAT          shift and go to state 60
    FOR             shift and go to state 62
    GOTO            shift and go to state 61
    WITH            shift and go to state 54
    END             reduce using rule 159 (empty -> .)
    SEMICOLON       reduce using rule 159 (empty -> .)
    UNTIL           reduce using rule 159 (empty -> .)
    ELSE            reduce using rule 159 (empty -> .)
    ID              shift and go to state 65
    INTEGER         shift and go to state 63

    procid                         shift and go to state 67
    statement                      shift and go to state 309
    label                          shift and go to state 57
    variable                       shift and go to state 64
    empty                          shift and go to state 59

state 296

    (110) expression-list -> expression-list COMMA expression .
    (114) expression -> expression . relational-op additive-expression
    (116) relational-op -> . LESS
    (117) relational-op -> . LESSEQUAL
    (118) relational-op -> . EQUAL
    (119) relational-op -> . DEQUAL
    (120) relational-op -> . GREATEREQUAL
    (121) relational-op -> . GREATER

    RPAREN          reduce using rule 110 (expression-list -> expression-list COMMA expression .)
    COMMA           reduce using rule 110 (expression-list -> expression-list COMMA expression .)
    LESS            shift and go to state 197
    LESSEQUAL       shift and go to state 200
    EQUAL           shift and go to state 199
    DEQUAL          shift and go to state 198
    GREATEREQUAL    shift and go to state 194
    GREATER         shift and go to state 196

    relational-op                  shift and go to state 195

state 297

    (65) variant -> case-label-list COLON . LPAREN field-list RPAREN

    LPAREN          shift and go to state 310


state 298

    (63) variant-list -> variant-list SEMICOLON . variant
    (64) variant -> . empty
    (65) variant -> . case-label-list COLON LPAREN field-list RPAREN
    (159) empty -> .
    (66) case-label-list -> . constant
    (67) case-label-list -> . case-label-list COMMA constant
    (27) constant -> . INTEGER
    (28) constant -> . REAL
    (29) constant -> . STRING
    (30) constant -> . constid
    (31) constant -> . PLUS constid
    (153) constid -> . ID

    SEMICOLON       reduce using rule 159 (empty -> .)
    END             reduce using rule 159 (empty -> .)
    RPAREN          reduce using rule 159 (empty -> .)
    INTEGER         shift and go to state 105
    REAL            shift and go to state 99
    STRING          shift and go to state 102
    PLUS            shift and go to state 106
    ID              shift and go to state 82

    constant                       shift and go to state 255
    variant                        shift and go to state 311
    case-label-list                shift and go to state 265
    constid                        shift and go to state 103
    empty                          shift and go to state 267

state 299

    (71) proc-or-func -> FUNCTION ID parameters COLON typeid SEMICOLON block-or-forward .

    SEMICOLON       reduce using rule 71 (proc-or-func -> FUNCTION ID parameters COLON typeid SEMICOLON block-or-forward .)


state 300

    (80) formal-parameter-section -> FUNCTION ID parameters COLON . typeid
    (154) typeid -> . ID

    ID              shift and go to state 232

    typeid                         shift and go to state 312

state 301

    (78) formal-parameter-section -> VAR parameterid-list COLON typeid .

    RPAREN          reduce using rule 78 (formal-parameter-section -> VAR parameterid-list COLON typeid .)
    SEMICOLON       reduce using rule 78 (formal-parameter-section -> VAR parameterid-list COLON typeid .)


state 302

    (152) element -> expression DOT DOT DOT . expression
    (114) expression -> . expression relational-op additive-expression
    (115) expression -> . additive-expression
    (122) additive-expression -> . additive-expression additive-op multiplicative-expression
    (123) additive-expression -> . multiplicative-expression
    (127) multiplicative-expression -> . multiplicative-expression multiplicative-op unary-expression
    (128) multiplicative-expression -> . unary-expression
    (135) unary-expression -> . unary-op unary-expression
    (136) unary-expression -> . primary-expression
    (137) unary-op -> . PLUS
    (138) unary-op -> . MINUS
    (139) unary-op -> . NOT
    (140) primary-expression -> . variable
    (141) primary-expression -> . INTEGER
    (142) primary-expression -> . REAL
    (143) primary-expression -> . STRING
    (144) primary-expression -> . NIL
    (145) primary-expression -> . funcid LPAREN expression-list RPAREN
    (146) primary-expression -> . LBRACKET element-list RBRACKET
    (147) primary-expression -> . LPAREN expression RPAREN
    (99) variable -> . ID
    (100) variable -> . variable LBRACKET subscript-list RBRACKET
    (101) variable -> . variable COMMA fieldid
    (102) variable -> . variable
    (155) funcid -> . ID

    PLUS            shift and go to state 113
    MINUS           shift and go to state 111
    NOT             shift and go to state 123
    INTEGER         shift and go to state 114
    REAL            shift and go to state 108
    STRING          shift and go to state 115
    NIL             shift and go to state 119
    LBRACKET        shift and go to state 109
    LPAREN          shift and go to state 116
    ID              shift and go to state 118

    multiplicative-expression      shift and go to state 120
    expression                     shift and go to state 313
    unary-expression               shift and go to state 112
    unary-op                       shift and go to state 121
    primary-expression             shift and go to state 122
    variable                       shift and go to state 117
    additive-expression            shift and go to state 110
    funcid                         shift and go to state 125

state 303

    (106) case-list -> case-list SEMICOLON case-label-list . COLON statement
    (67) case-label-list -> case-label-list . COMMA constant

    COLON           shift and go to state 314
    COMMA           shift and go to state 289


state 304

    (67) case-label-list -> case-label-list COMMA constant .

    COLON           reduce using rule 67 (case-label-list -> case-label-list COMMA constant .)
    COMMA           reduce using rule 67 (case-label-list -> case-label-list COMMA constant .)


state 305

    (105) case-list -> case-label-list COLON statement .

    END             reduce using rule 105 (case-list -> case-label-list COLON statement .)
    SEMICOLON       reduce using rule 105 (case-list -> case-label-list COLON statement .)


state 306

    (93) statement -> FOR varid EQUAL for-list DO statement .

    END             reduce using rule 93 (statement -> FOR varid EQUAL for-list DO statement .)
    SEMICOLON       reduce using rule 93 (statement -> FOR varid EQUAL for-list DO statement .)
    UNTIL           reduce using rule 93 (statement -> FOR varid EQUAL for-list DO statement .)
    ELSE            reduce using rule 93 (statement -> FOR varid EQUAL for-list DO statement .)


state 307

    (108) for-list -> expression DOWNTO expression .
    (114) expression -> expression . relational-op additive-expression
    (116) relational-op -> . LESS
    (117) relational-op -> . LESSEQUAL
    (118) relational-op -> . EQUAL
    (119) relational-op -> . DEQUAL
    (120) relational-op -> . GREATEREQUAL
    (121) relational-op -> . GREATER

    DO              reduce using rule 108 (for-list -> expression DOWNTO expression .)
    LESS            shift and go to state 197
    LESSEQUAL       shift and go to state 200
    EQUAL           shift and go to state 199
    DEQUAL          shift and go to state 198
    GREATEREQUAL    shift and go to state 194
    GREATER         shift and go to state 196

    relational-op                  shift and go to state 195

state 308

    (107) for-list -> expression TO expression .
    (114) expression -> expression . relational-op additive-expression
    (116) relational-op -> . LESS
    (117) relational-op -> . LESSEQUAL
    (118) relational-op -> . EQUAL
    (119) relational-op -> . DEQUAL
    (120) relational-op -> . GREATEREQUAL
    (121) relational-op -> . GREATER

    DO              reduce using rule 107 (for-list -> expression TO expression .)
    LESS            shift and go to state 197
    LESSEQUAL       shift and go to state 200
    EQUAL           shift and go to state 199
    DEQUAL          shift and go to state 198
    GREATEREQUAL    shift and go to state 194
    GREATER         shift and go to state 196

    relational-op                  shift and go to state 195

state 309

    (89) statement -> IF expression THEN statement ELSE statement .

    END             reduce using rule 89 (statement -> IF expression THEN statement ELSE statement .)
    SEMICOLON       reduce using rule 89 (statement -> IF expression THEN statement ELSE statement .)
    UNTIL           reduce using rule 89 (statement -> IF expression THEN statement ELSE statement .)
    ELSE            reduce using rule 89 (statement -> IF expression THEN statement ELSE statement .)


state 310

    (65) variant -> case-label-list COLON LPAREN . field-list RPAREN
    (50) field-list -> . fixed-part
    (51) field-list -> . fixed-part SEMICOLON variant-part
    (52) field-list -> . variant-part
    (53) fixed-part -> . record-field
    (54) fixed-part -> . fixed-part SEMICOLON record-field
    (59) variant-part -> . CASE tag-field OF variant-list
    (55) record-field -> . empty
    (56) record-field -> . fieldid-list COLON type
    (159) empty -> .
    (57) fieldid-list -> . ID
    (58) fieldid-list -> . fieldid-list COMMA ID

    CASE            shift and go to state 71
    SEMICOLON       reduce using rule 159 (empty -> .)
    RPAREN          reduce using rule 159 (empty -> .)
    ID              shift and go to state 76

    record-field                   shift and go to state 70
    fixed-part                     shift and go to state 72
    fieldid-list                   shift and go to state 73
    field-list                     shift and go to state 315
    variant-part                   shift and go to state 75
    empty                          shift and go to state 77

state 311

    (63) variant-list -> variant-list SEMICOLON variant .

    SEMICOLON       reduce using rule 63 (variant-list -> variant-list SEMICOLON variant .)
    END             reduce using rule 63 (variant-list -> variant-list SEMICOLON variant .)
    RPAREN          reduce using rule 63 (variant-list -> variant-list SEMICOLON variant .)


state 312

    (80) formal-parameter-section -> FUNCTION ID parameters COLON typeid .

    RPAREN          reduce using rule 80 (formal-parameter-section -> FUNCTION ID parameters COLON typeid .)
    SEMICOLON       reduce using rule 80 (formal-parameter-section -> FUNCTION ID parameters COLON typeid .)


state 313

    (152) element -> expression DOT DOT DOT expression .
    (114) expression -> expression . relational-op additive-expression
    (116) relational-op -> . LESS
    (117) relational-op -> . LESSEQUAL
    (118) relational-op -> . EQUAL
    (119) relational-op -> . DEQUAL
    (120) relational-op -> . GREATEREQUAL
    (121) relational-op -> . GREATER

    RBRACKET        reduce using rule 152 (element -> expression DOT DOT DOT expression .)
    COMMA           reduce using rule 152 (element -> expression DOT DOT DOT expression .)
    LESS            shift and go to state 197
    LESSEQUAL       shift and go to state 200
    EQUAL           shift and go to state 199
    DEQUAL          shift and go to state 198
    GREATEREQUAL    shift and go to state 194
    GREATER         shift and go to state 196

    relational-op                  shift and go to state 195

state 314

    (106) case-list -> case-list SEMICOLON case-label-list COLON . statement
    (85) statement -> . empty
    (86) statement -> . variable EQUAL expression
    (87) statement -> . BEGIN statement-list END
    (88) statement -> . IF expression THEN statement
    (89) statement -> . IF expression THEN statement ELSE statement
    (90) statement -> . CASE expression OF case-list END
    (91) statement -> . WHILE expression DO statement
    (92) statement -> . REPEAT statement-list UNTIL expression
    (93) statement -> . FOR varid EQUAL for-list DO statement
    (94) statement -> . procid
    (95) statement -> . procid LPAREN expression-list RPAREN
    (96) statement -> . GOTO label
    (97) statement -> . WITH record-variable-list DO statement
    (98) statement -> . label COLON statement
    (159) empty -> .
    (99) variable -> . ID
    (100) variable -> . variable LBRACKET subscript-list RBRACKET
    (101) variable -> . variable COMMA fieldid
    (102) variable -> . variable
    (156) procid -> . ID
    (111) label -> . INTEGER

    BEGIN           shift and go to state 56
    IF              shift and go to state 66
    CASE            shift and go to state 55
    WHILE           shift and go to state 53
    REPEAT          shift and go to state 60
    FOR             shift and go to state 62
    GOTO            shift and go to state 61
    WITH            shift and go to state 54
    END             reduce using rule 159 (empty -> .)
    SEMICOLON       reduce using rule 159 (empty -> .)
    ID              shift and go to state 65
    INTEGER         shift and go to state 63

    procid                         shift and go to state 67
    label                          shift and go to state 57
    statement                      shift and go to state 316
    variable                       shift and go to state 64
    empty                          shift and go to state 59

state 315

    (65) variant -> case-label-list COLON LPAREN field-list . RPAREN

    RPAREN          shift and go to state 317


state 316

    (106) case-list -> case-list SEMICOLON case-label-list COLON statement .

    END             reduce using rule 106 (case-list -> case-list SEMICOLON case-label-list COLON statement .)
    SEMICOLON       reduce using rule 106 (case-list -> case-list SEMICOLON case-label-list COLON statement .)


state 317

    (65) variant -> case-label-list COLON LPAREN field-list RPAREN .

    SEMICOLON       reduce using rule 65 (variant -> case-label-list COLON LPAREN field-list RPAREN .)
    END             reduce using rule 65 (variant -> case-label-list COLON LPAREN field-list RPAREN .)
    RPAREN          reduce using rule 65 (variant -> case-label-list COLON LPAREN field-list RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for EQUAL in state 64 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 64 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 64 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 117 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 117 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 117 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 126 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 126 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 126 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 252 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 252 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 252 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 261 resolved as shift
WARNING: reduce/reduce conflict in state 10 resolved using rule (constant -> REAL)
WARNING: rejected rule (type -> REAL) in state 10
WARNING: reduce/reduce conflict in state 27 resolved using rule (constant -> INTEGER)
WARNING: rejected rule (type -> INTEGER) in state 27
WARNING: reduce/reduce conflict in state 31 resolved using rule (constant -> constid)
WARNING: rejected rule (type -> constid) in state 31
WARNING: reduce/reduce conflict in state 33 resolved using rule (constant -> STRING)
WARNING: rejected rule (type -> STRING) in state 33
WARNING: reduce/reduce conflict in state 34 resolved using rule (type -> typeid)
WARNING: rejected rule (simple-type -> typeid) in state 34
WARNING: reduce/reduce conflict in state 39 resolved using rule (constid -> ID)
WARNING: rejected rule (typeid -> ID) in state 39
WARNING: reduce/reduce conflict in state 81 resolved using rule (constant -> PLUS constid)
WARNING: rejected rule (type -> PLUS constid) in state 81
WARNING: reduce/reduce conflict in state 97 resolved using rule (constant -> INTEGER)
WARNING: rejected rule (type -> INTEGER) in state 97
WARNING: reduce/reduce conflict in state 117 resolved using rule (variable -> variable)
WARNING: rejected rule (primary-expression -> variable) in state 117
WARNING: reduce/reduce conflict in state 126 resolved using rule (variable -> variable)
WARNING: rejected rule (record-variable-list -> variable) in state 126
WARNING: reduce/reduce conflict in state 153 resolved using rule (constid -> ID)
WARNING: rejected rule (typeid -> ID) in state 153
WARNING: reduce/reduce conflict in state 252 resolved using rule (variable -> variable)
WARNING: rejected rule (record-variable-list -> record-variable-list COMMA variable) in state 252
WARNING: Rule (type -> REAL) is never reduced
WARNING: Rule (type -> INTEGER) is never reduced
WARNING: Rule (type -> constid) is never reduced
WARNING: Rule (type -> STRING) is never reduced
WARNING: Rule (type -> PLUS constid) is never reduced
WARNING: Rule (primary-expression -> variable) is never reduced
WARNING: Rule (record-variable-list -> variable) is never reduced
WARNING: Rule (record-variable-list -> record-variable-list COMMA variable) is never reduced
