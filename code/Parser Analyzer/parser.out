Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AMPERSANT
    BOOLEAN
    CHAR
    COMMENTBLOCK
    COMMENTLINE
    COMPARATION
    COS
    DISTINT
    EXP
    FALSE
    HASHTAG
    INPUT
    LABEL
    LBLOCK
    LN
    OUTPUT
    POT
    QUOT
    RBLOCK
    SIN
    SQR
    SQRT
    TRUE
    TYPE
    USES

Grammar

Rule 0     S' -> pascal-program
Rule 1     pascal-program -> PROGRAM ID program-heading SEMICOLON block DOT
Rule 2     pascal-program -> PROGRAM ID SEMICOLON block DOT
Rule 3     program-heading -> LPAREN identifier-list RPAREN
Rule 4     identifier-list -> ID
Rule 5     identifier-list -> identifier-list COMMA ID
Rule 6     block -> block1
Rule 7     block -> label-declaration SEMICOLON block1
Rule 8     block1 -> block2
Rule 9     block1 -> constant-declaration SEMICOLON block2
Rule 10    block2 -> block3
Rule 11    block2 -> type-declaration SEMICOLON block3
Rule 12    block3 -> block4
Rule 13    block3 -> variable-declaration SEMICOLON block4
Rule 14    block4 -> block5
Rule 15    block4 -> proc-and-func-declaration SEMICOLON block5
Rule 16    block5 -> BEGIN statement-list END
Rule 17    label-declaration -> label INTEGER
Rule 18    label-declaration -> label-declaration COMMA INTEGER
Rule 19    constant-declaration -> CONST ID EQUAL constant
Rule 20    constant-declaration -> constant-declaration SEMICOLON ID EQUAL constant
Rule 21    type-declaration -> type ID EQUAL type
Rule 22    type-declaration -> type-declaration SEMICOLON ID EQUAL type
Rule 23    variable-declaration -> VAR variableid-list COLON type
Rule 24    variable-declaration -> variable-declaration SEMICOLON variableid-list COLON type
Rule 25    variableid-list -> ID
Rule 26    variableid-list -> variableid-list COMMA ID
Rule 27    constant -> INTEGER
Rule 28    constant -> NUMBER
Rule 29    constant -> REAL
Rule 30    constant -> STRING
Rule 31    constant -> constid
Rule 32    constant -> PLUS constid
Rule 33    type -> simple-type
Rule 34    type -> structured-type
Rule 35    type -> typeid
Rule 36    simple-type -> LPAREN identifier-list RPAREN
Rule 37    simple-type -> constant
Rule 38    simple-type -> typeid
Rule 39    structured-type -> ARRAY LBRACKET index-list RBRACKET OF type
Rule 40    structured-type -> RECORD field-list END
Rule 41    structured-type -> SET OF simple-type
Rule 42    structured-type -> FILE OF type
Rule 43    structured-type -> PACKED structured-type
Rule 44    index-list -> simple-type
Rule 45    index-list -> index-list COMMA simple-type
Rule 46    field-list -> fixed-part
Rule 47    field-list -> fixed-part SEMICOLON variant-part
Rule 48    field-list -> variant-part
Rule 49    fixed-part -> record-field
Rule 50    fixed-part -> fixed-part SEMICOLON record-field
Rule 51    record-field -> empty
Rule 52    record-field -> fieldid-list COLON type
Rule 53    fieldid-list -> ID
Rule 54    fieldid-list -> fieldid-list COMMA ID
Rule 55    variant-part -> CASE tag-field OF variant-list
Rule 56    tag-field -> typeid
Rule 57    tag-field -> ID COLON typeid
Rule 58    variant-list -> variant
Rule 59    variant-list -> variant-list SEMICOLON variant
Rule 60    variant -> empty
Rule 61    variant -> case-label-list COLON LPAREN field-list RPAREN
Rule 62    case-label-list -> constant
Rule 63    case-label-list -> case-label-list COMMA constant
Rule 64    proc-and-func-declaration -> proc-or-func
Rule 65    proc-and-func-declaration -> proc-and-func-declaration SEMICOLON proc-or-func
Rule 66    proc-or-func -> PROCEDURE ID parameters SEMICOLON block-or-forward
Rule 67    proc-or-func -> FUNCTION ID parameters COLON typeid SEMICOLON block-or-forward
Rule 68    block-or-forward -> block
Rule 69    block-or-forward -> FORWARD
Rule 70    parameters -> LPAREN formal-parameter-list RPAREN
Rule 71    formal-parameter-list -> formal-parameter-section
Rule 72    formal-parameter-list -> formal-parameter-list SEMICOLON formal-parameter-section
Rule 73    formal-parameter-section -> parameterid-list COLON typeid
Rule 74    formal-parameter-section -> VAR parameterid-list COLON typeid
Rule 75    formal-parameter-section -> PROCEDURE ID parameters
Rule 76    formal-parameter-section -> FUNCTION ID parameters COLON typeid
Rule 77    parameterid-list -> ID
Rule 78    parameterid-list -> parameterid-list COMMA ID
Rule 79    statement-list -> statement
Rule 80    statement-list -> statement-list SEMICOLON statement
Rule 81    statement -> empty
Rule 82    statement -> variable EQUAL expression
Rule 83    statement -> BEGIN statement-list END statement
Rule 84    statement -> IF expression THEN statement
Rule 85    statement -> IF expression THEN statement ELSE statement
Rule 86    statement -> CASE expression OF case-list END
Rule 87    statement -> WHILE expression DO statement
Rule 88    statement -> REPEAT statement-list UNTIL expression
Rule 89    statement -> FOR varid EQUAL for-list DO statement
Rule 90    statement -> procid
Rule 91    statement -> procid LPAREN expression-list RPAREN
Rule 92    statement -> GOTO label
Rule 93    statement -> WITH record-variable-list DO statement
Rule 94    statement -> label COLON statement
Rule 95    statement -> WRITE LPAREN STRING RPAREN
Rule 96    statement -> READ LPAREN ID RPAREN
Rule 97    variable -> ID
Rule 98    variable -> variable LBRACKET subscript-list RBRACKET
Rule 99    variable -> variable COMMA fieldid
Rule 100   variable -> variable
Rule 101   subscript-list -> expression
Rule 102   subscript-list -> subscript-list COMMA expression
Rule 103   case-list -> case-label-list COLON statement
Rule 104   case-list -> case-list SEMICOLON case-label-list COLON statement
Rule 105   for-list -> expression TO expression
Rule 106   for-list -> expression DOWNTO expression
Rule 107   expression-list -> expression
Rule 108   expression-list -> expression-list COMMA expression
Rule 109   label -> INTEGER
Rule 110   record-variable-list -> variable
Rule 111   record-variable-list -> record-variable-list COMMA variable
Rule 112   expression -> expression relational-op additive-expression
Rule 113   expression -> additive-expression
Rule 114   relational-op -> LESS
Rule 115   relational-op -> LESSEQUAL
Rule 116   relational-op -> EQUAL
Rule 117   relational-op -> DEQUAL
Rule 118   relational-op -> GREATEREQUAL
Rule 119   relational-op -> GREATER
Rule 120   additive-expression -> additive-expression additive-op multiplicative-expression
Rule 121   additive-expression -> multiplicative-expression
Rule 122   additive-op -> PLUS
Rule 123   additive-op -> MINUS
Rule 124   additive-op -> OR
Rule 125   multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression
Rule 126   multiplicative-expression -> unary-expression
Rule 127   multiplicative-op -> TIMES
Rule 128   multiplicative-op -> DIVIDE
Rule 129   multiplicative-op -> DIV
Rule 130   multiplicative-op -> MOD
Rule 131   multiplicative-op -> AND
Rule 132   unary-expression -> unary-op unary-expression
Rule 133   unary-expression -> primary-expression
Rule 134   unary-op -> PLUS
Rule 135   unary-op -> MINUS
Rule 136   unary-op -> NOT
Rule 137   primary-expression -> ID
Rule 138   primary-expression -> NUMBER
Rule 139   primary-expression -> INTEGER
Rule 140   primary-expression -> REAL
Rule 141   primary-expression -> STRING
Rule 142   primary-expression -> NIL
Rule 143   primary-expression -> funcid LPAREN expression-list RPAREN
Rule 144   primary-expression -> LBRACKET element-list RBRACKET
Rule 145   primary-expression -> LPAREN expression RPAREN
Rule 146   element-list -> empty
Rule 147   element-list -> element
Rule 148   element-list -> element-list COMMA element
Rule 149   element -> expression
Rule 150   element -> expression DOT DOT DOT expression
Rule 151   constid -> ID
Rule 152   typeid -> ID
Rule 153   funcid -> ID
Rule 154   procid -> ID
Rule 155   fieldid -> ID
Rule 156   varid -> ID
Rule 157   empty -> <empty>

Terminals, with rules where they appear

AMPERSANT            : 
AND                  : 131
ARRAY                : 39
BEGIN                : 16 83
BOOLEAN              : 
CASE                 : 55 86
CHAR                 : 
COLON                : 23 24 52 57 61 67 73 74 76 94 103 104
COMMA                : 5 18 26 45 54 63 78 99 102 108 111 148
COMMENTBLOCK         : 
COMMENTLINE          : 
COMPARATION          : 
CONST                : 19
COS                  : 
DEQUAL               : 117
DISTINT              : 
DIV                  : 129
DIVIDE               : 128
DO                   : 87 89 93
DOT                  : 1 2 150 150 150
DOWNTO               : 106
ELSE                 : 85
END                  : 16 40 83 86
EQUAL                : 19 20 21 22 82 89 116
EXP                  : 
FALSE                : 
FILE                 : 42
FOR                  : 89
FORWARD              : 69
FUNCTION             : 67 76
GOTO                 : 92
GREATER              : 119
GREATEREQUAL         : 118
HASHTAG              : 
ID                   : 1 2 4 5 19 20 21 22 25 26 53 54 57 66 67 75 76 77 78 96 97 137 151 152 153 154 155 156
IF                   : 84 85
INPUT                : 
INTEGER              : 17 18 27 109 139
LABEL                : 
LBLOCK               : 
LBRACKET             : 39 98 144
LESS                 : 114
LESSEQUAL            : 115
LN                   : 
LPAREN               : 3 36 61 70 91 95 96 143 145
MINUS                : 123 135
MOD                  : 130
NIL                  : 142
NOT                  : 136
NUMBER               : 28 138
OF                   : 39 41 42 55 86
OR                   : 124
OUTPUT               : 
PACKED               : 43
PLUS                 : 32 122 134
POT                  : 
PROCEDURE            : 66 75
PROGRAM              : 1 2
QUOT                 : 
RBLOCK               : 
RBRACKET             : 39 98 144
READ                 : 96
REAL                 : 29 140
RECORD               : 40
REPEAT               : 88
RPAREN               : 3 36 61 70 91 95 96 143 145
SEMICOLON            : 1 2 7 9 11 13 15 20 22 24 47 50 59 65 66 67 72 80 104
SET                  : 41
SIN                  : 
SQR                  : 
SQRT                 : 
STRING               : 30 95 141
THEN                 : 84 85
TIMES                : 127
TO                   : 105
TRUE                 : 
TYPE                 : 
UNTIL                : 88
USES                 : 
VAR                  : 23 74
WHILE                : 87
WITH                 : 93
WRITE                : 95
error                : 

Nonterminals, with rules where they appear

additive-expression  : 112 113 120
additive-op          : 120
block                : 1 2 68
block-or-forward     : 66 67
block1               : 6 7
block2               : 8 9
block3               : 10 11
block4               : 12 13
block5               : 14 15
case-label-list      : 61 63 103 104
case-list            : 86 104
constant             : 19 20 37 62 63
constant-declaration : 9 20
constid              : 31 32
element              : 147 148
element-list         : 144 148
empty                : 51 60 81 146
expression           : 82 84 85 86 87 88 101 102 105 105 106 106 107 108 112 145 149 150 150
expression-list      : 91 108 143
field-list           : 40 61
fieldid              : 99
fieldid-list         : 52 54
fixed-part           : 46 47 50
for-list             : 89
formal-parameter-list : 70 72
formal-parameter-section : 71 72
funcid               : 143
identifier-list      : 3 5 36
index-list           : 39 45
label                : 17 92 94
label-declaration    : 7 18
multiplicative-expression : 120 121 125
multiplicative-op    : 125
parameterid-list     : 73 74 78
parameters           : 66 67 75 76
pascal-program       : 0
primary-expression   : 133
proc-and-func-declaration : 15 65
proc-or-func         : 64 65
procid               : 90 91
program-heading      : 1
record-field         : 49 50
record-variable-list : 93 111
relational-op        : 112
simple-type          : 33 41 44 45
statement            : 79 80 83 84 85 85 87 89 93 94 103 104
statement-list       : 16 80 83 88
structured-type      : 34 43
subscript-list       : 98 102
tag-field            : 55
type                 : 21 21 22 23 24 39 42 52
type-declaration     : 11 22
typeid               : 35 38 56 57 67 73 74 76
unary-expression     : 125 126 132
unary-op             : 132
variable             : 82 98 99 100 110 111
variable-declaration : 13 24
variableid-list      : 23 24 26
variant              : 58 59
variant-list         : 55 59
variant-part         : 47 48
varid                : 89

Parsing method: LALR

state 0

    (0) S' -> . pascal-program
    (1) pascal-program -> . PROGRAM ID program-heading SEMICOLON block DOT
    (2) pascal-program -> . PROGRAM ID SEMICOLON block DOT

    PROGRAM         shift and go to state 2

    pascal-program                 shift and go to state 1

state 1

    (0) S' -> pascal-program .



state 2

    (1) pascal-program -> PROGRAM . ID program-heading SEMICOLON block DOT
    (2) pascal-program -> PROGRAM . ID SEMICOLON block DOT

    ID              shift and go to state 3


state 3

    (1) pascal-program -> PROGRAM ID . program-heading SEMICOLON block DOT
    (2) pascal-program -> PROGRAM ID . SEMICOLON block DOT
    (3) program-heading -> . LPAREN identifier-list RPAREN

    SEMICOLON       shift and go to state 5
    LPAREN          shift and go to state 6

    program-heading                shift and go to state 4

state 4

    (1) pascal-program -> PROGRAM ID program-heading . SEMICOLON block DOT

    SEMICOLON       shift and go to state 7


state 5

    (2) pascal-program -> PROGRAM ID SEMICOLON . block DOT
    (6) block -> . block1
    (7) block -> . label-declaration SEMICOLON block1
    (8) block1 -> . block2
    (9) block1 -> . constant-declaration SEMICOLON block2
    (17) label-declaration -> . label INTEGER
    (18) label-declaration -> . label-declaration COMMA INTEGER
    (10) block2 -> . block3
    (11) block2 -> . type-declaration SEMICOLON block3
    (19) constant-declaration -> . CONST ID EQUAL constant
    (20) constant-declaration -> . constant-declaration SEMICOLON ID EQUAL constant
    (109) label -> . INTEGER
    (12) block3 -> . block4
    (13) block3 -> . variable-declaration SEMICOLON block4
    (21) type-declaration -> . type ID EQUAL type
    (22) type-declaration -> . type-declaration SEMICOLON ID EQUAL type
    (14) block4 -> . block5
    (15) block4 -> . proc-and-func-declaration SEMICOLON block5
    (23) variable-declaration -> . VAR variableid-list COLON type
    (24) variable-declaration -> . variable-declaration SEMICOLON variableid-list COLON type
    (33) type -> . simple-type
    (34) type -> . structured-type
    (35) type -> . typeid
    (16) block5 -> . BEGIN statement-list END
    (64) proc-and-func-declaration -> . proc-or-func
    (65) proc-and-func-declaration -> . proc-and-func-declaration SEMICOLON proc-or-func
    (36) simple-type -> . LPAREN identifier-list RPAREN
    (37) simple-type -> . constant
    (38) simple-type -> . typeid
    (39) structured-type -> . ARRAY LBRACKET index-list RBRACKET OF type
    (40) structured-type -> . RECORD field-list END
    (41) structured-type -> . SET OF simple-type
    (42) structured-type -> . FILE OF type
    (43) structured-type -> . PACKED structured-type
    (152) typeid -> . ID
    (66) proc-or-func -> . PROCEDURE ID parameters SEMICOLON block-or-forward
    (67) proc-or-func -> . FUNCTION ID parameters COLON typeid SEMICOLON block-or-forward
    (27) constant -> . INTEGER
    (28) constant -> . NUMBER
    (29) constant -> . REAL
    (30) constant -> . STRING
    (31) constant -> . constid
    (32) constant -> . PLUS constid
    (151) constid -> . ID

    CONST           shift and go to state 18
    INTEGER         shift and go to state 15
    VAR             shift and go to state 25
    BEGIN           shift and go to state 29
    LPAREN          shift and go to state 31
    ARRAY           shift and go to state 32
    RECORD          shift and go to state 33
    SET             shift and go to state 34
    FILE            shift and go to state 35
    PACKED          shift and go to state 36
    ID              shift and go to state 8
    PROCEDURE       shift and go to state 37
    FUNCTION        shift and go to state 38
    NUMBER          shift and go to state 39
    REAL            shift and go to state 40
    STRING          shift and go to state 41
    PLUS            shift and go to state 43

    block                          shift and go to state 9
    block1                         shift and go to state 10
    label-declaration              shift and go to state 11
    block2                         shift and go to state 12
    constant-declaration           shift and go to state 13
    label                          shift and go to state 14
    block3                         shift and go to state 16
    type-declaration               shift and go to state 17
    constant                       shift and go to state 19
    block4                         shift and go to state 20
    variable-declaration           shift and go to state 21
    type                           shift and go to state 22
    block5                         shift and go to state 23
    proc-and-func-declaration      shift and go to state 24
    simple-type                    shift and go to state 26
    structured-type                shift and go to state 27
    typeid                         shift and go to state 28
    proc-or-func                   shift and go to state 30
    constid                        shift and go to state 42

state 6

    (3) program-heading -> LPAREN . identifier-list RPAREN
    (4) identifier-list -> . ID
    (5) identifier-list -> . identifier-list COMMA ID

    ID              shift and go to state 45

    identifier-list                shift and go to state 44

state 7

    (1) pascal-program -> PROGRAM ID program-heading SEMICOLON . block DOT
    (6) block -> . block1
    (7) block -> . label-declaration SEMICOLON block1
    (8) block1 -> . block2
    (9) block1 -> . constant-declaration SEMICOLON block2
    (17) label-declaration -> . label INTEGER
    (18) label-declaration -> . label-declaration COMMA INTEGER
    (10) block2 -> . block3
    (11) block2 -> . type-declaration SEMICOLON block3
    (19) constant-declaration -> . CONST ID EQUAL constant
    (20) constant-declaration -> . constant-declaration SEMICOLON ID EQUAL constant
    (109) label -> . INTEGER
    (12) block3 -> . block4
    (13) block3 -> . variable-declaration SEMICOLON block4
    (21) type-declaration -> . type ID EQUAL type
    (22) type-declaration -> . type-declaration SEMICOLON ID EQUAL type
    (14) block4 -> . block5
    (15) block4 -> . proc-and-func-declaration SEMICOLON block5
    (23) variable-declaration -> . VAR variableid-list COLON type
    (24) variable-declaration -> . variable-declaration SEMICOLON variableid-list COLON type
    (33) type -> . simple-type
    (34) type -> . structured-type
    (35) type -> . typeid
    (16) block5 -> . BEGIN statement-list END
    (64) proc-and-func-declaration -> . proc-or-func
    (65) proc-and-func-declaration -> . proc-and-func-declaration SEMICOLON proc-or-func
    (36) simple-type -> . LPAREN identifier-list RPAREN
    (37) simple-type -> . constant
    (38) simple-type -> . typeid
    (39) structured-type -> . ARRAY LBRACKET index-list RBRACKET OF type
    (40) structured-type -> . RECORD field-list END
    (41) structured-type -> . SET OF simple-type
    (42) structured-type -> . FILE OF type
    (43) structured-type -> . PACKED structured-type
    (152) typeid -> . ID
    (66) proc-or-func -> . PROCEDURE ID parameters SEMICOLON block-or-forward
    (67) proc-or-func -> . FUNCTION ID parameters COLON typeid SEMICOLON block-or-forward
    (27) constant -> . INTEGER
    (28) constant -> . NUMBER
    (29) constant -> . REAL
    (30) constant -> . STRING
    (31) constant -> . constid
    (32) constant -> . PLUS constid
    (151) constid -> . ID

    CONST           shift and go to state 18
    INTEGER         shift and go to state 15
    VAR             shift and go to state 25
    BEGIN           shift and go to state 29
    LPAREN          shift and go to state 31
    ARRAY           shift and go to state 32
    RECORD          shift and go to state 33
    SET             shift and go to state 34
    FILE            shift and go to state 35
    PACKED          shift and go to state 36
    ID              shift and go to state 8
    PROCEDURE       shift and go to state 37
    FUNCTION        shift and go to state 38
    NUMBER          shift and go to state 39
    REAL            shift and go to state 40
    STRING          shift and go to state 41
    PLUS            shift and go to state 43

    block                          shift and go to state 46
    block1                         shift and go to state 10
    label-declaration              shift and go to state 11
    block2                         shift and go to state 12
    constant-declaration           shift and go to state 13
    label                          shift and go to state 14
    block3                         shift and go to state 16
    type-declaration               shift and go to state 17
    constant                       shift and go to state 19
    block4                         shift and go to state 20
    variable-declaration           shift and go to state 21
    type                           shift and go to state 22
    block5                         shift and go to state 23
    proc-and-func-declaration      shift and go to state 24
    simple-type                    shift and go to state 26
    structured-type                shift and go to state 27
    typeid                         shift and go to state 28
    proc-or-func                   shift and go to state 30
    constid                        shift and go to state 42

state 8

    (152) typeid -> ID .
    (151) constid -> ID .

  ! reduce/reduce conflict for ID resolved using rule 151 (constid -> ID .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 151 (constid -> ID .)
  ! reduce/reduce conflict for COMMA resolved using rule 151 (constid -> ID .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 151 (constid -> ID .)
  ! reduce/reduce conflict for END resolved using rule 151 (constid -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 151 (constid -> ID .)
    ID              reduce using rule 151 (constid -> ID .)
    RBRACKET        reduce using rule 151 (constid -> ID .)
    COMMA           reduce using rule 151 (constid -> ID .)
    SEMICOLON       reduce using rule 151 (constid -> ID .)
    END             reduce using rule 151 (constid -> ID .)
    RPAREN          reduce using rule 151 (constid -> ID .)

  ! ID              [ reduce using rule 152 (typeid -> ID .) ]
  ! RBRACKET        [ reduce using rule 152 (typeid -> ID .) ]
  ! COMMA           [ reduce using rule 152 (typeid -> ID .) ]
  ! SEMICOLON       [ reduce using rule 152 (typeid -> ID .) ]
  ! END             [ reduce using rule 152 (typeid -> ID .) ]
  ! RPAREN          [ reduce using rule 152 (typeid -> ID .) ]


state 9

    (2) pascal-program -> PROGRAM ID SEMICOLON block . DOT

    DOT             shift and go to state 47


state 10

    (6) block -> block1 .

    DOT             reduce using rule 6 (block -> block1 .)
    SEMICOLON       reduce using rule 6 (block -> block1 .)


state 11

    (7) block -> label-declaration . SEMICOLON block1
    (18) label-declaration -> label-declaration . COMMA INTEGER

    SEMICOLON       shift and go to state 48
    COMMA           shift and go to state 49


state 12

    (8) block1 -> block2 .

    DOT             reduce using rule 8 (block1 -> block2 .)
    SEMICOLON       reduce using rule 8 (block1 -> block2 .)


state 13

    (9) block1 -> constant-declaration . SEMICOLON block2
    (20) constant-declaration -> constant-declaration . SEMICOLON ID EQUAL constant

    SEMICOLON       shift and go to state 50


state 14

    (17) label-declaration -> label . INTEGER

    INTEGER         shift and go to state 51


state 15

    (109) label -> INTEGER .
    (27) constant -> INTEGER .

    INTEGER         reduce using rule 109 (label -> INTEGER .)
    ID              reduce using rule 27 (constant -> INTEGER .)


state 16

    (10) block2 -> block3 .

    DOT             reduce using rule 10 (block2 -> block3 .)
    SEMICOLON       reduce using rule 10 (block2 -> block3 .)


state 17

    (11) block2 -> type-declaration . SEMICOLON block3
    (22) type-declaration -> type-declaration . SEMICOLON ID EQUAL type

    SEMICOLON       shift and go to state 52


state 18

    (19) constant-declaration -> CONST . ID EQUAL constant

    ID              shift and go to state 53


state 19

    (37) simple-type -> constant .

    ID              reduce using rule 37 (simple-type -> constant .)
    RBRACKET        reduce using rule 37 (simple-type -> constant .)
    COMMA           reduce using rule 37 (simple-type -> constant .)
    SEMICOLON       reduce using rule 37 (simple-type -> constant .)
    END             reduce using rule 37 (simple-type -> constant .)
    RPAREN          reduce using rule 37 (simple-type -> constant .)


state 20

    (12) block3 -> block4 .

    DOT             reduce using rule 12 (block3 -> block4 .)
    SEMICOLON       reduce using rule 12 (block3 -> block4 .)


state 21

    (13) block3 -> variable-declaration . SEMICOLON block4
    (24) variable-declaration -> variable-declaration . SEMICOLON variableid-list COLON type

    SEMICOLON       shift and go to state 54


state 22

    (21) type-declaration -> type . ID EQUAL type

    ID              shift and go to state 55


state 23

    (14) block4 -> block5 .

    DOT             reduce using rule 14 (block4 -> block5 .)
    SEMICOLON       reduce using rule 14 (block4 -> block5 .)


state 24

    (15) block4 -> proc-and-func-declaration . SEMICOLON block5
    (65) proc-and-func-declaration -> proc-and-func-declaration . SEMICOLON proc-or-func

    SEMICOLON       shift and go to state 56


state 25

    (23) variable-declaration -> VAR . variableid-list COLON type
    (25) variableid-list -> . ID
    (26) variableid-list -> . variableid-list COMMA ID

    ID              shift and go to state 58

    variableid-list                shift and go to state 57

state 26

    (33) type -> simple-type .

    ID              reduce using rule 33 (type -> simple-type .)
    SEMICOLON       reduce using rule 33 (type -> simple-type .)
    END             reduce using rule 33 (type -> simple-type .)
    RPAREN          reduce using rule 33 (type -> simple-type .)


state 27

    (34) type -> structured-type .

    ID              reduce using rule 34 (type -> structured-type .)
    SEMICOLON       reduce using rule 34 (type -> structured-type .)
    END             reduce using rule 34 (type -> structured-type .)
    RPAREN          reduce using rule 34 (type -> structured-type .)


state 28

    (35) type -> typeid .
    (38) simple-type -> typeid .

  ! reduce/reduce conflict for ID resolved using rule 35 (type -> typeid .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 35 (type -> typeid .)
  ! reduce/reduce conflict for END resolved using rule 35 (type -> typeid .)
  ! reduce/reduce conflict for RPAREN resolved using rule 35 (type -> typeid .)
    ID              reduce using rule 35 (type -> typeid .)
    SEMICOLON       reduce using rule 35 (type -> typeid .)
    END             reduce using rule 35 (type -> typeid .)
    RPAREN          reduce using rule 35 (type -> typeid .)

  ! ID              [ reduce using rule 38 (simple-type -> typeid .) ]
  ! SEMICOLON       [ reduce using rule 38 (simple-type -> typeid .) ]
  ! END             [ reduce using rule 38 (simple-type -> typeid .) ]
  ! RPAREN          [ reduce using rule 38 (simple-type -> typeid .) ]


state 29

    (16) block5 -> BEGIN . statement-list END
    (79) statement-list -> . statement
    (80) statement-list -> . statement-list SEMICOLON statement
    (81) statement -> . empty
    (82) statement -> . variable EQUAL expression
    (83) statement -> . BEGIN statement-list END statement
    (84) statement -> . IF expression THEN statement
    (85) statement -> . IF expression THEN statement ELSE statement
    (86) statement -> . CASE expression OF case-list END
    (87) statement -> . WHILE expression DO statement
    (88) statement -> . REPEAT statement-list UNTIL expression
    (89) statement -> . FOR varid EQUAL for-list DO statement
    (90) statement -> . procid
    (91) statement -> . procid LPAREN expression-list RPAREN
    (92) statement -> . GOTO label
    (93) statement -> . WITH record-variable-list DO statement
    (94) statement -> . label COLON statement
    (95) statement -> . WRITE LPAREN STRING RPAREN
    (96) statement -> . READ LPAREN ID RPAREN
    (157) empty -> .
    (97) variable -> . ID
    (98) variable -> . variable LBRACKET subscript-list RBRACKET
    (99) variable -> . variable COMMA fieldid
    (100) variable -> . variable
    (154) procid -> . ID
    (109) label -> . INTEGER

    BEGIN           shift and go to state 59
    IF              shift and go to state 64
    CASE            shift and go to state 65
    WHILE           shift and go to state 66
    REPEAT          shift and go to state 67
    FOR             shift and go to state 68
    GOTO            shift and go to state 70
    WITH            shift and go to state 72
    WRITE           shift and go to state 73
    READ            shift and go to state 74
    END             reduce using rule 157 (empty -> .)
    SEMICOLON       reduce using rule 157 (empty -> .)
    ID              shift and go to state 75
    INTEGER         shift and go to state 76

    statement-list                 shift and go to state 60
    statement                      shift and go to state 61
    empty                          shift and go to state 62
    variable                       shift and go to state 63
    procid                         shift and go to state 69
    label                          shift and go to state 71

state 30

    (64) proc-and-func-declaration -> proc-or-func .

    SEMICOLON       reduce using rule 64 (proc-and-func-declaration -> proc-or-func .)


state 31

    (36) simple-type -> LPAREN . identifier-list RPAREN
    (4) identifier-list -> . ID
    (5) identifier-list -> . identifier-list COMMA ID

    ID              shift and go to state 45

    identifier-list                shift and go to state 77

state 32

    (39) structured-type -> ARRAY . LBRACKET index-list RBRACKET OF type

    LBRACKET        shift and go to state 78


state 33

    (40) structured-type -> RECORD . field-list END
    (46) field-list -> . fixed-part
    (47) field-list -> . fixed-part SEMICOLON variant-part
    (48) field-list -> . variant-part
    (49) fixed-part -> . record-field
    (50) fixed-part -> . fixed-part SEMICOLON record-field
    (55) variant-part -> . CASE tag-field OF variant-list
    (51) record-field -> . empty
    (52) record-field -> . fieldid-list COLON type
    (157) empty -> .
    (53) fieldid-list -> . ID
    (54) fieldid-list -> . fieldid-list COMMA ID

    CASE            shift and go to state 83
    SEMICOLON       reduce using rule 157 (empty -> .)
    END             reduce using rule 157 (empty -> .)
    ID              shift and go to state 86

    field-list                     shift and go to state 79
    fixed-part                     shift and go to state 80
    variant-part                   shift and go to state 81
    record-field                   shift and go to state 82
    empty                          shift and go to state 84
    fieldid-list                   shift and go to state 85

state 34

    (41) structured-type -> SET . OF simple-type

    OF              shift and go to state 87


state 35

    (42) structured-type -> FILE . OF type

    OF              shift and go to state 88


state 36

    (43) structured-type -> PACKED . structured-type
    (39) structured-type -> . ARRAY LBRACKET index-list RBRACKET OF type
    (40) structured-type -> . RECORD field-list END
    (41) structured-type -> . SET OF simple-type
    (42) structured-type -> . FILE OF type
    (43) structured-type -> . PACKED structured-type

    ARRAY           shift and go to state 32
    RECORD          shift and go to state 33
    SET             shift and go to state 34
    FILE            shift and go to state 35
    PACKED          shift and go to state 36

    structured-type                shift and go to state 89

state 37

    (66) proc-or-func -> PROCEDURE . ID parameters SEMICOLON block-or-forward

    ID              shift and go to state 90


state 38

    (67) proc-or-func -> FUNCTION . ID parameters COLON typeid SEMICOLON block-or-forward

    ID              shift and go to state 91


state 39

    (28) constant -> NUMBER .

    ID              reduce using rule 28 (constant -> NUMBER .)
    RBRACKET        reduce using rule 28 (constant -> NUMBER .)
    COMMA           reduce using rule 28 (constant -> NUMBER .)
    SEMICOLON       reduce using rule 28 (constant -> NUMBER .)
    END             reduce using rule 28 (constant -> NUMBER .)
    RPAREN          reduce using rule 28 (constant -> NUMBER .)
    COLON           reduce using rule 28 (constant -> NUMBER .)


state 40

    (29) constant -> REAL .

    ID              reduce using rule 29 (constant -> REAL .)
    RBRACKET        reduce using rule 29 (constant -> REAL .)
    COMMA           reduce using rule 29 (constant -> REAL .)
    SEMICOLON       reduce using rule 29 (constant -> REAL .)
    END             reduce using rule 29 (constant -> REAL .)
    RPAREN          reduce using rule 29 (constant -> REAL .)
    COLON           reduce using rule 29 (constant -> REAL .)


state 41

    (30) constant -> STRING .

    ID              reduce using rule 30 (constant -> STRING .)
    RBRACKET        reduce using rule 30 (constant -> STRING .)
    COMMA           reduce using rule 30 (constant -> STRING .)
    SEMICOLON       reduce using rule 30 (constant -> STRING .)
    END             reduce using rule 30 (constant -> STRING .)
    RPAREN          reduce using rule 30 (constant -> STRING .)
    COLON           reduce using rule 30 (constant -> STRING .)


state 42

    (31) constant -> constid .

    ID              reduce using rule 31 (constant -> constid .)
    RBRACKET        reduce using rule 31 (constant -> constid .)
    COMMA           reduce using rule 31 (constant -> constid .)
    SEMICOLON       reduce using rule 31 (constant -> constid .)
    END             reduce using rule 31 (constant -> constid .)
    RPAREN          reduce using rule 31 (constant -> constid .)
    COLON           reduce using rule 31 (constant -> constid .)


state 43

    (32) constant -> PLUS . constid
    (151) constid -> . ID

    ID              shift and go to state 93

    constid                        shift and go to state 92

state 44

    (3) program-heading -> LPAREN identifier-list . RPAREN
    (5) identifier-list -> identifier-list . COMMA ID

    RPAREN          shift and go to state 94
    COMMA           shift and go to state 95


state 45

    (4) identifier-list -> ID .

    RPAREN          reduce using rule 4 (identifier-list -> ID .)
    COMMA           reduce using rule 4 (identifier-list -> ID .)


state 46

    (1) pascal-program -> PROGRAM ID program-heading SEMICOLON block . DOT

    DOT             shift and go to state 96


state 47

    (2) pascal-program -> PROGRAM ID SEMICOLON block DOT .

    $end            reduce using rule 2 (pascal-program -> PROGRAM ID SEMICOLON block DOT .)


state 48

    (7) block -> label-declaration SEMICOLON . block1
    (8) block1 -> . block2
    (9) block1 -> . constant-declaration SEMICOLON block2
    (10) block2 -> . block3
    (11) block2 -> . type-declaration SEMICOLON block3
    (19) constant-declaration -> . CONST ID EQUAL constant
    (20) constant-declaration -> . constant-declaration SEMICOLON ID EQUAL constant
    (12) block3 -> . block4
    (13) block3 -> . variable-declaration SEMICOLON block4
    (21) type-declaration -> . type ID EQUAL type
    (22) type-declaration -> . type-declaration SEMICOLON ID EQUAL type
    (14) block4 -> . block5
    (15) block4 -> . proc-and-func-declaration SEMICOLON block5
    (23) variable-declaration -> . VAR variableid-list COLON type
    (24) variable-declaration -> . variable-declaration SEMICOLON variableid-list COLON type
    (33) type -> . simple-type
    (34) type -> . structured-type
    (35) type -> . typeid
    (16) block5 -> . BEGIN statement-list END
    (64) proc-and-func-declaration -> . proc-or-func
    (65) proc-and-func-declaration -> . proc-and-func-declaration SEMICOLON proc-or-func
    (36) simple-type -> . LPAREN identifier-list RPAREN
    (37) simple-type -> . constant
    (38) simple-type -> . typeid
    (39) structured-type -> . ARRAY LBRACKET index-list RBRACKET OF type
    (40) structured-type -> . RECORD field-list END
    (41) structured-type -> . SET OF simple-type
    (42) structured-type -> . FILE OF type
    (43) structured-type -> . PACKED structured-type
    (152) typeid -> . ID
    (66) proc-or-func -> . PROCEDURE ID parameters SEMICOLON block-or-forward
    (67) proc-or-func -> . FUNCTION ID parameters COLON typeid SEMICOLON block-or-forward
    (27) constant -> . INTEGER
    (28) constant -> . NUMBER
    (29) constant -> . REAL
    (30) constant -> . STRING
    (31) constant -> . constid
    (32) constant -> . PLUS constid
    (151) constid -> . ID

    CONST           shift and go to state 18
    VAR             shift and go to state 25
    BEGIN           shift and go to state 29
    LPAREN          shift and go to state 31
    ARRAY           shift and go to state 32
    RECORD          shift and go to state 33
    SET             shift and go to state 34
    FILE            shift and go to state 35
    PACKED          shift and go to state 36
    ID              shift and go to state 8
    PROCEDURE       shift and go to state 37
    FUNCTION        shift and go to state 38
    INTEGER         shift and go to state 98
    NUMBER          shift and go to state 39
    REAL            shift and go to state 40
    STRING          shift and go to state 41
    PLUS            shift and go to state 43

    block1                         shift and go to state 97
    block2                         shift and go to state 12
    constant-declaration           shift and go to state 13
    block3                         shift and go to state 16
    type-declaration               shift and go to state 17
    constant                       shift and go to state 19
    block4                         shift and go to state 20
    variable-declaration           shift and go to state 21
    type                           shift and go to state 22
    block5                         shift and go to state 23
    proc-and-func-declaration      shift and go to state 24
    simple-type                    shift and go to state 26
    structured-type                shift and go to state 27
    typeid                         shift and go to state 28
    proc-or-func                   shift and go to state 30
    constid                        shift and go to state 42

state 49

    (18) label-declaration -> label-declaration COMMA . INTEGER

    INTEGER         shift and go to state 99


state 50

    (9) block1 -> constant-declaration SEMICOLON . block2
    (20) constant-declaration -> constant-declaration SEMICOLON . ID EQUAL constant
    (10) block2 -> . block3
    (11) block2 -> . type-declaration SEMICOLON block3
    (12) block3 -> . block4
    (13) block3 -> . variable-declaration SEMICOLON block4
    (21) type-declaration -> . type ID EQUAL type
    (22) type-declaration -> . type-declaration SEMICOLON ID EQUAL type
    (14) block4 -> . block5
    (15) block4 -> . proc-and-func-declaration SEMICOLON block5
    (23) variable-declaration -> . VAR variableid-list COLON type
    (24) variable-declaration -> . variable-declaration SEMICOLON variableid-list COLON type
    (33) type -> . simple-type
    (34) type -> . structured-type
    (35) type -> . typeid
    (16) block5 -> . BEGIN statement-list END
    (64) proc-and-func-declaration -> . proc-or-func
    (65) proc-and-func-declaration -> . proc-and-func-declaration SEMICOLON proc-or-func
    (36) simple-type -> . LPAREN identifier-list RPAREN
    (37) simple-type -> . constant
    (38) simple-type -> . typeid
    (39) structured-type -> . ARRAY LBRACKET index-list RBRACKET OF type
    (40) structured-type -> . RECORD field-list END
    (41) structured-type -> . SET OF simple-type
    (42) structured-type -> . FILE OF type
    (43) structured-type -> . PACKED structured-type
    (152) typeid -> . ID
    (66) proc-or-func -> . PROCEDURE ID parameters SEMICOLON block-or-forward
    (67) proc-or-func -> . FUNCTION ID parameters COLON typeid SEMICOLON block-or-forward
    (27) constant -> . INTEGER
    (28) constant -> . NUMBER
    (29) constant -> . REAL
    (30) constant -> . STRING
    (31) constant -> . constid
    (32) constant -> . PLUS constid
    (151) constid -> . ID

    ID              shift and go to state 101
    VAR             shift and go to state 25
    BEGIN           shift and go to state 29
    LPAREN          shift and go to state 31
    ARRAY           shift and go to state 32
    RECORD          shift and go to state 33
    SET             shift and go to state 34
    FILE            shift and go to state 35
    PACKED          shift and go to state 36
    PROCEDURE       shift and go to state 37
    FUNCTION        shift and go to state 38
    INTEGER         shift and go to state 98
    NUMBER          shift and go to state 39
    REAL            shift and go to state 40
    STRING          shift and go to state 41
    PLUS            shift and go to state 43

    block2                         shift and go to state 100
    constant                       shift and go to state 19
    block3                         shift and go to state 16
    type-declaration               shift and go to state 17
    block4                         shift and go to state 20
    variable-declaration           shift and go to state 21
    type                           shift and go to state 22
    block5                         shift and go to state 23
    proc-and-func-declaration      shift and go to state 24
    simple-type                    shift and go to state 26
    structured-type                shift and go to state 27
    typeid                         shift and go to state 28
    proc-or-func                   shift and go to state 30
    constid                        shift and go to state 42

state 51

    (17) label-declaration -> label INTEGER .

    SEMICOLON       reduce using rule 17 (label-declaration -> label INTEGER .)
    COMMA           reduce using rule 17 (label-declaration -> label INTEGER .)


state 52

    (11) block2 -> type-declaration SEMICOLON . block3
    (22) type-declaration -> type-declaration SEMICOLON . ID EQUAL type
    (12) block3 -> . block4
    (13) block3 -> . variable-declaration SEMICOLON block4
    (14) block4 -> . block5
    (15) block4 -> . proc-and-func-declaration SEMICOLON block5
    (23) variable-declaration -> . VAR variableid-list COLON type
    (24) variable-declaration -> . variable-declaration SEMICOLON variableid-list COLON type
    (16) block5 -> . BEGIN statement-list END
    (64) proc-and-func-declaration -> . proc-or-func
    (65) proc-and-func-declaration -> . proc-and-func-declaration SEMICOLON proc-or-func
    (66) proc-or-func -> . PROCEDURE ID parameters SEMICOLON block-or-forward
    (67) proc-or-func -> . FUNCTION ID parameters COLON typeid SEMICOLON block-or-forward

    ID              shift and go to state 103
    VAR             shift and go to state 25
    BEGIN           shift and go to state 29
    PROCEDURE       shift and go to state 37
    FUNCTION        shift and go to state 38

    block3                         shift and go to state 102
    block4                         shift and go to state 20
    variable-declaration           shift and go to state 21
    block5                         shift and go to state 23
    proc-and-func-declaration      shift and go to state 24
    proc-or-func                   shift and go to state 30

state 53

    (19) constant-declaration -> CONST ID . EQUAL constant

    EQUAL           shift and go to state 104


state 54

    (13) block3 -> variable-declaration SEMICOLON . block4
    (24) variable-declaration -> variable-declaration SEMICOLON . variableid-list COLON type
    (14) block4 -> . block5
    (15) block4 -> . proc-and-func-declaration SEMICOLON block5
    (25) variableid-list -> . ID
    (26) variableid-list -> . variableid-list COMMA ID
    (16) block5 -> . BEGIN statement-list END
    (64) proc-and-func-declaration -> . proc-or-func
    (65) proc-and-func-declaration -> . proc-and-func-declaration SEMICOLON proc-or-func
    (66) proc-or-func -> . PROCEDURE ID parameters SEMICOLON block-or-forward
    (67) proc-or-func -> . FUNCTION ID parameters COLON typeid SEMICOLON block-or-forward

    ID              shift and go to state 58
    BEGIN           shift and go to state 29
    PROCEDURE       shift and go to state 37
    FUNCTION        shift and go to state 38

    block4                         shift and go to state 105
    variableid-list                shift and go to state 106
    block5                         shift and go to state 23
    proc-and-func-declaration      shift and go to state 24
    proc-or-func                   shift and go to state 30

state 55

    (21) type-declaration -> type ID . EQUAL type

    EQUAL           shift and go to state 107


state 56

    (15) block4 -> proc-and-func-declaration SEMICOLON . block5
    (65) proc-and-func-declaration -> proc-and-func-declaration SEMICOLON . proc-or-func
    (16) block5 -> . BEGIN statement-list END
    (66) proc-or-func -> . PROCEDURE ID parameters SEMICOLON block-or-forward
    (67) proc-or-func -> . FUNCTION ID parameters COLON typeid SEMICOLON block-or-forward

    BEGIN           shift and go to state 29
    PROCEDURE       shift and go to state 37
    FUNCTION        shift and go to state 38

    block5                         shift and go to state 108
    proc-or-func                   shift and go to state 109

state 57

    (23) variable-declaration -> VAR variableid-list . COLON type
    (26) variableid-list -> variableid-list . COMMA ID

    COLON           shift and go to state 110
    COMMA           shift and go to state 111


state 58

    (25) variableid-list -> ID .

    COLON           reduce using rule 25 (variableid-list -> ID .)
    COMMA           reduce using rule 25 (variableid-list -> ID .)


state 59

    (83) statement -> BEGIN . statement-list END statement
    (79) statement-list -> . statement
    (80) statement-list -> . statement-list SEMICOLON statement
    (81) statement -> . empty
    (82) statement -> . variable EQUAL expression
    (83) statement -> . BEGIN statement-list END statement
    (84) statement -> . IF expression THEN statement
    (85) statement -> . IF expression THEN statement ELSE statement
    (86) statement -> . CASE expression OF case-list END
    (87) statement -> . WHILE expression DO statement
    (88) statement -> . REPEAT statement-list UNTIL expression
    (89) statement -> . FOR varid EQUAL for-list DO statement
    (90) statement -> . procid
    (91) statement -> . procid LPAREN expression-list RPAREN
    (92) statement -> . GOTO label
    (93) statement -> . WITH record-variable-list DO statement
    (94) statement -> . label COLON statement
    (95) statement -> . WRITE LPAREN STRING RPAREN
    (96) statement -> . READ LPAREN ID RPAREN
    (157) empty -> .
    (97) variable -> . ID
    (98) variable -> . variable LBRACKET subscript-list RBRACKET
    (99) variable -> . variable COMMA fieldid
    (100) variable -> . variable
    (154) procid -> . ID
    (109) label -> . INTEGER

    BEGIN           shift and go to state 59
    IF              shift and go to state 64
    CASE            shift and go to state 65
    WHILE           shift and go to state 66
    REPEAT          shift and go to state 67
    FOR             shift and go to state 68
    GOTO            shift and go to state 70
    WITH            shift and go to state 72
    WRITE           shift and go to state 73
    READ            shift and go to state 74
    END             reduce using rule 157 (empty -> .)
    SEMICOLON       reduce using rule 157 (empty -> .)
    ID              shift and go to state 75
    INTEGER         shift and go to state 76

    statement-list                 shift and go to state 112
    statement                      shift and go to state 61
    empty                          shift and go to state 62
    variable                       shift and go to state 63
    procid                         shift and go to state 69
    label                          shift and go to state 71

state 60

    (16) block5 -> BEGIN statement-list . END
    (80) statement-list -> statement-list . SEMICOLON statement

    END             shift and go to state 113
    SEMICOLON       shift and go to state 114


state 61

    (79) statement-list -> statement .

    END             reduce using rule 79 (statement-list -> statement .)
    SEMICOLON       reduce using rule 79 (statement-list -> statement .)
    UNTIL           reduce using rule 79 (statement-list -> statement .)


state 62

    (81) statement -> empty .

    END             reduce using rule 81 (statement -> empty .)
    SEMICOLON       reduce using rule 81 (statement -> empty .)
    UNTIL           reduce using rule 81 (statement -> empty .)
    ELSE            reduce using rule 81 (statement -> empty .)


state 63

    (82) statement -> variable . EQUAL expression
    (98) variable -> variable . LBRACKET subscript-list RBRACKET
    (99) variable -> variable . COMMA fieldid
    (100) variable -> variable .

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    EQUAL           shift and go to state 115
    LBRACKET        shift and go to state 116
    COMMA           shift and go to state 117

  ! EQUAL           [ reduce using rule 100 (variable -> variable .) ]
  ! LBRACKET        [ reduce using rule 100 (variable -> variable .) ]
  ! COMMA           [ reduce using rule 100 (variable -> variable .) ]


state 64

    (84) statement -> IF . expression THEN statement
    (85) statement -> IF . expression THEN statement ELSE statement
    (112) expression -> . expression relational-op additive-expression
    (113) expression -> . additive-expression
    (120) additive-expression -> . additive-expression additive-op multiplicative-expression
    (121) additive-expression -> . multiplicative-expression
    (125) multiplicative-expression -> . multiplicative-expression multiplicative-op unary-expression
    (126) multiplicative-expression -> . unary-expression
    (132) unary-expression -> . unary-op unary-expression
    (133) unary-expression -> . primary-expression
    (134) unary-op -> . PLUS
    (135) unary-op -> . MINUS
    (136) unary-op -> . NOT
    (137) primary-expression -> . ID
    (138) primary-expression -> . NUMBER
    (139) primary-expression -> . INTEGER
    (140) primary-expression -> . REAL
    (141) primary-expression -> . STRING
    (142) primary-expression -> . NIL
    (143) primary-expression -> . funcid LPAREN expression-list RPAREN
    (144) primary-expression -> . LBRACKET element-list RBRACKET
    (145) primary-expression -> . LPAREN expression RPAREN
    (153) funcid -> . ID

    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    NOT             shift and go to state 126
    ID              shift and go to state 127
    NUMBER          shift and go to state 128
    INTEGER         shift and go to state 129
    REAL            shift and go to state 130
    STRING          shift and go to state 131
    NIL             shift and go to state 132
    LBRACKET        shift and go to state 135
    LPAREN          shift and go to state 134

    expression                     shift and go to state 118
    additive-expression            shift and go to state 119
    multiplicative-expression      shift and go to state 120
    unary-expression               shift and go to state 121
    unary-op                       shift and go to state 122
    primary-expression             shift and go to state 123
    funcid                         shift and go to state 133

state 65

    (86) statement -> CASE . expression OF case-list END
    (112) expression -> . expression relational-op additive-expression
    (113) expression -> . additive-expression
    (120) additive-expression -> . additive-expression additive-op multiplicative-expression
    (121) additive-expression -> . multiplicative-expression
    (125) multiplicative-expression -> . multiplicative-expression multiplicative-op unary-expression
    (126) multiplicative-expression -> . unary-expression
    (132) unary-expression -> . unary-op unary-expression
    (133) unary-expression -> . primary-expression
    (134) unary-op -> . PLUS
    (135) unary-op -> . MINUS
    (136) unary-op -> . NOT
    (137) primary-expression -> . ID
    (138) primary-expression -> . NUMBER
    (139) primary-expression -> . INTEGER
    (140) primary-expression -> . REAL
    (141) primary-expression -> . STRING
    (142) primary-expression -> . NIL
    (143) primary-expression -> . funcid LPAREN expression-list RPAREN
    (144) primary-expression -> . LBRACKET element-list RBRACKET
    (145) primary-expression -> . LPAREN expression RPAREN
    (153) funcid -> . ID

    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    NOT             shift and go to state 126
    ID              shift and go to state 127
    NUMBER          shift and go to state 128
    INTEGER         shift and go to state 129
    REAL            shift and go to state 130
    STRING          shift and go to state 131
    NIL             shift and go to state 132
    LBRACKET        shift and go to state 135
    LPAREN          shift and go to state 134

    expression                     shift and go to state 136
    additive-expression            shift and go to state 119
    multiplicative-expression      shift and go to state 120
    unary-expression               shift and go to state 121
    unary-op                       shift and go to state 122
    primary-expression             shift and go to state 123
    funcid                         shift and go to state 133

state 66

    (87) statement -> WHILE . expression DO statement
    (112) expression -> . expression relational-op additive-expression
    (113) expression -> . additive-expression
    (120) additive-expression -> . additive-expression additive-op multiplicative-expression
    (121) additive-expression -> . multiplicative-expression
    (125) multiplicative-expression -> . multiplicative-expression multiplicative-op unary-expression
    (126) multiplicative-expression -> . unary-expression
    (132) unary-expression -> . unary-op unary-expression
    (133) unary-expression -> . primary-expression
    (134) unary-op -> . PLUS
    (135) unary-op -> . MINUS
    (136) unary-op -> . NOT
    (137) primary-expression -> . ID
    (138) primary-expression -> . NUMBER
    (139) primary-expression -> . INTEGER
    (140) primary-expression -> . REAL
    (141) primary-expression -> . STRING
    (142) primary-expression -> . NIL
    (143) primary-expression -> . funcid LPAREN expression-list RPAREN
    (144) primary-expression -> . LBRACKET element-list RBRACKET
    (145) primary-expression -> . LPAREN expression RPAREN
    (153) funcid -> . ID

    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    NOT             shift and go to state 126
    ID              shift and go to state 127
    NUMBER          shift and go to state 128
    INTEGER         shift and go to state 129
    REAL            shift and go to state 130
    STRING          shift and go to state 131
    NIL             shift and go to state 132
    LBRACKET        shift and go to state 135
    LPAREN          shift and go to state 134

    expression                     shift and go to state 137
    additive-expression            shift and go to state 119
    multiplicative-expression      shift and go to state 120
    unary-expression               shift and go to state 121
    unary-op                       shift and go to state 122
    primary-expression             shift and go to state 123
    funcid                         shift and go to state 133

state 67

    (88) statement -> REPEAT . statement-list UNTIL expression
    (79) statement-list -> . statement
    (80) statement-list -> . statement-list SEMICOLON statement
    (81) statement -> . empty
    (82) statement -> . variable EQUAL expression
    (83) statement -> . BEGIN statement-list END statement
    (84) statement -> . IF expression THEN statement
    (85) statement -> . IF expression THEN statement ELSE statement
    (86) statement -> . CASE expression OF case-list END
    (87) statement -> . WHILE expression DO statement
    (88) statement -> . REPEAT statement-list UNTIL expression
    (89) statement -> . FOR varid EQUAL for-list DO statement
    (90) statement -> . procid
    (91) statement -> . procid LPAREN expression-list RPAREN
    (92) statement -> . GOTO label
    (93) statement -> . WITH record-variable-list DO statement
    (94) statement -> . label COLON statement
    (95) statement -> . WRITE LPAREN STRING RPAREN
    (96) statement -> . READ LPAREN ID RPAREN
    (157) empty -> .
    (97) variable -> . ID
    (98) variable -> . variable LBRACKET subscript-list RBRACKET
    (99) variable -> . variable COMMA fieldid
    (100) variable -> . variable
    (154) procid -> . ID
    (109) label -> . INTEGER

    BEGIN           shift and go to state 59
    IF              shift and go to state 64
    CASE            shift and go to state 65
    WHILE           shift and go to state 66
    REPEAT          shift and go to state 67
    FOR             shift and go to state 68
    GOTO            shift and go to state 70
    WITH            shift and go to state 72
    WRITE           shift and go to state 73
    READ            shift and go to state 74
    UNTIL           reduce using rule 157 (empty -> .)
    SEMICOLON       reduce using rule 157 (empty -> .)
    ID              shift and go to state 75
    INTEGER         shift and go to state 76

    statement-list                 shift and go to state 138
    statement                      shift and go to state 61
    empty                          shift and go to state 62
    variable                       shift and go to state 63
    procid                         shift and go to state 69
    label                          shift and go to state 71

state 68

    (89) statement -> FOR . varid EQUAL for-list DO statement
    (156) varid -> . ID

    ID              shift and go to state 140

    varid                          shift and go to state 139

state 69

    (90) statement -> procid .
    (91) statement -> procid . LPAREN expression-list RPAREN

    END             reduce using rule 90 (statement -> procid .)
    SEMICOLON       reduce using rule 90 (statement -> procid .)
    UNTIL           reduce using rule 90 (statement -> procid .)
    ELSE            reduce using rule 90 (statement -> procid .)
    LPAREN          shift and go to state 141


state 70

    (92) statement -> GOTO . label
    (109) label -> . INTEGER

    INTEGER         shift and go to state 76

    label                          shift and go to state 142

state 71

    (94) statement -> label . COLON statement

    COLON           shift and go to state 143


state 72

    (93) statement -> WITH . record-variable-list DO statement
    (110) record-variable-list -> . variable
    (111) record-variable-list -> . record-variable-list COMMA variable
    (97) variable -> . ID
    (98) variable -> . variable LBRACKET subscript-list RBRACKET
    (99) variable -> . variable COMMA fieldid
    (100) variable -> . variable

    ID              shift and go to state 146

    record-variable-list           shift and go to state 144
    variable                       shift and go to state 145

state 73

    (95) statement -> WRITE . LPAREN STRING RPAREN

    LPAREN          shift and go to state 147


state 74

    (96) statement -> READ . LPAREN ID RPAREN

    LPAREN          shift and go to state 148


state 75

    (97) variable -> ID .
    (154) procid -> ID .

    EQUAL           reduce using rule 97 (variable -> ID .)
    LBRACKET        reduce using rule 97 (variable -> ID .)
    COMMA           reduce using rule 97 (variable -> ID .)
    LPAREN          reduce using rule 154 (procid -> ID .)
    END             reduce using rule 154 (procid -> ID .)
    SEMICOLON       reduce using rule 154 (procid -> ID .)
    UNTIL           reduce using rule 154 (procid -> ID .)
    ELSE            reduce using rule 154 (procid -> ID .)


state 76

    (109) label -> INTEGER .

    COLON           reduce using rule 109 (label -> INTEGER .)
    END             reduce using rule 109 (label -> INTEGER .)
    SEMICOLON       reduce using rule 109 (label -> INTEGER .)
    UNTIL           reduce using rule 109 (label -> INTEGER .)
    ELSE            reduce using rule 109 (label -> INTEGER .)


state 77

    (36) simple-type -> LPAREN identifier-list . RPAREN
    (5) identifier-list -> identifier-list . COMMA ID

    RPAREN          shift and go to state 149
    COMMA           shift and go to state 95


state 78

    (39) structured-type -> ARRAY LBRACKET . index-list RBRACKET OF type
    (44) index-list -> . simple-type
    (45) index-list -> . index-list COMMA simple-type
    (36) simple-type -> . LPAREN identifier-list RPAREN
    (37) simple-type -> . constant
    (38) simple-type -> . typeid
    (27) constant -> . INTEGER
    (28) constant -> . NUMBER
    (29) constant -> . REAL
    (30) constant -> . STRING
    (31) constant -> . constid
    (32) constant -> . PLUS constid
    (152) typeid -> . ID
    (151) constid -> . ID

    LPAREN          shift and go to state 31
    INTEGER         shift and go to state 98
    NUMBER          shift and go to state 39
    REAL            shift and go to state 40
    STRING          shift and go to state 41
    PLUS            shift and go to state 43
    ID              shift and go to state 8

    index-list                     shift and go to state 150
    simple-type                    shift and go to state 151
    constant                       shift and go to state 19
    typeid                         shift and go to state 152
    constid                        shift and go to state 42

state 79

    (40) structured-type -> RECORD field-list . END

    END             shift and go to state 153


state 80

    (46) field-list -> fixed-part .
    (47) field-list -> fixed-part . SEMICOLON variant-part
    (50) fixed-part -> fixed-part . SEMICOLON record-field

    END             reduce using rule 46 (field-list -> fixed-part .)
    RPAREN          reduce using rule 46 (field-list -> fixed-part .)
    SEMICOLON       shift and go to state 154


state 81

    (48) field-list -> variant-part .

    END             reduce using rule 48 (field-list -> variant-part .)
    RPAREN          reduce using rule 48 (field-list -> variant-part .)


state 82

    (49) fixed-part -> record-field .

    SEMICOLON       reduce using rule 49 (fixed-part -> record-field .)
    END             reduce using rule 49 (fixed-part -> record-field .)
    RPAREN          reduce using rule 49 (fixed-part -> record-field .)


state 83

    (55) variant-part -> CASE . tag-field OF variant-list
    (56) tag-field -> . typeid
    (57) tag-field -> . ID COLON typeid
    (152) typeid -> . ID

    ID              shift and go to state 157

    tag-field                      shift and go to state 155
    typeid                         shift and go to state 156

state 84

    (51) record-field -> empty .

    SEMICOLON       reduce using rule 51 (record-field -> empty .)
    END             reduce using rule 51 (record-field -> empty .)
    RPAREN          reduce using rule 51 (record-field -> empty .)


state 85

    (52) record-field -> fieldid-list . COLON type
    (54) fieldid-list -> fieldid-list . COMMA ID

    COLON           shift and go to state 158
    COMMA           shift and go to state 159


state 86

    (53) fieldid-list -> ID .

    COLON           reduce using rule 53 (fieldid-list -> ID .)
    COMMA           reduce using rule 53 (fieldid-list -> ID .)


state 87

    (41) structured-type -> SET OF . simple-type
    (36) simple-type -> . LPAREN identifier-list RPAREN
    (37) simple-type -> . constant
    (38) simple-type -> . typeid
    (27) constant -> . INTEGER
    (28) constant -> . NUMBER
    (29) constant -> . REAL
    (30) constant -> . STRING
    (31) constant -> . constid
    (32) constant -> . PLUS constid
    (152) typeid -> . ID
    (151) constid -> . ID

    LPAREN          shift and go to state 31
    INTEGER         shift and go to state 98
    NUMBER          shift and go to state 39
    REAL            shift and go to state 40
    STRING          shift and go to state 41
    PLUS            shift and go to state 43
    ID              shift and go to state 8

    simple-type                    shift and go to state 160
    constant                       shift and go to state 19
    typeid                         shift and go to state 152
    constid                        shift and go to state 42

state 88

    (42) structured-type -> FILE OF . type
    (33) type -> . simple-type
    (34) type -> . structured-type
    (35) type -> . typeid
    (36) simple-type -> . LPAREN identifier-list RPAREN
    (37) simple-type -> . constant
    (38) simple-type -> . typeid
    (39) structured-type -> . ARRAY LBRACKET index-list RBRACKET OF type
    (40) structured-type -> . RECORD field-list END
    (41) structured-type -> . SET OF simple-type
    (42) structured-type -> . FILE OF type
    (43) structured-type -> . PACKED structured-type
    (152) typeid -> . ID
    (27) constant -> . INTEGER
    (28) constant -> . NUMBER
    (29) constant -> . REAL
    (30) constant -> . STRING
    (31) constant -> . constid
    (32) constant -> . PLUS constid
    (151) constid -> . ID

    LPAREN          shift and go to state 31
    ARRAY           shift and go to state 32
    RECORD          shift and go to state 33
    SET             shift and go to state 34
    FILE            shift and go to state 35
    PACKED          shift and go to state 36
    ID              shift and go to state 8
    INTEGER         shift and go to state 98
    NUMBER          shift and go to state 39
    REAL            shift and go to state 40
    STRING          shift and go to state 41
    PLUS            shift and go to state 43

    type                           shift and go to state 161
    simple-type                    shift and go to state 26
    structured-type                shift and go to state 27
    typeid                         shift and go to state 28
    constant                       shift and go to state 19
    constid                        shift and go to state 42

state 89

    (43) structured-type -> PACKED structured-type .

    ID              reduce using rule 43 (structured-type -> PACKED structured-type .)
    SEMICOLON       reduce using rule 43 (structured-type -> PACKED structured-type .)
    END             reduce using rule 43 (structured-type -> PACKED structured-type .)
    RPAREN          reduce using rule 43 (structured-type -> PACKED structured-type .)


state 90

    (66) proc-or-func -> PROCEDURE ID . parameters SEMICOLON block-or-forward
    (70) parameters -> . LPAREN formal-parameter-list RPAREN

    LPAREN          shift and go to state 163

    parameters                     shift and go to state 162

state 91

    (67) proc-or-func -> FUNCTION ID . parameters COLON typeid SEMICOLON block-or-forward
    (70) parameters -> . LPAREN formal-parameter-list RPAREN

    LPAREN          shift and go to state 163

    parameters                     shift and go to state 164

state 92

    (32) constant -> PLUS constid .

    ID              reduce using rule 32 (constant -> PLUS constid .)
    RBRACKET        reduce using rule 32 (constant -> PLUS constid .)
    COMMA           reduce using rule 32 (constant -> PLUS constid .)
    SEMICOLON       reduce using rule 32 (constant -> PLUS constid .)
    END             reduce using rule 32 (constant -> PLUS constid .)
    RPAREN          reduce using rule 32 (constant -> PLUS constid .)
    COLON           reduce using rule 32 (constant -> PLUS constid .)


state 93

    (151) constid -> ID .

    ID              reduce using rule 151 (constid -> ID .)
    RBRACKET        reduce using rule 151 (constid -> ID .)
    COMMA           reduce using rule 151 (constid -> ID .)
    SEMICOLON       reduce using rule 151 (constid -> ID .)
    END             reduce using rule 151 (constid -> ID .)
    RPAREN          reduce using rule 151 (constid -> ID .)
    COLON           reduce using rule 151 (constid -> ID .)


state 94

    (3) program-heading -> LPAREN identifier-list RPAREN .

    SEMICOLON       reduce using rule 3 (program-heading -> LPAREN identifier-list RPAREN .)


state 95

    (5) identifier-list -> identifier-list COMMA . ID

    ID              shift and go to state 165


state 96

    (1) pascal-program -> PROGRAM ID program-heading SEMICOLON block DOT .

    $end            reduce using rule 1 (pascal-program -> PROGRAM ID program-heading SEMICOLON block DOT .)


state 97

    (7) block -> label-declaration SEMICOLON block1 .

    DOT             reduce using rule 7 (block -> label-declaration SEMICOLON block1 .)
    SEMICOLON       reduce using rule 7 (block -> label-declaration SEMICOLON block1 .)


state 98

    (27) constant -> INTEGER .

    ID              reduce using rule 27 (constant -> INTEGER .)
    RBRACKET        reduce using rule 27 (constant -> INTEGER .)
    COMMA           reduce using rule 27 (constant -> INTEGER .)
    SEMICOLON       reduce using rule 27 (constant -> INTEGER .)
    END             reduce using rule 27 (constant -> INTEGER .)
    RPAREN          reduce using rule 27 (constant -> INTEGER .)
    COLON           reduce using rule 27 (constant -> INTEGER .)


state 99

    (18) label-declaration -> label-declaration COMMA INTEGER .

    SEMICOLON       reduce using rule 18 (label-declaration -> label-declaration COMMA INTEGER .)
    COMMA           reduce using rule 18 (label-declaration -> label-declaration COMMA INTEGER .)


state 100

    (9) block1 -> constant-declaration SEMICOLON block2 .

    DOT             reduce using rule 9 (block1 -> constant-declaration SEMICOLON block2 .)
    SEMICOLON       reduce using rule 9 (block1 -> constant-declaration SEMICOLON block2 .)


state 101

    (20) constant-declaration -> constant-declaration SEMICOLON ID . EQUAL constant
    (152) typeid -> ID .
    (151) constid -> ID .

  ! reduce/reduce conflict for ID resolved using rule 151 (constid -> ID .)
    EQUAL           shift and go to state 166
    ID              reduce using rule 151 (constid -> ID .)

  ! ID              [ reduce using rule 152 (typeid -> ID .) ]


state 102

    (11) block2 -> type-declaration SEMICOLON block3 .

    DOT             reduce using rule 11 (block2 -> type-declaration SEMICOLON block3 .)
    SEMICOLON       reduce using rule 11 (block2 -> type-declaration SEMICOLON block3 .)


state 103

    (22) type-declaration -> type-declaration SEMICOLON ID . EQUAL type

    EQUAL           shift and go to state 167


state 104

    (19) constant-declaration -> CONST ID EQUAL . constant
    (27) constant -> . INTEGER
    (28) constant -> . NUMBER
    (29) constant -> . REAL
    (30) constant -> . STRING
    (31) constant -> . constid
    (32) constant -> . PLUS constid
    (151) constid -> . ID

    INTEGER         shift and go to state 98
    NUMBER          shift and go to state 39
    REAL            shift and go to state 40
    STRING          shift and go to state 41
    PLUS            shift and go to state 43
    ID              shift and go to state 93

    constant                       shift and go to state 168
    constid                        shift and go to state 42

state 105

    (13) block3 -> variable-declaration SEMICOLON block4 .

    DOT             reduce using rule 13 (block3 -> variable-declaration SEMICOLON block4 .)
    SEMICOLON       reduce using rule 13 (block3 -> variable-declaration SEMICOLON block4 .)


state 106

    (24) variable-declaration -> variable-declaration SEMICOLON variableid-list . COLON type
    (26) variableid-list -> variableid-list . COMMA ID

    COLON           shift and go to state 169
    COMMA           shift and go to state 111


state 107

    (21) type-declaration -> type ID EQUAL . type
    (33) type -> . simple-type
    (34) type -> . structured-type
    (35) type -> . typeid
    (36) simple-type -> . LPAREN identifier-list RPAREN
    (37) simple-type -> . constant
    (38) simple-type -> . typeid
    (39) structured-type -> . ARRAY LBRACKET index-list RBRACKET OF type
    (40) structured-type -> . RECORD field-list END
    (41) structured-type -> . SET OF simple-type
    (42) structured-type -> . FILE OF type
    (43) structured-type -> . PACKED structured-type
    (152) typeid -> . ID
    (27) constant -> . INTEGER
    (28) constant -> . NUMBER
    (29) constant -> . REAL
    (30) constant -> . STRING
    (31) constant -> . constid
    (32) constant -> . PLUS constid
    (151) constid -> . ID

    LPAREN          shift and go to state 31
    ARRAY           shift and go to state 32
    RECORD          shift and go to state 33
    SET             shift and go to state 34
    FILE            shift and go to state 35
    PACKED          shift and go to state 36
    ID              shift and go to state 8
    INTEGER         shift and go to state 98
    NUMBER          shift and go to state 39
    REAL            shift and go to state 40
    STRING          shift and go to state 41
    PLUS            shift and go to state 43

    type                           shift and go to state 170
    simple-type                    shift and go to state 26
    structured-type                shift and go to state 27
    typeid                         shift and go to state 28
    constant                       shift and go to state 19
    constid                        shift and go to state 42

state 108

    (15) block4 -> proc-and-func-declaration SEMICOLON block5 .

    DOT             reduce using rule 15 (block4 -> proc-and-func-declaration SEMICOLON block5 .)
    SEMICOLON       reduce using rule 15 (block4 -> proc-and-func-declaration SEMICOLON block5 .)


state 109

    (65) proc-and-func-declaration -> proc-and-func-declaration SEMICOLON proc-or-func .

    SEMICOLON       reduce using rule 65 (proc-and-func-declaration -> proc-and-func-declaration SEMICOLON proc-or-func .)


state 110

    (23) variable-declaration -> VAR variableid-list COLON . type
    (33) type -> . simple-type
    (34) type -> . structured-type
    (35) type -> . typeid
    (36) simple-type -> . LPAREN identifier-list RPAREN
    (37) simple-type -> . constant
    (38) simple-type -> . typeid
    (39) structured-type -> . ARRAY LBRACKET index-list RBRACKET OF type
    (40) structured-type -> . RECORD field-list END
    (41) structured-type -> . SET OF simple-type
    (42) structured-type -> . FILE OF type
    (43) structured-type -> . PACKED structured-type
    (152) typeid -> . ID
    (27) constant -> . INTEGER
    (28) constant -> . NUMBER
    (29) constant -> . REAL
    (30) constant -> . STRING
    (31) constant -> . constid
    (32) constant -> . PLUS constid
    (151) constid -> . ID

    LPAREN          shift and go to state 31
    ARRAY           shift and go to state 32
    RECORD          shift and go to state 33
    SET             shift and go to state 34
    FILE            shift and go to state 35
    PACKED          shift and go to state 36
    ID              shift and go to state 8
    INTEGER         shift and go to state 98
    NUMBER          shift and go to state 39
    REAL            shift and go to state 40
    STRING          shift and go to state 41
    PLUS            shift and go to state 43

    type                           shift and go to state 171
    simple-type                    shift and go to state 26
    structured-type                shift and go to state 27
    typeid                         shift and go to state 28
    constant                       shift and go to state 19
    constid                        shift and go to state 42

state 111

    (26) variableid-list -> variableid-list COMMA . ID

    ID              shift and go to state 172


state 112

    (83) statement -> BEGIN statement-list . END statement
    (80) statement-list -> statement-list . SEMICOLON statement

    END             shift and go to state 173
    SEMICOLON       shift and go to state 114


state 113

    (16) block5 -> BEGIN statement-list END .

    DOT             reduce using rule 16 (block5 -> BEGIN statement-list END .)
    SEMICOLON       reduce using rule 16 (block5 -> BEGIN statement-list END .)


state 114

    (80) statement-list -> statement-list SEMICOLON . statement
    (81) statement -> . empty
    (82) statement -> . variable EQUAL expression
    (83) statement -> . BEGIN statement-list END statement
    (84) statement -> . IF expression THEN statement
    (85) statement -> . IF expression THEN statement ELSE statement
    (86) statement -> . CASE expression OF case-list END
    (87) statement -> . WHILE expression DO statement
    (88) statement -> . REPEAT statement-list UNTIL expression
    (89) statement -> . FOR varid EQUAL for-list DO statement
    (90) statement -> . procid
    (91) statement -> . procid LPAREN expression-list RPAREN
    (92) statement -> . GOTO label
    (93) statement -> . WITH record-variable-list DO statement
    (94) statement -> . label COLON statement
    (95) statement -> . WRITE LPAREN STRING RPAREN
    (96) statement -> . READ LPAREN ID RPAREN
    (157) empty -> .
    (97) variable -> . ID
    (98) variable -> . variable LBRACKET subscript-list RBRACKET
    (99) variable -> . variable COMMA fieldid
    (100) variable -> . variable
    (154) procid -> . ID
    (109) label -> . INTEGER

    BEGIN           shift and go to state 59
    IF              shift and go to state 64
    CASE            shift and go to state 65
    WHILE           shift and go to state 66
    REPEAT          shift and go to state 67
    FOR             shift and go to state 68
    GOTO            shift and go to state 70
    WITH            shift and go to state 72
    WRITE           shift and go to state 73
    READ            shift and go to state 74
    END             reduce using rule 157 (empty -> .)
    SEMICOLON       reduce using rule 157 (empty -> .)
    UNTIL           reduce using rule 157 (empty -> .)
    ID              shift and go to state 75
    INTEGER         shift and go to state 76

    statement                      shift and go to state 174
    empty                          shift and go to state 62
    variable                       shift and go to state 63
    procid                         shift and go to state 69
    label                          shift and go to state 71

state 115

    (82) statement -> variable EQUAL . expression
    (112) expression -> . expression relational-op additive-expression
    (113) expression -> . additive-expression
    (120) additive-expression -> . additive-expression additive-op multiplicative-expression
    (121) additive-expression -> . multiplicative-expression
    (125) multiplicative-expression -> . multiplicative-expression multiplicative-op unary-expression
    (126) multiplicative-expression -> . unary-expression
    (132) unary-expression -> . unary-op unary-expression
    (133) unary-expression -> . primary-expression
    (134) unary-op -> . PLUS
    (135) unary-op -> . MINUS
    (136) unary-op -> . NOT
    (137) primary-expression -> . ID
    (138) primary-expression -> . NUMBER
    (139) primary-expression -> . INTEGER
    (140) primary-expression -> . REAL
    (141) primary-expression -> . STRING
    (142) primary-expression -> . NIL
    (143) primary-expression -> . funcid LPAREN expression-list RPAREN
    (144) primary-expression -> . LBRACKET element-list RBRACKET
    (145) primary-expression -> . LPAREN expression RPAREN
    (153) funcid -> . ID

    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    NOT             shift and go to state 126
    ID              shift and go to state 127
    NUMBER          shift and go to state 128
    INTEGER         shift and go to state 129
    REAL            shift and go to state 130
    STRING          shift and go to state 131
    NIL             shift and go to state 132
    LBRACKET        shift and go to state 135
    LPAREN          shift and go to state 134

    expression                     shift and go to state 175
    additive-expression            shift and go to state 119
    multiplicative-expression      shift and go to state 120
    unary-expression               shift and go to state 121
    unary-op                       shift and go to state 122
    primary-expression             shift and go to state 123
    funcid                         shift and go to state 133

state 116

    (98) variable -> variable LBRACKET . subscript-list RBRACKET
    (101) subscript-list -> . expression
    (102) subscript-list -> . subscript-list COMMA expression
    (112) expression -> . expression relational-op additive-expression
    (113) expression -> . additive-expression
    (120) additive-expression -> . additive-expression additive-op multiplicative-expression
    (121) additive-expression -> . multiplicative-expression
    (125) multiplicative-expression -> . multiplicative-expression multiplicative-op unary-expression
    (126) multiplicative-expression -> . unary-expression
    (132) unary-expression -> . unary-op unary-expression
    (133) unary-expression -> . primary-expression
    (134) unary-op -> . PLUS
    (135) unary-op -> . MINUS
    (136) unary-op -> . NOT
    (137) primary-expression -> . ID
    (138) primary-expression -> . NUMBER
    (139) primary-expression -> . INTEGER
    (140) primary-expression -> . REAL
    (141) primary-expression -> . STRING
    (142) primary-expression -> . NIL
    (143) primary-expression -> . funcid LPAREN expression-list RPAREN
    (144) primary-expression -> . LBRACKET element-list RBRACKET
    (145) primary-expression -> . LPAREN expression RPAREN
    (153) funcid -> . ID

    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    NOT             shift and go to state 126
    ID              shift and go to state 127
    NUMBER          shift and go to state 128
    INTEGER         shift and go to state 129
    REAL            shift and go to state 130
    STRING          shift and go to state 131
    NIL             shift and go to state 132
    LBRACKET        shift and go to state 135
    LPAREN          shift and go to state 134

    subscript-list                 shift and go to state 176
    expression                     shift and go to state 177
    additive-expression            shift and go to state 119
    multiplicative-expression      shift and go to state 120
    unary-expression               shift and go to state 121
    unary-op                       shift and go to state 122
    primary-expression             shift and go to state 123
    funcid                         shift and go to state 133

state 117

    (99) variable -> variable COMMA . fieldid
    (155) fieldid -> . ID

    ID              shift and go to state 179

    fieldid                        shift and go to state 178

state 118

    (84) statement -> IF expression . THEN statement
    (85) statement -> IF expression . THEN statement ELSE statement
    (112) expression -> expression . relational-op additive-expression
    (114) relational-op -> . LESS
    (115) relational-op -> . LESSEQUAL
    (116) relational-op -> . EQUAL
    (117) relational-op -> . DEQUAL
    (118) relational-op -> . GREATEREQUAL
    (119) relational-op -> . GREATER

    THEN            shift and go to state 180
    LESS            shift and go to state 182
    LESSEQUAL       shift and go to state 183
    EQUAL           shift and go to state 184
    DEQUAL          shift and go to state 185
    GREATEREQUAL    shift and go to state 186
    GREATER         shift and go to state 187

    relational-op                  shift and go to state 181

state 119

    (113) expression -> additive-expression .
    (120) additive-expression -> additive-expression . additive-op multiplicative-expression
    (122) additive-op -> . PLUS
    (123) additive-op -> . MINUS
    (124) additive-op -> . OR

    THEN            reduce using rule 113 (expression -> additive-expression .)
    LESS            reduce using rule 113 (expression -> additive-expression .)
    LESSEQUAL       reduce using rule 113 (expression -> additive-expression .)
    EQUAL           reduce using rule 113 (expression -> additive-expression .)
    DEQUAL          reduce using rule 113 (expression -> additive-expression .)
    GREATEREQUAL    reduce using rule 113 (expression -> additive-expression .)
    GREATER         reduce using rule 113 (expression -> additive-expression .)
    OF              reduce using rule 113 (expression -> additive-expression .)
    DO              reduce using rule 113 (expression -> additive-expression .)
    END             reduce using rule 113 (expression -> additive-expression .)
    SEMICOLON       reduce using rule 113 (expression -> additive-expression .)
    UNTIL           reduce using rule 113 (expression -> additive-expression .)
    ELSE            reduce using rule 113 (expression -> additive-expression .)
    RBRACKET        reduce using rule 113 (expression -> additive-expression .)
    COMMA           reduce using rule 113 (expression -> additive-expression .)
    RPAREN          reduce using rule 113 (expression -> additive-expression .)
    DOT             reduce using rule 113 (expression -> additive-expression .)
    TO              reduce using rule 113 (expression -> additive-expression .)
    DOWNTO          reduce using rule 113 (expression -> additive-expression .)
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    OR              shift and go to state 191

    additive-op                    shift and go to state 188

state 120

    (121) additive-expression -> multiplicative-expression .
    (125) multiplicative-expression -> multiplicative-expression . multiplicative-op unary-expression
    (127) multiplicative-op -> . TIMES
    (128) multiplicative-op -> . DIVIDE
    (129) multiplicative-op -> . DIV
    (130) multiplicative-op -> . MOD
    (131) multiplicative-op -> . AND

    PLUS            reduce using rule 121 (additive-expression -> multiplicative-expression .)
    MINUS           reduce using rule 121 (additive-expression -> multiplicative-expression .)
    OR              reduce using rule 121 (additive-expression -> multiplicative-expression .)
    THEN            reduce using rule 121 (additive-expression -> multiplicative-expression .)
    LESS            reduce using rule 121 (additive-expression -> multiplicative-expression .)
    LESSEQUAL       reduce using rule 121 (additive-expression -> multiplicative-expression .)
    EQUAL           reduce using rule 121 (additive-expression -> multiplicative-expression .)
    DEQUAL          reduce using rule 121 (additive-expression -> multiplicative-expression .)
    GREATEREQUAL    reduce using rule 121 (additive-expression -> multiplicative-expression .)
    GREATER         reduce using rule 121 (additive-expression -> multiplicative-expression .)
    OF              reduce using rule 121 (additive-expression -> multiplicative-expression .)
    DO              reduce using rule 121 (additive-expression -> multiplicative-expression .)
    END             reduce using rule 121 (additive-expression -> multiplicative-expression .)
    SEMICOLON       reduce using rule 121 (additive-expression -> multiplicative-expression .)
    UNTIL           reduce using rule 121 (additive-expression -> multiplicative-expression .)
    ELSE            reduce using rule 121 (additive-expression -> multiplicative-expression .)
    RBRACKET        reduce using rule 121 (additive-expression -> multiplicative-expression .)
    COMMA           reduce using rule 121 (additive-expression -> multiplicative-expression .)
    RPAREN          reduce using rule 121 (additive-expression -> multiplicative-expression .)
    DOT             reduce using rule 121 (additive-expression -> multiplicative-expression .)
    TO              reduce using rule 121 (additive-expression -> multiplicative-expression .)
    DOWNTO          reduce using rule 121 (additive-expression -> multiplicative-expression .)
    TIMES           shift and go to state 193
    DIVIDE          shift and go to state 194
    DIV             shift and go to state 195
    MOD             shift and go to state 196
    AND             shift and go to state 197

    multiplicative-op              shift and go to state 192

state 121

    (126) multiplicative-expression -> unary-expression .

    TIMES           reduce using rule 126 (multiplicative-expression -> unary-expression .)
    DIVIDE          reduce using rule 126 (multiplicative-expression -> unary-expression .)
    DIV             reduce using rule 126 (multiplicative-expression -> unary-expression .)
    MOD             reduce using rule 126 (multiplicative-expression -> unary-expression .)
    AND             reduce using rule 126 (multiplicative-expression -> unary-expression .)
    PLUS            reduce using rule 126 (multiplicative-expression -> unary-expression .)
    MINUS           reduce using rule 126 (multiplicative-expression -> unary-expression .)
    OR              reduce using rule 126 (multiplicative-expression -> unary-expression .)
    THEN            reduce using rule 126 (multiplicative-expression -> unary-expression .)
    LESS            reduce using rule 126 (multiplicative-expression -> unary-expression .)
    LESSEQUAL       reduce using rule 126 (multiplicative-expression -> unary-expression .)
    EQUAL           reduce using rule 126 (multiplicative-expression -> unary-expression .)
    DEQUAL          reduce using rule 126 (multiplicative-expression -> unary-expression .)
    GREATEREQUAL    reduce using rule 126 (multiplicative-expression -> unary-expression .)
    GREATER         reduce using rule 126 (multiplicative-expression -> unary-expression .)
    OF              reduce using rule 126 (multiplicative-expression -> unary-expression .)
    DO              reduce using rule 126 (multiplicative-expression -> unary-expression .)
    END             reduce using rule 126 (multiplicative-expression -> unary-expression .)
    SEMICOLON       reduce using rule 126 (multiplicative-expression -> unary-expression .)
    UNTIL           reduce using rule 126 (multiplicative-expression -> unary-expression .)
    ELSE            reduce using rule 126 (multiplicative-expression -> unary-expression .)
    RBRACKET        reduce using rule 126 (multiplicative-expression -> unary-expression .)
    COMMA           reduce using rule 126 (multiplicative-expression -> unary-expression .)
    RPAREN          reduce using rule 126 (multiplicative-expression -> unary-expression .)
    DOT             reduce using rule 126 (multiplicative-expression -> unary-expression .)
    TO              reduce using rule 126 (multiplicative-expression -> unary-expression .)
    DOWNTO          reduce using rule 126 (multiplicative-expression -> unary-expression .)


state 122

    (132) unary-expression -> unary-op . unary-expression
    (132) unary-expression -> . unary-op unary-expression
    (133) unary-expression -> . primary-expression
    (134) unary-op -> . PLUS
    (135) unary-op -> . MINUS
    (136) unary-op -> . NOT
    (137) primary-expression -> . ID
    (138) primary-expression -> . NUMBER
    (139) primary-expression -> . INTEGER
    (140) primary-expression -> . REAL
    (141) primary-expression -> . STRING
    (142) primary-expression -> . NIL
    (143) primary-expression -> . funcid LPAREN expression-list RPAREN
    (144) primary-expression -> . LBRACKET element-list RBRACKET
    (145) primary-expression -> . LPAREN expression RPAREN
    (153) funcid -> . ID

    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    NOT             shift and go to state 126
    ID              shift and go to state 127
    NUMBER          shift and go to state 128
    INTEGER         shift and go to state 129
    REAL            shift and go to state 130
    STRING          shift and go to state 131
    NIL             shift and go to state 132
    LBRACKET        shift and go to state 135
    LPAREN          shift and go to state 134

    unary-op                       shift and go to state 122
    unary-expression               shift and go to state 198
    primary-expression             shift and go to state 123
    funcid                         shift and go to state 133

state 123

    (133) unary-expression -> primary-expression .

    TIMES           reduce using rule 133 (unary-expression -> primary-expression .)
    DIVIDE          reduce using rule 133 (unary-expression -> primary-expression .)
    DIV             reduce using rule 133 (unary-expression -> primary-expression .)
    MOD             reduce using rule 133 (unary-expression -> primary-expression .)
    AND             reduce using rule 133 (unary-expression -> primary-expression .)
    PLUS            reduce using rule 133 (unary-expression -> primary-expression .)
    MINUS           reduce using rule 133 (unary-expression -> primary-expression .)
    OR              reduce using rule 133 (unary-expression -> primary-expression .)
    THEN            reduce using rule 133 (unary-expression -> primary-expression .)
    LESS            reduce using rule 133 (unary-expression -> primary-expression .)
    LESSEQUAL       reduce using rule 133 (unary-expression -> primary-expression .)
    EQUAL           reduce using rule 133 (unary-expression -> primary-expression .)
    DEQUAL          reduce using rule 133 (unary-expression -> primary-expression .)
    GREATEREQUAL    reduce using rule 133 (unary-expression -> primary-expression .)
    GREATER         reduce using rule 133 (unary-expression -> primary-expression .)
    OF              reduce using rule 133 (unary-expression -> primary-expression .)
    DO              reduce using rule 133 (unary-expression -> primary-expression .)
    END             reduce using rule 133 (unary-expression -> primary-expression .)
    SEMICOLON       reduce using rule 133 (unary-expression -> primary-expression .)
    UNTIL           reduce using rule 133 (unary-expression -> primary-expression .)
    ELSE            reduce using rule 133 (unary-expression -> primary-expression .)
    RBRACKET        reduce using rule 133 (unary-expression -> primary-expression .)
    COMMA           reduce using rule 133 (unary-expression -> primary-expression .)
    RPAREN          reduce using rule 133 (unary-expression -> primary-expression .)
    DOT             reduce using rule 133 (unary-expression -> primary-expression .)
    TO              reduce using rule 133 (unary-expression -> primary-expression .)
    DOWNTO          reduce using rule 133 (unary-expression -> primary-expression .)


state 124

    (134) unary-op -> PLUS .

    PLUS            reduce using rule 134 (unary-op -> PLUS .)
    MINUS           reduce using rule 134 (unary-op -> PLUS .)
    NOT             reduce using rule 134 (unary-op -> PLUS .)
    ID              reduce using rule 134 (unary-op -> PLUS .)
    NUMBER          reduce using rule 134 (unary-op -> PLUS .)
    INTEGER         reduce using rule 134 (unary-op -> PLUS .)
    REAL            reduce using rule 134 (unary-op -> PLUS .)
    STRING          reduce using rule 134 (unary-op -> PLUS .)
    NIL             reduce using rule 134 (unary-op -> PLUS .)
    LBRACKET        reduce using rule 134 (unary-op -> PLUS .)
    LPAREN          reduce using rule 134 (unary-op -> PLUS .)


state 125

    (135) unary-op -> MINUS .

    PLUS            reduce using rule 135 (unary-op -> MINUS .)
    MINUS           reduce using rule 135 (unary-op -> MINUS .)
    NOT             reduce using rule 135 (unary-op -> MINUS .)
    ID              reduce using rule 135 (unary-op -> MINUS .)
    NUMBER          reduce using rule 135 (unary-op -> MINUS .)
    INTEGER         reduce using rule 135 (unary-op -> MINUS .)
    REAL            reduce using rule 135 (unary-op -> MINUS .)
    STRING          reduce using rule 135 (unary-op -> MINUS .)
    NIL             reduce using rule 135 (unary-op -> MINUS .)
    LBRACKET        reduce using rule 135 (unary-op -> MINUS .)
    LPAREN          reduce using rule 135 (unary-op -> MINUS .)


state 126

    (136) unary-op -> NOT .

    PLUS            reduce using rule 136 (unary-op -> NOT .)
    MINUS           reduce using rule 136 (unary-op -> NOT .)
    NOT             reduce using rule 136 (unary-op -> NOT .)
    ID              reduce using rule 136 (unary-op -> NOT .)
    NUMBER          reduce using rule 136 (unary-op -> NOT .)
    INTEGER         reduce using rule 136 (unary-op -> NOT .)
    REAL            reduce using rule 136 (unary-op -> NOT .)
    STRING          reduce using rule 136 (unary-op -> NOT .)
    NIL             reduce using rule 136 (unary-op -> NOT .)
    LBRACKET        reduce using rule 136 (unary-op -> NOT .)
    LPAREN          reduce using rule 136 (unary-op -> NOT .)


state 127

    (137) primary-expression -> ID .
    (153) funcid -> ID .

    TIMES           reduce using rule 137 (primary-expression -> ID .)
    DIVIDE          reduce using rule 137 (primary-expression -> ID .)
    DIV             reduce using rule 137 (primary-expression -> ID .)
    MOD             reduce using rule 137 (primary-expression -> ID .)
    AND             reduce using rule 137 (primary-expression -> ID .)
    PLUS            reduce using rule 137 (primary-expression -> ID .)
    MINUS           reduce using rule 137 (primary-expression -> ID .)
    OR              reduce using rule 137 (primary-expression -> ID .)
    THEN            reduce using rule 137 (primary-expression -> ID .)
    LESS            reduce using rule 137 (primary-expression -> ID .)
    LESSEQUAL       reduce using rule 137 (primary-expression -> ID .)
    EQUAL           reduce using rule 137 (primary-expression -> ID .)
    DEQUAL          reduce using rule 137 (primary-expression -> ID .)
    GREATEREQUAL    reduce using rule 137 (primary-expression -> ID .)
    GREATER         reduce using rule 137 (primary-expression -> ID .)
    OF              reduce using rule 137 (primary-expression -> ID .)
    DO              reduce using rule 137 (primary-expression -> ID .)
    END             reduce using rule 137 (primary-expression -> ID .)
    SEMICOLON       reduce using rule 137 (primary-expression -> ID .)
    UNTIL           reduce using rule 137 (primary-expression -> ID .)
    ELSE            reduce using rule 137 (primary-expression -> ID .)
    RBRACKET        reduce using rule 137 (primary-expression -> ID .)
    COMMA           reduce using rule 137 (primary-expression -> ID .)
    RPAREN          reduce using rule 137 (primary-expression -> ID .)
    DOT             reduce using rule 137 (primary-expression -> ID .)
    TO              reduce using rule 137 (primary-expression -> ID .)
    DOWNTO          reduce using rule 137 (primary-expression -> ID .)
    LPAREN          reduce using rule 153 (funcid -> ID .)


state 128

    (138) primary-expression -> NUMBER .

    TIMES           reduce using rule 138 (primary-expression -> NUMBER .)
    DIVIDE          reduce using rule 138 (primary-expression -> NUMBER .)
    DIV             reduce using rule 138 (primary-expression -> NUMBER .)
    MOD             reduce using rule 138 (primary-expression -> NUMBER .)
    AND             reduce using rule 138 (primary-expression -> NUMBER .)
    PLUS            reduce using rule 138 (primary-expression -> NUMBER .)
    MINUS           reduce using rule 138 (primary-expression -> NUMBER .)
    OR              reduce using rule 138 (primary-expression -> NUMBER .)
    THEN            reduce using rule 138 (primary-expression -> NUMBER .)
    LESS            reduce using rule 138 (primary-expression -> NUMBER .)
    LESSEQUAL       reduce using rule 138 (primary-expression -> NUMBER .)
    EQUAL           reduce using rule 138 (primary-expression -> NUMBER .)
    DEQUAL          reduce using rule 138 (primary-expression -> NUMBER .)
    GREATEREQUAL    reduce using rule 138 (primary-expression -> NUMBER .)
    GREATER         reduce using rule 138 (primary-expression -> NUMBER .)
    OF              reduce using rule 138 (primary-expression -> NUMBER .)
    DO              reduce using rule 138 (primary-expression -> NUMBER .)
    END             reduce using rule 138 (primary-expression -> NUMBER .)
    SEMICOLON       reduce using rule 138 (primary-expression -> NUMBER .)
    UNTIL           reduce using rule 138 (primary-expression -> NUMBER .)
    ELSE            reduce using rule 138 (primary-expression -> NUMBER .)
    RBRACKET        reduce using rule 138 (primary-expression -> NUMBER .)
    COMMA           reduce using rule 138 (primary-expression -> NUMBER .)
    RPAREN          reduce using rule 138 (primary-expression -> NUMBER .)
    DOT             reduce using rule 138 (primary-expression -> NUMBER .)
    TO              reduce using rule 138 (primary-expression -> NUMBER .)
    DOWNTO          reduce using rule 138 (primary-expression -> NUMBER .)


state 129

    (139) primary-expression -> INTEGER .

    TIMES           reduce using rule 139 (primary-expression -> INTEGER .)
    DIVIDE          reduce using rule 139 (primary-expression -> INTEGER .)
    DIV             reduce using rule 139 (primary-expression -> INTEGER .)
    MOD             reduce using rule 139 (primary-expression -> INTEGER .)
    AND             reduce using rule 139 (primary-expression -> INTEGER .)
    PLUS            reduce using rule 139 (primary-expression -> INTEGER .)
    MINUS           reduce using rule 139 (primary-expression -> INTEGER .)
    OR              reduce using rule 139 (primary-expression -> INTEGER .)
    THEN            reduce using rule 139 (primary-expression -> INTEGER .)
    LESS            reduce using rule 139 (primary-expression -> INTEGER .)
    LESSEQUAL       reduce using rule 139 (primary-expression -> INTEGER .)
    EQUAL           reduce using rule 139 (primary-expression -> INTEGER .)
    DEQUAL          reduce using rule 139 (primary-expression -> INTEGER .)
    GREATEREQUAL    reduce using rule 139 (primary-expression -> INTEGER .)
    GREATER         reduce using rule 139 (primary-expression -> INTEGER .)
    OF              reduce using rule 139 (primary-expression -> INTEGER .)
    DO              reduce using rule 139 (primary-expression -> INTEGER .)
    END             reduce using rule 139 (primary-expression -> INTEGER .)
    SEMICOLON       reduce using rule 139 (primary-expression -> INTEGER .)
    UNTIL           reduce using rule 139 (primary-expression -> INTEGER .)
    ELSE            reduce using rule 139 (primary-expression -> INTEGER .)
    RBRACKET        reduce using rule 139 (primary-expression -> INTEGER .)
    COMMA           reduce using rule 139 (primary-expression -> INTEGER .)
    RPAREN          reduce using rule 139 (primary-expression -> INTEGER .)
    DOT             reduce using rule 139 (primary-expression -> INTEGER .)
    TO              reduce using rule 139 (primary-expression -> INTEGER .)
    DOWNTO          reduce using rule 139 (primary-expression -> INTEGER .)


state 130

    (140) primary-expression -> REAL .

    TIMES           reduce using rule 140 (primary-expression -> REAL .)
    DIVIDE          reduce using rule 140 (primary-expression -> REAL .)
    DIV             reduce using rule 140 (primary-expression -> REAL .)
    MOD             reduce using rule 140 (primary-expression -> REAL .)
    AND             reduce using rule 140 (primary-expression -> REAL .)
    PLUS            reduce using rule 140 (primary-expression -> REAL .)
    MINUS           reduce using rule 140 (primary-expression -> REAL .)
    OR              reduce using rule 140 (primary-expression -> REAL .)
    THEN            reduce using rule 140 (primary-expression -> REAL .)
    LESS            reduce using rule 140 (primary-expression -> REAL .)
    LESSEQUAL       reduce using rule 140 (primary-expression -> REAL .)
    EQUAL           reduce using rule 140 (primary-expression -> REAL .)
    DEQUAL          reduce using rule 140 (primary-expression -> REAL .)
    GREATEREQUAL    reduce using rule 140 (primary-expression -> REAL .)
    GREATER         reduce using rule 140 (primary-expression -> REAL .)
    OF              reduce using rule 140 (primary-expression -> REAL .)
    DO              reduce using rule 140 (primary-expression -> REAL .)
    END             reduce using rule 140 (primary-expression -> REAL .)
    SEMICOLON       reduce using rule 140 (primary-expression -> REAL .)
    UNTIL           reduce using rule 140 (primary-expression -> REAL .)
    ELSE            reduce using rule 140 (primary-expression -> REAL .)
    RBRACKET        reduce using rule 140 (primary-expression -> REAL .)
    COMMA           reduce using rule 140 (primary-expression -> REAL .)
    RPAREN          reduce using rule 140 (primary-expression -> REAL .)
    DOT             reduce using rule 140 (primary-expression -> REAL .)
    TO              reduce using rule 140 (primary-expression -> REAL .)
    DOWNTO          reduce using rule 140 (primary-expression -> REAL .)


state 131

    (141) primary-expression -> STRING .

    TIMES           reduce using rule 141 (primary-expression -> STRING .)
    DIVIDE          reduce using rule 141 (primary-expression -> STRING .)
    DIV             reduce using rule 141 (primary-expression -> STRING .)
    MOD             reduce using rule 141 (primary-expression -> STRING .)
    AND             reduce using rule 141 (primary-expression -> STRING .)
    PLUS            reduce using rule 141 (primary-expression -> STRING .)
    MINUS           reduce using rule 141 (primary-expression -> STRING .)
    OR              reduce using rule 141 (primary-expression -> STRING .)
    THEN            reduce using rule 141 (primary-expression -> STRING .)
    LESS            reduce using rule 141 (primary-expression -> STRING .)
    LESSEQUAL       reduce using rule 141 (primary-expression -> STRING .)
    EQUAL           reduce using rule 141 (primary-expression -> STRING .)
    DEQUAL          reduce using rule 141 (primary-expression -> STRING .)
    GREATEREQUAL    reduce using rule 141 (primary-expression -> STRING .)
    GREATER         reduce using rule 141 (primary-expression -> STRING .)
    OF              reduce using rule 141 (primary-expression -> STRING .)
    DO              reduce using rule 141 (primary-expression -> STRING .)
    END             reduce using rule 141 (primary-expression -> STRING .)
    SEMICOLON       reduce using rule 141 (primary-expression -> STRING .)
    UNTIL           reduce using rule 141 (primary-expression -> STRING .)
    ELSE            reduce using rule 141 (primary-expression -> STRING .)
    RBRACKET        reduce using rule 141 (primary-expression -> STRING .)
    COMMA           reduce using rule 141 (primary-expression -> STRING .)
    RPAREN          reduce using rule 141 (primary-expression -> STRING .)
    DOT             reduce using rule 141 (primary-expression -> STRING .)
    TO              reduce using rule 141 (primary-expression -> STRING .)
    DOWNTO          reduce using rule 141 (primary-expression -> STRING .)


state 132

    (142) primary-expression -> NIL .

    TIMES           reduce using rule 142 (primary-expression -> NIL .)
    DIVIDE          reduce using rule 142 (primary-expression -> NIL .)
    DIV             reduce using rule 142 (primary-expression -> NIL .)
    MOD             reduce using rule 142 (primary-expression -> NIL .)
    AND             reduce using rule 142 (primary-expression -> NIL .)
    PLUS            reduce using rule 142 (primary-expression -> NIL .)
    MINUS           reduce using rule 142 (primary-expression -> NIL .)
    OR              reduce using rule 142 (primary-expression -> NIL .)
    THEN            reduce using rule 142 (primary-expression -> NIL .)
    LESS            reduce using rule 142 (primary-expression -> NIL .)
    LESSEQUAL       reduce using rule 142 (primary-expression -> NIL .)
    EQUAL           reduce using rule 142 (primary-expression -> NIL .)
    DEQUAL          reduce using rule 142 (primary-expression -> NIL .)
    GREATEREQUAL    reduce using rule 142 (primary-expression -> NIL .)
    GREATER         reduce using rule 142 (primary-expression -> NIL .)
    OF              reduce using rule 142 (primary-expression -> NIL .)
    DO              reduce using rule 142 (primary-expression -> NIL .)
    END             reduce using rule 142 (primary-expression -> NIL .)
    SEMICOLON       reduce using rule 142 (primary-expression -> NIL .)
    UNTIL           reduce using rule 142 (primary-expression -> NIL .)
    ELSE            reduce using rule 142 (primary-expression -> NIL .)
    RBRACKET        reduce using rule 142 (primary-expression -> NIL .)
    COMMA           reduce using rule 142 (primary-expression -> NIL .)
    RPAREN          reduce using rule 142 (primary-expression -> NIL .)
    DOT             reduce using rule 142 (primary-expression -> NIL .)
    TO              reduce using rule 142 (primary-expression -> NIL .)
    DOWNTO          reduce using rule 142 (primary-expression -> NIL .)


state 133

    (143) primary-expression -> funcid . LPAREN expression-list RPAREN

    LPAREN          shift and go to state 199


state 134

    (145) primary-expression -> LPAREN . expression RPAREN
    (112) expression -> . expression relational-op additive-expression
    (113) expression -> . additive-expression
    (120) additive-expression -> . additive-expression additive-op multiplicative-expression
    (121) additive-expression -> . multiplicative-expression
    (125) multiplicative-expression -> . multiplicative-expression multiplicative-op unary-expression
    (126) multiplicative-expression -> . unary-expression
    (132) unary-expression -> . unary-op unary-expression
    (133) unary-expression -> . primary-expression
    (134) unary-op -> . PLUS
    (135) unary-op -> . MINUS
    (136) unary-op -> . NOT
    (137) primary-expression -> . ID
    (138) primary-expression -> . NUMBER
    (139) primary-expression -> . INTEGER
    (140) primary-expression -> . REAL
    (141) primary-expression -> . STRING
    (142) primary-expression -> . NIL
    (143) primary-expression -> . funcid LPAREN expression-list RPAREN
    (144) primary-expression -> . LBRACKET element-list RBRACKET
    (145) primary-expression -> . LPAREN expression RPAREN
    (153) funcid -> . ID

    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    NOT             shift and go to state 126
    ID              shift and go to state 127
    NUMBER          shift and go to state 128
    INTEGER         shift and go to state 129
    REAL            shift and go to state 130
    STRING          shift and go to state 131
    NIL             shift and go to state 132
    LBRACKET        shift and go to state 135
    LPAREN          shift and go to state 134

    expression                     shift and go to state 200
    additive-expression            shift and go to state 119
    multiplicative-expression      shift and go to state 120
    unary-expression               shift and go to state 121
    unary-op                       shift and go to state 122
    primary-expression             shift and go to state 123
    funcid                         shift and go to state 133

state 135

    (144) primary-expression -> LBRACKET . element-list RBRACKET
    (146) element-list -> . empty
    (147) element-list -> . element
    (148) element-list -> . element-list COMMA element
    (157) empty -> .
    (149) element -> . expression
    (150) element -> . expression DOT DOT DOT expression
    (112) expression -> . expression relational-op additive-expression
    (113) expression -> . additive-expression
    (120) additive-expression -> . additive-expression additive-op multiplicative-expression
    (121) additive-expression -> . multiplicative-expression
    (125) multiplicative-expression -> . multiplicative-expression multiplicative-op unary-expression
    (126) multiplicative-expression -> . unary-expression
    (132) unary-expression -> . unary-op unary-expression
    (133) unary-expression -> . primary-expression
    (134) unary-op -> . PLUS
    (135) unary-op -> . MINUS
    (136) unary-op -> . NOT
    (137) primary-expression -> . ID
    (138) primary-expression -> . NUMBER
    (139) primary-expression -> . INTEGER
    (140) primary-expression -> . REAL
    (141) primary-expression -> . STRING
    (142) primary-expression -> . NIL
    (143) primary-expression -> . funcid LPAREN expression-list RPAREN
    (144) primary-expression -> . LBRACKET element-list RBRACKET
    (145) primary-expression -> . LPAREN expression RPAREN
    (153) funcid -> . ID

    RBRACKET        reduce using rule 157 (empty -> .)
    COMMA           reduce using rule 157 (empty -> .)
    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    NOT             shift and go to state 126
    ID              shift and go to state 127
    NUMBER          shift and go to state 128
    INTEGER         shift and go to state 129
    REAL            shift and go to state 130
    STRING          shift and go to state 131
    NIL             shift and go to state 132
    LBRACKET        shift and go to state 135
    LPAREN          shift and go to state 134

    element-list                   shift and go to state 201
    empty                          shift and go to state 202
    element                        shift and go to state 203
    expression                     shift and go to state 204
    additive-expression            shift and go to state 119
    multiplicative-expression      shift and go to state 120
    unary-expression               shift and go to state 121
    unary-op                       shift and go to state 122
    primary-expression             shift and go to state 123
    funcid                         shift and go to state 133

state 136

    (86) statement -> CASE expression . OF case-list END
    (112) expression -> expression . relational-op additive-expression
    (114) relational-op -> . LESS
    (115) relational-op -> . LESSEQUAL
    (116) relational-op -> . EQUAL
    (117) relational-op -> . DEQUAL
    (118) relational-op -> . GREATEREQUAL
    (119) relational-op -> . GREATER

    OF              shift and go to state 205
    LESS            shift and go to state 182
    LESSEQUAL       shift and go to state 183
    EQUAL           shift and go to state 184
    DEQUAL          shift and go to state 185
    GREATEREQUAL    shift and go to state 186
    GREATER         shift and go to state 187

    relational-op                  shift and go to state 181

state 137

    (87) statement -> WHILE expression . DO statement
    (112) expression -> expression . relational-op additive-expression
    (114) relational-op -> . LESS
    (115) relational-op -> . LESSEQUAL
    (116) relational-op -> . EQUAL
    (117) relational-op -> . DEQUAL
    (118) relational-op -> . GREATEREQUAL
    (119) relational-op -> . GREATER

    DO              shift and go to state 206
    LESS            shift and go to state 182
    LESSEQUAL       shift and go to state 183
    EQUAL           shift and go to state 184
    DEQUAL          shift and go to state 185
    GREATEREQUAL    shift and go to state 186
    GREATER         shift and go to state 187

    relational-op                  shift and go to state 181

state 138

    (88) statement -> REPEAT statement-list . UNTIL expression
    (80) statement-list -> statement-list . SEMICOLON statement

    UNTIL           shift and go to state 207
    SEMICOLON       shift and go to state 114


state 139

    (89) statement -> FOR varid . EQUAL for-list DO statement

    EQUAL           shift and go to state 208


state 140

    (156) varid -> ID .

    EQUAL           reduce using rule 156 (varid -> ID .)


state 141

    (91) statement -> procid LPAREN . expression-list RPAREN
    (107) expression-list -> . expression
    (108) expression-list -> . expression-list COMMA expression
    (112) expression -> . expression relational-op additive-expression
    (113) expression -> . additive-expression
    (120) additive-expression -> . additive-expression additive-op multiplicative-expression
    (121) additive-expression -> . multiplicative-expression
    (125) multiplicative-expression -> . multiplicative-expression multiplicative-op unary-expression
    (126) multiplicative-expression -> . unary-expression
    (132) unary-expression -> . unary-op unary-expression
    (133) unary-expression -> . primary-expression
    (134) unary-op -> . PLUS
    (135) unary-op -> . MINUS
    (136) unary-op -> . NOT
    (137) primary-expression -> . ID
    (138) primary-expression -> . NUMBER
    (139) primary-expression -> . INTEGER
    (140) primary-expression -> . REAL
    (141) primary-expression -> . STRING
    (142) primary-expression -> . NIL
    (143) primary-expression -> . funcid LPAREN expression-list RPAREN
    (144) primary-expression -> . LBRACKET element-list RBRACKET
    (145) primary-expression -> . LPAREN expression RPAREN
    (153) funcid -> . ID

    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    NOT             shift and go to state 126
    ID              shift and go to state 127
    NUMBER          shift and go to state 128
    INTEGER         shift and go to state 129
    REAL            shift and go to state 130
    STRING          shift and go to state 131
    NIL             shift and go to state 132
    LBRACKET        shift and go to state 135
    LPAREN          shift and go to state 134

    expression-list                shift and go to state 209
    expression                     shift and go to state 210
    additive-expression            shift and go to state 119
    multiplicative-expression      shift and go to state 120
    unary-expression               shift and go to state 121
    unary-op                       shift and go to state 122
    primary-expression             shift and go to state 123
    funcid                         shift and go to state 133

state 142

    (92) statement -> GOTO label .

    END             reduce using rule 92 (statement -> GOTO label .)
    SEMICOLON       reduce using rule 92 (statement -> GOTO label .)
    UNTIL           reduce using rule 92 (statement -> GOTO label .)
    ELSE            reduce using rule 92 (statement -> GOTO label .)


state 143

    (94) statement -> label COLON . statement
    (81) statement -> . empty
    (82) statement -> . variable EQUAL expression
    (83) statement -> . BEGIN statement-list END statement
    (84) statement -> . IF expression THEN statement
    (85) statement -> . IF expression THEN statement ELSE statement
    (86) statement -> . CASE expression OF case-list END
    (87) statement -> . WHILE expression DO statement
    (88) statement -> . REPEAT statement-list UNTIL expression
    (89) statement -> . FOR varid EQUAL for-list DO statement
    (90) statement -> . procid
    (91) statement -> . procid LPAREN expression-list RPAREN
    (92) statement -> . GOTO label
    (93) statement -> . WITH record-variable-list DO statement
    (94) statement -> . label COLON statement
    (95) statement -> . WRITE LPAREN STRING RPAREN
    (96) statement -> . READ LPAREN ID RPAREN
    (157) empty -> .
    (97) variable -> . ID
    (98) variable -> . variable LBRACKET subscript-list RBRACKET
    (99) variable -> . variable COMMA fieldid
    (100) variable -> . variable
    (154) procid -> . ID
    (109) label -> . INTEGER

    BEGIN           shift and go to state 59
    IF              shift and go to state 64
    CASE            shift and go to state 65
    WHILE           shift and go to state 66
    REPEAT          shift and go to state 67
    FOR             shift and go to state 68
    GOTO            shift and go to state 70
    WITH            shift and go to state 72
    WRITE           shift and go to state 73
    READ            shift and go to state 74
    END             reduce using rule 157 (empty -> .)
    SEMICOLON       reduce using rule 157 (empty -> .)
    UNTIL           reduce using rule 157 (empty -> .)
    ELSE            reduce using rule 157 (empty -> .)
    ID              shift and go to state 75
    INTEGER         shift and go to state 76

    label                          shift and go to state 71
    statement                      shift and go to state 211
    empty                          shift and go to state 62
    variable                       shift and go to state 63
    procid                         shift and go to state 69

state 144

    (93) statement -> WITH record-variable-list . DO statement
    (111) record-variable-list -> record-variable-list . COMMA variable

    DO              shift and go to state 212
    COMMA           shift and go to state 213


state 145

    (110) record-variable-list -> variable .
    (98) variable -> variable . LBRACKET subscript-list RBRACKET
    (99) variable -> variable . COMMA fieldid
    (100) variable -> variable .

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for DO resolved using rule 100 (variable -> variable .)
    LBRACKET        shift and go to state 116
    COMMA           shift and go to state 117
    DO              reduce using rule 100 (variable -> variable .)

  ! DO              [ reduce using rule 110 (record-variable-list -> variable .) ]
  ! COMMA           [ reduce using rule 110 (record-variable-list -> variable .) ]
  ! LBRACKET        [ reduce using rule 100 (variable -> variable .) ]
  ! COMMA           [ reduce using rule 100 (variable -> variable .) ]


state 146

    (97) variable -> ID .

    LBRACKET        reduce using rule 97 (variable -> ID .)
    COMMA           reduce using rule 97 (variable -> ID .)
    DO              reduce using rule 97 (variable -> ID .)


state 147

    (95) statement -> WRITE LPAREN . STRING RPAREN

    STRING          shift and go to state 214


state 148

    (96) statement -> READ LPAREN . ID RPAREN

    ID              shift and go to state 215


state 149

    (36) simple-type -> LPAREN identifier-list RPAREN .

    ID              reduce using rule 36 (simple-type -> LPAREN identifier-list RPAREN .)
    RBRACKET        reduce using rule 36 (simple-type -> LPAREN identifier-list RPAREN .)
    COMMA           reduce using rule 36 (simple-type -> LPAREN identifier-list RPAREN .)
    SEMICOLON       reduce using rule 36 (simple-type -> LPAREN identifier-list RPAREN .)
    END             reduce using rule 36 (simple-type -> LPAREN identifier-list RPAREN .)
    RPAREN          reduce using rule 36 (simple-type -> LPAREN identifier-list RPAREN .)


state 150

    (39) structured-type -> ARRAY LBRACKET index-list . RBRACKET OF type
    (45) index-list -> index-list . COMMA simple-type

    RBRACKET        shift and go to state 216
    COMMA           shift and go to state 217


state 151

    (44) index-list -> simple-type .

    RBRACKET        reduce using rule 44 (index-list -> simple-type .)
    COMMA           reduce using rule 44 (index-list -> simple-type .)


state 152

    (38) simple-type -> typeid .

    RBRACKET        reduce using rule 38 (simple-type -> typeid .)
    COMMA           reduce using rule 38 (simple-type -> typeid .)
    ID              reduce using rule 38 (simple-type -> typeid .)
    SEMICOLON       reduce using rule 38 (simple-type -> typeid .)
    END             reduce using rule 38 (simple-type -> typeid .)
    RPAREN          reduce using rule 38 (simple-type -> typeid .)


state 153

    (40) structured-type -> RECORD field-list END .

    ID              reduce using rule 40 (structured-type -> RECORD field-list END .)
    SEMICOLON       reduce using rule 40 (structured-type -> RECORD field-list END .)
    END             reduce using rule 40 (structured-type -> RECORD field-list END .)
    RPAREN          reduce using rule 40 (structured-type -> RECORD field-list END .)


state 154

    (47) field-list -> fixed-part SEMICOLON . variant-part
    (50) fixed-part -> fixed-part SEMICOLON . record-field
    (55) variant-part -> . CASE tag-field OF variant-list
    (51) record-field -> . empty
    (52) record-field -> . fieldid-list COLON type
    (157) empty -> .
    (53) fieldid-list -> . ID
    (54) fieldid-list -> . fieldid-list COMMA ID

    CASE            shift and go to state 83
    SEMICOLON       reduce using rule 157 (empty -> .)
    END             reduce using rule 157 (empty -> .)
    RPAREN          reduce using rule 157 (empty -> .)
    ID              shift and go to state 86

    variant-part                   shift and go to state 218
    record-field                   shift and go to state 219
    empty                          shift and go to state 84
    fieldid-list                   shift and go to state 85

state 155

    (55) variant-part -> CASE tag-field . OF variant-list

    OF              shift and go to state 220


state 156

    (56) tag-field -> typeid .

    OF              reduce using rule 56 (tag-field -> typeid .)


state 157

    (57) tag-field -> ID . COLON typeid
    (152) typeid -> ID .

    COLON           shift and go to state 221
    OF              reduce using rule 152 (typeid -> ID .)


state 158

    (52) record-field -> fieldid-list COLON . type
    (33) type -> . simple-type
    (34) type -> . structured-type
    (35) type -> . typeid
    (36) simple-type -> . LPAREN identifier-list RPAREN
    (37) simple-type -> . constant
    (38) simple-type -> . typeid
    (39) structured-type -> . ARRAY LBRACKET index-list RBRACKET OF type
    (40) structured-type -> . RECORD field-list END
    (41) structured-type -> . SET OF simple-type
    (42) structured-type -> . FILE OF type
    (43) structured-type -> . PACKED structured-type
    (152) typeid -> . ID
    (27) constant -> . INTEGER
    (28) constant -> . NUMBER
    (29) constant -> . REAL
    (30) constant -> . STRING
    (31) constant -> . constid
    (32) constant -> . PLUS constid
    (151) constid -> . ID

    LPAREN          shift and go to state 31
    ARRAY           shift and go to state 32
    RECORD          shift and go to state 33
    SET             shift and go to state 34
    FILE            shift and go to state 35
    PACKED          shift and go to state 36
    ID              shift and go to state 8
    INTEGER         shift and go to state 98
    NUMBER          shift and go to state 39
    REAL            shift and go to state 40
    STRING          shift and go to state 41
    PLUS            shift and go to state 43

    type                           shift and go to state 222
    simple-type                    shift and go to state 26
    structured-type                shift and go to state 27
    typeid                         shift and go to state 28
    constant                       shift and go to state 19
    constid                        shift and go to state 42

state 159

    (54) fieldid-list -> fieldid-list COMMA . ID

    ID              shift and go to state 223


state 160

    (41) structured-type -> SET OF simple-type .

    ID              reduce using rule 41 (structured-type -> SET OF simple-type .)
    SEMICOLON       reduce using rule 41 (structured-type -> SET OF simple-type .)
    END             reduce using rule 41 (structured-type -> SET OF simple-type .)
    RPAREN          reduce using rule 41 (structured-type -> SET OF simple-type .)


state 161

    (42) structured-type -> FILE OF type .

    ID              reduce using rule 42 (structured-type -> FILE OF type .)
    SEMICOLON       reduce using rule 42 (structured-type -> FILE OF type .)
    END             reduce using rule 42 (structured-type -> FILE OF type .)
    RPAREN          reduce using rule 42 (structured-type -> FILE OF type .)


state 162

    (66) proc-or-func -> PROCEDURE ID parameters . SEMICOLON block-or-forward

    SEMICOLON       shift and go to state 224


state 163

    (70) parameters -> LPAREN . formal-parameter-list RPAREN
    (71) formal-parameter-list -> . formal-parameter-section
    (72) formal-parameter-list -> . formal-parameter-list SEMICOLON formal-parameter-section
    (73) formal-parameter-section -> . parameterid-list COLON typeid
    (74) formal-parameter-section -> . VAR parameterid-list COLON typeid
    (75) formal-parameter-section -> . PROCEDURE ID parameters
    (76) formal-parameter-section -> . FUNCTION ID parameters COLON typeid
    (77) parameterid-list -> . ID
    (78) parameterid-list -> . parameterid-list COMMA ID

    VAR             shift and go to state 228
    PROCEDURE       shift and go to state 229
    FUNCTION        shift and go to state 231
    ID              shift and go to state 230

    formal-parameter-list          shift and go to state 225
    formal-parameter-section       shift and go to state 226
    parameterid-list               shift and go to state 227

state 164

    (67) proc-or-func -> FUNCTION ID parameters . COLON typeid SEMICOLON block-or-forward

    COLON           shift and go to state 232


state 165

    (5) identifier-list -> identifier-list COMMA ID .

    RPAREN          reduce using rule 5 (identifier-list -> identifier-list COMMA ID .)
    COMMA           reduce using rule 5 (identifier-list -> identifier-list COMMA ID .)


state 166

    (20) constant-declaration -> constant-declaration SEMICOLON ID EQUAL . constant
    (27) constant -> . INTEGER
    (28) constant -> . NUMBER
    (29) constant -> . REAL
    (30) constant -> . STRING
    (31) constant -> . constid
    (32) constant -> . PLUS constid
    (151) constid -> . ID

    INTEGER         shift and go to state 98
    NUMBER          shift and go to state 39
    REAL            shift and go to state 40
    STRING          shift and go to state 41
    PLUS            shift and go to state 43
    ID              shift and go to state 93

    constant                       shift and go to state 233
    constid                        shift and go to state 42

state 167

    (22) type-declaration -> type-declaration SEMICOLON ID EQUAL . type
    (33) type -> . simple-type
    (34) type -> . structured-type
    (35) type -> . typeid
    (36) simple-type -> . LPAREN identifier-list RPAREN
    (37) simple-type -> . constant
    (38) simple-type -> . typeid
    (39) structured-type -> . ARRAY LBRACKET index-list RBRACKET OF type
    (40) structured-type -> . RECORD field-list END
    (41) structured-type -> . SET OF simple-type
    (42) structured-type -> . FILE OF type
    (43) structured-type -> . PACKED structured-type
    (152) typeid -> . ID
    (27) constant -> . INTEGER
    (28) constant -> . NUMBER
    (29) constant -> . REAL
    (30) constant -> . STRING
    (31) constant -> . constid
    (32) constant -> . PLUS constid
    (151) constid -> . ID

    LPAREN          shift and go to state 31
    ARRAY           shift and go to state 32
    RECORD          shift and go to state 33
    SET             shift and go to state 34
    FILE            shift and go to state 35
    PACKED          shift and go to state 36
    ID              shift and go to state 8
    INTEGER         shift and go to state 98
    NUMBER          shift and go to state 39
    REAL            shift and go to state 40
    STRING          shift and go to state 41
    PLUS            shift and go to state 43

    type                           shift and go to state 234
    simple-type                    shift and go to state 26
    structured-type                shift and go to state 27
    typeid                         shift and go to state 28
    constant                       shift and go to state 19
    constid                        shift and go to state 42

state 168

    (19) constant-declaration -> CONST ID EQUAL constant .

    SEMICOLON       reduce using rule 19 (constant-declaration -> CONST ID EQUAL constant .)


state 169

    (24) variable-declaration -> variable-declaration SEMICOLON variableid-list COLON . type
    (33) type -> . simple-type
    (34) type -> . structured-type
    (35) type -> . typeid
    (36) simple-type -> . LPAREN identifier-list RPAREN
    (37) simple-type -> . constant
    (38) simple-type -> . typeid
    (39) structured-type -> . ARRAY LBRACKET index-list RBRACKET OF type
    (40) structured-type -> . RECORD field-list END
    (41) structured-type -> . SET OF simple-type
    (42) structured-type -> . FILE OF type
    (43) structured-type -> . PACKED structured-type
    (152) typeid -> . ID
    (27) constant -> . INTEGER
    (28) constant -> . NUMBER
    (29) constant -> . REAL
    (30) constant -> . STRING
    (31) constant -> . constid
    (32) constant -> . PLUS constid
    (151) constid -> . ID

    LPAREN          shift and go to state 31
    ARRAY           shift and go to state 32
    RECORD          shift and go to state 33
    SET             shift and go to state 34
    FILE            shift and go to state 35
    PACKED          shift and go to state 36
    ID              shift and go to state 8
    INTEGER         shift and go to state 98
    NUMBER          shift and go to state 39
    REAL            shift and go to state 40
    STRING          shift and go to state 41
    PLUS            shift and go to state 43

    type                           shift and go to state 235
    simple-type                    shift and go to state 26
    structured-type                shift and go to state 27
    typeid                         shift and go to state 28
    constant                       shift and go to state 19
    constid                        shift and go to state 42

state 170

    (21) type-declaration -> type ID EQUAL type .

    SEMICOLON       reduce using rule 21 (type-declaration -> type ID EQUAL type .)


state 171

    (23) variable-declaration -> VAR variableid-list COLON type .

    SEMICOLON       reduce using rule 23 (variable-declaration -> VAR variableid-list COLON type .)


state 172

    (26) variableid-list -> variableid-list COMMA ID .

    COLON           reduce using rule 26 (variableid-list -> variableid-list COMMA ID .)
    COMMA           reduce using rule 26 (variableid-list -> variableid-list COMMA ID .)


state 173

    (83) statement -> BEGIN statement-list END . statement
    (81) statement -> . empty
    (82) statement -> . variable EQUAL expression
    (83) statement -> . BEGIN statement-list END statement
    (84) statement -> . IF expression THEN statement
    (85) statement -> . IF expression THEN statement ELSE statement
    (86) statement -> . CASE expression OF case-list END
    (87) statement -> . WHILE expression DO statement
    (88) statement -> . REPEAT statement-list UNTIL expression
    (89) statement -> . FOR varid EQUAL for-list DO statement
    (90) statement -> . procid
    (91) statement -> . procid LPAREN expression-list RPAREN
    (92) statement -> . GOTO label
    (93) statement -> . WITH record-variable-list DO statement
    (94) statement -> . label COLON statement
    (95) statement -> . WRITE LPAREN STRING RPAREN
    (96) statement -> . READ LPAREN ID RPAREN
    (157) empty -> .
    (97) variable -> . ID
    (98) variable -> . variable LBRACKET subscript-list RBRACKET
    (99) variable -> . variable COMMA fieldid
    (100) variable -> . variable
    (154) procid -> . ID
    (109) label -> . INTEGER

    BEGIN           shift and go to state 59
    IF              shift and go to state 64
    CASE            shift and go to state 65
    WHILE           shift and go to state 66
    REPEAT          shift and go to state 67
    FOR             shift and go to state 68
    GOTO            shift and go to state 70
    WITH            shift and go to state 72
    WRITE           shift and go to state 73
    READ            shift and go to state 74
    END             reduce using rule 157 (empty -> .)
    SEMICOLON       reduce using rule 157 (empty -> .)
    UNTIL           reduce using rule 157 (empty -> .)
    ELSE            reduce using rule 157 (empty -> .)
    ID              shift and go to state 75
    INTEGER         shift and go to state 76

    statement                      shift and go to state 236
    empty                          shift and go to state 62
    variable                       shift and go to state 63
    procid                         shift and go to state 69
    label                          shift and go to state 71

state 174

    (80) statement-list -> statement-list SEMICOLON statement .

    END             reduce using rule 80 (statement-list -> statement-list SEMICOLON statement .)
    SEMICOLON       reduce using rule 80 (statement-list -> statement-list SEMICOLON statement .)
    UNTIL           reduce using rule 80 (statement-list -> statement-list SEMICOLON statement .)


state 175

    (82) statement -> variable EQUAL expression .
    (112) expression -> expression . relational-op additive-expression
    (114) relational-op -> . LESS
    (115) relational-op -> . LESSEQUAL
    (116) relational-op -> . EQUAL
    (117) relational-op -> . DEQUAL
    (118) relational-op -> . GREATEREQUAL
    (119) relational-op -> . GREATER

    END             reduce using rule 82 (statement -> variable EQUAL expression .)
    SEMICOLON       reduce using rule 82 (statement -> variable EQUAL expression .)
    UNTIL           reduce using rule 82 (statement -> variable EQUAL expression .)
    ELSE            reduce using rule 82 (statement -> variable EQUAL expression .)
    LESS            shift and go to state 182
    LESSEQUAL       shift and go to state 183
    EQUAL           shift and go to state 184
    DEQUAL          shift and go to state 185
    GREATEREQUAL    shift and go to state 186
    GREATER         shift and go to state 187

    relational-op                  shift and go to state 181

state 176

    (98) variable -> variable LBRACKET subscript-list . RBRACKET
    (102) subscript-list -> subscript-list . COMMA expression

    RBRACKET        shift and go to state 237
    COMMA           shift and go to state 238


state 177

    (101) subscript-list -> expression .
    (112) expression -> expression . relational-op additive-expression
    (114) relational-op -> . LESS
    (115) relational-op -> . LESSEQUAL
    (116) relational-op -> . EQUAL
    (117) relational-op -> . DEQUAL
    (118) relational-op -> . GREATEREQUAL
    (119) relational-op -> . GREATER

    RBRACKET        reduce using rule 101 (subscript-list -> expression .)
    COMMA           reduce using rule 101 (subscript-list -> expression .)
    LESS            shift and go to state 182
    LESSEQUAL       shift and go to state 183
    EQUAL           shift and go to state 184
    DEQUAL          shift and go to state 185
    GREATEREQUAL    shift and go to state 186
    GREATER         shift and go to state 187

    relational-op                  shift and go to state 181

state 178

    (99) variable -> variable COMMA fieldid .

    EQUAL           reduce using rule 99 (variable -> variable COMMA fieldid .)
    LBRACKET        reduce using rule 99 (variable -> variable COMMA fieldid .)
    COMMA           reduce using rule 99 (variable -> variable COMMA fieldid .)
    DO              reduce using rule 99 (variable -> variable COMMA fieldid .)


state 179

    (155) fieldid -> ID .

    EQUAL           reduce using rule 155 (fieldid -> ID .)
    LBRACKET        reduce using rule 155 (fieldid -> ID .)
    COMMA           reduce using rule 155 (fieldid -> ID .)
    DO              reduce using rule 155 (fieldid -> ID .)


state 180

    (84) statement -> IF expression THEN . statement
    (85) statement -> IF expression THEN . statement ELSE statement
    (81) statement -> . empty
    (82) statement -> . variable EQUAL expression
    (83) statement -> . BEGIN statement-list END statement
    (84) statement -> . IF expression THEN statement
    (85) statement -> . IF expression THEN statement ELSE statement
    (86) statement -> . CASE expression OF case-list END
    (87) statement -> . WHILE expression DO statement
    (88) statement -> . REPEAT statement-list UNTIL expression
    (89) statement -> . FOR varid EQUAL for-list DO statement
    (90) statement -> . procid
    (91) statement -> . procid LPAREN expression-list RPAREN
    (92) statement -> . GOTO label
    (93) statement -> . WITH record-variable-list DO statement
    (94) statement -> . label COLON statement
    (95) statement -> . WRITE LPAREN STRING RPAREN
    (96) statement -> . READ LPAREN ID RPAREN
    (157) empty -> .
    (97) variable -> . ID
    (98) variable -> . variable LBRACKET subscript-list RBRACKET
    (99) variable -> . variable COMMA fieldid
    (100) variable -> . variable
    (154) procid -> . ID
    (109) label -> . INTEGER

    BEGIN           shift and go to state 59
    IF              shift and go to state 64
    CASE            shift and go to state 65
    WHILE           shift and go to state 66
    REPEAT          shift and go to state 67
    FOR             shift and go to state 68
    GOTO            shift and go to state 70
    WITH            shift and go to state 72
    WRITE           shift and go to state 73
    READ            shift and go to state 74
    END             reduce using rule 157 (empty -> .)
    SEMICOLON       reduce using rule 157 (empty -> .)
    UNTIL           reduce using rule 157 (empty -> .)
    ELSE            reduce using rule 157 (empty -> .)
    ID              shift and go to state 75
    INTEGER         shift and go to state 76

    statement                      shift and go to state 239
    empty                          shift and go to state 62
    variable                       shift and go to state 63
    procid                         shift and go to state 69
    label                          shift and go to state 71

state 181

    (112) expression -> expression relational-op . additive-expression
    (120) additive-expression -> . additive-expression additive-op multiplicative-expression
    (121) additive-expression -> . multiplicative-expression
    (125) multiplicative-expression -> . multiplicative-expression multiplicative-op unary-expression
    (126) multiplicative-expression -> . unary-expression
    (132) unary-expression -> . unary-op unary-expression
    (133) unary-expression -> . primary-expression
    (134) unary-op -> . PLUS
    (135) unary-op -> . MINUS
    (136) unary-op -> . NOT
    (137) primary-expression -> . ID
    (138) primary-expression -> . NUMBER
    (139) primary-expression -> . INTEGER
    (140) primary-expression -> . REAL
    (141) primary-expression -> . STRING
    (142) primary-expression -> . NIL
    (143) primary-expression -> . funcid LPAREN expression-list RPAREN
    (144) primary-expression -> . LBRACKET element-list RBRACKET
    (145) primary-expression -> . LPAREN expression RPAREN
    (153) funcid -> . ID

    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    NOT             shift and go to state 126
    ID              shift and go to state 127
    NUMBER          shift and go to state 128
    INTEGER         shift and go to state 129
    REAL            shift and go to state 130
    STRING          shift and go to state 131
    NIL             shift and go to state 132
    LBRACKET        shift and go to state 135
    LPAREN          shift and go to state 134

    additive-expression            shift and go to state 240
    multiplicative-expression      shift and go to state 120
    unary-expression               shift and go to state 121
    unary-op                       shift and go to state 122
    primary-expression             shift and go to state 123
    funcid                         shift and go to state 133

state 182

    (114) relational-op -> LESS .

    PLUS            reduce using rule 114 (relational-op -> LESS .)
    MINUS           reduce using rule 114 (relational-op -> LESS .)
    NOT             reduce using rule 114 (relational-op -> LESS .)
    ID              reduce using rule 114 (relational-op -> LESS .)
    NUMBER          reduce using rule 114 (relational-op -> LESS .)
    INTEGER         reduce using rule 114 (relational-op -> LESS .)
    REAL            reduce using rule 114 (relational-op -> LESS .)
    STRING          reduce using rule 114 (relational-op -> LESS .)
    NIL             reduce using rule 114 (relational-op -> LESS .)
    LBRACKET        reduce using rule 114 (relational-op -> LESS .)
    LPAREN          reduce using rule 114 (relational-op -> LESS .)


state 183

    (115) relational-op -> LESSEQUAL .

    PLUS            reduce using rule 115 (relational-op -> LESSEQUAL .)
    MINUS           reduce using rule 115 (relational-op -> LESSEQUAL .)
    NOT             reduce using rule 115 (relational-op -> LESSEQUAL .)
    ID              reduce using rule 115 (relational-op -> LESSEQUAL .)
    NUMBER          reduce using rule 115 (relational-op -> LESSEQUAL .)
    INTEGER         reduce using rule 115 (relational-op -> LESSEQUAL .)
    REAL            reduce using rule 115 (relational-op -> LESSEQUAL .)
    STRING          reduce using rule 115 (relational-op -> LESSEQUAL .)
    NIL             reduce using rule 115 (relational-op -> LESSEQUAL .)
    LBRACKET        reduce using rule 115 (relational-op -> LESSEQUAL .)
    LPAREN          reduce using rule 115 (relational-op -> LESSEQUAL .)


state 184

    (116) relational-op -> EQUAL .

    PLUS            reduce using rule 116 (relational-op -> EQUAL .)
    MINUS           reduce using rule 116 (relational-op -> EQUAL .)
    NOT             reduce using rule 116 (relational-op -> EQUAL .)
    ID              reduce using rule 116 (relational-op -> EQUAL .)
    NUMBER          reduce using rule 116 (relational-op -> EQUAL .)
    INTEGER         reduce using rule 116 (relational-op -> EQUAL .)
    REAL            reduce using rule 116 (relational-op -> EQUAL .)
    STRING          reduce using rule 116 (relational-op -> EQUAL .)
    NIL             reduce using rule 116 (relational-op -> EQUAL .)
    LBRACKET        reduce using rule 116 (relational-op -> EQUAL .)
    LPAREN          reduce using rule 116 (relational-op -> EQUAL .)


state 185

    (117) relational-op -> DEQUAL .

    PLUS            reduce using rule 117 (relational-op -> DEQUAL .)
    MINUS           reduce using rule 117 (relational-op -> DEQUAL .)
    NOT             reduce using rule 117 (relational-op -> DEQUAL .)
    ID              reduce using rule 117 (relational-op -> DEQUAL .)
    NUMBER          reduce using rule 117 (relational-op -> DEQUAL .)
    INTEGER         reduce using rule 117 (relational-op -> DEQUAL .)
    REAL            reduce using rule 117 (relational-op -> DEQUAL .)
    STRING          reduce using rule 117 (relational-op -> DEQUAL .)
    NIL             reduce using rule 117 (relational-op -> DEQUAL .)
    LBRACKET        reduce using rule 117 (relational-op -> DEQUAL .)
    LPAREN          reduce using rule 117 (relational-op -> DEQUAL .)


state 186

    (118) relational-op -> GREATEREQUAL .

    PLUS            reduce using rule 118 (relational-op -> GREATEREQUAL .)
    MINUS           reduce using rule 118 (relational-op -> GREATEREQUAL .)
    NOT             reduce using rule 118 (relational-op -> GREATEREQUAL .)
    ID              reduce using rule 118 (relational-op -> GREATEREQUAL .)
    NUMBER          reduce using rule 118 (relational-op -> GREATEREQUAL .)
    INTEGER         reduce using rule 118 (relational-op -> GREATEREQUAL .)
    REAL            reduce using rule 118 (relational-op -> GREATEREQUAL .)
    STRING          reduce using rule 118 (relational-op -> GREATEREQUAL .)
    NIL             reduce using rule 118 (relational-op -> GREATEREQUAL .)
    LBRACKET        reduce using rule 118 (relational-op -> GREATEREQUAL .)
    LPAREN          reduce using rule 118 (relational-op -> GREATEREQUAL .)


state 187

    (119) relational-op -> GREATER .

    PLUS            reduce using rule 119 (relational-op -> GREATER .)
    MINUS           reduce using rule 119 (relational-op -> GREATER .)
    NOT             reduce using rule 119 (relational-op -> GREATER .)
    ID              reduce using rule 119 (relational-op -> GREATER .)
    NUMBER          reduce using rule 119 (relational-op -> GREATER .)
    INTEGER         reduce using rule 119 (relational-op -> GREATER .)
    REAL            reduce using rule 119 (relational-op -> GREATER .)
    STRING          reduce using rule 119 (relational-op -> GREATER .)
    NIL             reduce using rule 119 (relational-op -> GREATER .)
    LBRACKET        reduce using rule 119 (relational-op -> GREATER .)
    LPAREN          reduce using rule 119 (relational-op -> GREATER .)


state 188

    (120) additive-expression -> additive-expression additive-op . multiplicative-expression
    (125) multiplicative-expression -> . multiplicative-expression multiplicative-op unary-expression
    (126) multiplicative-expression -> . unary-expression
    (132) unary-expression -> . unary-op unary-expression
    (133) unary-expression -> . primary-expression
    (134) unary-op -> . PLUS
    (135) unary-op -> . MINUS
    (136) unary-op -> . NOT
    (137) primary-expression -> . ID
    (138) primary-expression -> . NUMBER
    (139) primary-expression -> . INTEGER
    (140) primary-expression -> . REAL
    (141) primary-expression -> . STRING
    (142) primary-expression -> . NIL
    (143) primary-expression -> . funcid LPAREN expression-list RPAREN
    (144) primary-expression -> . LBRACKET element-list RBRACKET
    (145) primary-expression -> . LPAREN expression RPAREN
    (153) funcid -> . ID

    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    NOT             shift and go to state 126
    ID              shift and go to state 127
    NUMBER          shift and go to state 128
    INTEGER         shift and go to state 129
    REAL            shift and go to state 130
    STRING          shift and go to state 131
    NIL             shift and go to state 132
    LBRACKET        shift and go to state 135
    LPAREN          shift and go to state 134

    multiplicative-expression      shift and go to state 241
    unary-expression               shift and go to state 121
    unary-op                       shift and go to state 122
    primary-expression             shift and go to state 123
    funcid                         shift and go to state 133

state 189

    (122) additive-op -> PLUS .

    PLUS            reduce using rule 122 (additive-op -> PLUS .)
    MINUS           reduce using rule 122 (additive-op -> PLUS .)
    NOT             reduce using rule 122 (additive-op -> PLUS .)
    ID              reduce using rule 122 (additive-op -> PLUS .)
    NUMBER          reduce using rule 122 (additive-op -> PLUS .)
    INTEGER         reduce using rule 122 (additive-op -> PLUS .)
    REAL            reduce using rule 122 (additive-op -> PLUS .)
    STRING          reduce using rule 122 (additive-op -> PLUS .)
    NIL             reduce using rule 122 (additive-op -> PLUS .)
    LBRACKET        reduce using rule 122 (additive-op -> PLUS .)
    LPAREN          reduce using rule 122 (additive-op -> PLUS .)


state 190

    (123) additive-op -> MINUS .

    PLUS            reduce using rule 123 (additive-op -> MINUS .)
    MINUS           reduce using rule 123 (additive-op -> MINUS .)
    NOT             reduce using rule 123 (additive-op -> MINUS .)
    ID              reduce using rule 123 (additive-op -> MINUS .)
    NUMBER          reduce using rule 123 (additive-op -> MINUS .)
    INTEGER         reduce using rule 123 (additive-op -> MINUS .)
    REAL            reduce using rule 123 (additive-op -> MINUS .)
    STRING          reduce using rule 123 (additive-op -> MINUS .)
    NIL             reduce using rule 123 (additive-op -> MINUS .)
    LBRACKET        reduce using rule 123 (additive-op -> MINUS .)
    LPAREN          reduce using rule 123 (additive-op -> MINUS .)


state 191

    (124) additive-op -> OR .

    PLUS            reduce using rule 124 (additive-op -> OR .)
    MINUS           reduce using rule 124 (additive-op -> OR .)
    NOT             reduce using rule 124 (additive-op -> OR .)
    ID              reduce using rule 124 (additive-op -> OR .)
    NUMBER          reduce using rule 124 (additive-op -> OR .)
    INTEGER         reduce using rule 124 (additive-op -> OR .)
    REAL            reduce using rule 124 (additive-op -> OR .)
    STRING          reduce using rule 124 (additive-op -> OR .)
    NIL             reduce using rule 124 (additive-op -> OR .)
    LBRACKET        reduce using rule 124 (additive-op -> OR .)
    LPAREN          reduce using rule 124 (additive-op -> OR .)


state 192

    (125) multiplicative-expression -> multiplicative-expression multiplicative-op . unary-expression
    (132) unary-expression -> . unary-op unary-expression
    (133) unary-expression -> . primary-expression
    (134) unary-op -> . PLUS
    (135) unary-op -> . MINUS
    (136) unary-op -> . NOT
    (137) primary-expression -> . ID
    (138) primary-expression -> . NUMBER
    (139) primary-expression -> . INTEGER
    (140) primary-expression -> . REAL
    (141) primary-expression -> . STRING
    (142) primary-expression -> . NIL
    (143) primary-expression -> . funcid LPAREN expression-list RPAREN
    (144) primary-expression -> . LBRACKET element-list RBRACKET
    (145) primary-expression -> . LPAREN expression RPAREN
    (153) funcid -> . ID

    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    NOT             shift and go to state 126
    ID              shift and go to state 127
    NUMBER          shift and go to state 128
    INTEGER         shift and go to state 129
    REAL            shift and go to state 130
    STRING          shift and go to state 131
    NIL             shift and go to state 132
    LBRACKET        shift and go to state 135
    LPAREN          shift and go to state 134

    unary-expression               shift and go to state 242
    unary-op                       shift and go to state 122
    primary-expression             shift and go to state 123
    funcid                         shift and go to state 133

state 193

    (127) multiplicative-op -> TIMES .

    PLUS            reduce using rule 127 (multiplicative-op -> TIMES .)
    MINUS           reduce using rule 127 (multiplicative-op -> TIMES .)
    NOT             reduce using rule 127 (multiplicative-op -> TIMES .)
    ID              reduce using rule 127 (multiplicative-op -> TIMES .)
    NUMBER          reduce using rule 127 (multiplicative-op -> TIMES .)
    INTEGER         reduce using rule 127 (multiplicative-op -> TIMES .)
    REAL            reduce using rule 127 (multiplicative-op -> TIMES .)
    STRING          reduce using rule 127 (multiplicative-op -> TIMES .)
    NIL             reduce using rule 127 (multiplicative-op -> TIMES .)
    LBRACKET        reduce using rule 127 (multiplicative-op -> TIMES .)
    LPAREN          reduce using rule 127 (multiplicative-op -> TIMES .)


state 194

    (128) multiplicative-op -> DIVIDE .

    PLUS            reduce using rule 128 (multiplicative-op -> DIVIDE .)
    MINUS           reduce using rule 128 (multiplicative-op -> DIVIDE .)
    NOT             reduce using rule 128 (multiplicative-op -> DIVIDE .)
    ID              reduce using rule 128 (multiplicative-op -> DIVIDE .)
    NUMBER          reduce using rule 128 (multiplicative-op -> DIVIDE .)
    INTEGER         reduce using rule 128 (multiplicative-op -> DIVIDE .)
    REAL            reduce using rule 128 (multiplicative-op -> DIVIDE .)
    STRING          reduce using rule 128 (multiplicative-op -> DIVIDE .)
    NIL             reduce using rule 128 (multiplicative-op -> DIVIDE .)
    LBRACKET        reduce using rule 128 (multiplicative-op -> DIVIDE .)
    LPAREN          reduce using rule 128 (multiplicative-op -> DIVIDE .)


state 195

    (129) multiplicative-op -> DIV .

    PLUS            reduce using rule 129 (multiplicative-op -> DIV .)
    MINUS           reduce using rule 129 (multiplicative-op -> DIV .)
    NOT             reduce using rule 129 (multiplicative-op -> DIV .)
    ID              reduce using rule 129 (multiplicative-op -> DIV .)
    NUMBER          reduce using rule 129 (multiplicative-op -> DIV .)
    INTEGER         reduce using rule 129 (multiplicative-op -> DIV .)
    REAL            reduce using rule 129 (multiplicative-op -> DIV .)
    STRING          reduce using rule 129 (multiplicative-op -> DIV .)
    NIL             reduce using rule 129 (multiplicative-op -> DIV .)
    LBRACKET        reduce using rule 129 (multiplicative-op -> DIV .)
    LPAREN          reduce using rule 129 (multiplicative-op -> DIV .)


state 196

    (130) multiplicative-op -> MOD .

    PLUS            reduce using rule 130 (multiplicative-op -> MOD .)
    MINUS           reduce using rule 130 (multiplicative-op -> MOD .)
    NOT             reduce using rule 130 (multiplicative-op -> MOD .)
    ID              reduce using rule 130 (multiplicative-op -> MOD .)
    NUMBER          reduce using rule 130 (multiplicative-op -> MOD .)
    INTEGER         reduce using rule 130 (multiplicative-op -> MOD .)
    REAL            reduce using rule 130 (multiplicative-op -> MOD .)
    STRING          reduce using rule 130 (multiplicative-op -> MOD .)
    NIL             reduce using rule 130 (multiplicative-op -> MOD .)
    LBRACKET        reduce using rule 130 (multiplicative-op -> MOD .)
    LPAREN          reduce using rule 130 (multiplicative-op -> MOD .)


state 197

    (131) multiplicative-op -> AND .

    PLUS            reduce using rule 131 (multiplicative-op -> AND .)
    MINUS           reduce using rule 131 (multiplicative-op -> AND .)
    NOT             reduce using rule 131 (multiplicative-op -> AND .)
    ID              reduce using rule 131 (multiplicative-op -> AND .)
    NUMBER          reduce using rule 131 (multiplicative-op -> AND .)
    INTEGER         reduce using rule 131 (multiplicative-op -> AND .)
    REAL            reduce using rule 131 (multiplicative-op -> AND .)
    STRING          reduce using rule 131 (multiplicative-op -> AND .)
    NIL             reduce using rule 131 (multiplicative-op -> AND .)
    LBRACKET        reduce using rule 131 (multiplicative-op -> AND .)
    LPAREN          reduce using rule 131 (multiplicative-op -> AND .)


state 198

    (132) unary-expression -> unary-op unary-expression .

    TIMES           reduce using rule 132 (unary-expression -> unary-op unary-expression .)
    DIVIDE          reduce using rule 132 (unary-expression -> unary-op unary-expression .)
    DIV             reduce using rule 132 (unary-expression -> unary-op unary-expression .)
    MOD             reduce using rule 132 (unary-expression -> unary-op unary-expression .)
    AND             reduce using rule 132 (unary-expression -> unary-op unary-expression .)
    PLUS            reduce using rule 132 (unary-expression -> unary-op unary-expression .)
    MINUS           reduce using rule 132 (unary-expression -> unary-op unary-expression .)
    OR              reduce using rule 132 (unary-expression -> unary-op unary-expression .)
    THEN            reduce using rule 132 (unary-expression -> unary-op unary-expression .)
    LESS            reduce using rule 132 (unary-expression -> unary-op unary-expression .)
    LESSEQUAL       reduce using rule 132 (unary-expression -> unary-op unary-expression .)
    EQUAL           reduce using rule 132 (unary-expression -> unary-op unary-expression .)
    DEQUAL          reduce using rule 132 (unary-expression -> unary-op unary-expression .)
    GREATEREQUAL    reduce using rule 132 (unary-expression -> unary-op unary-expression .)
    GREATER         reduce using rule 132 (unary-expression -> unary-op unary-expression .)
    OF              reduce using rule 132 (unary-expression -> unary-op unary-expression .)
    DO              reduce using rule 132 (unary-expression -> unary-op unary-expression .)
    END             reduce using rule 132 (unary-expression -> unary-op unary-expression .)
    SEMICOLON       reduce using rule 132 (unary-expression -> unary-op unary-expression .)
    UNTIL           reduce using rule 132 (unary-expression -> unary-op unary-expression .)
    ELSE            reduce using rule 132 (unary-expression -> unary-op unary-expression .)
    RBRACKET        reduce using rule 132 (unary-expression -> unary-op unary-expression .)
    COMMA           reduce using rule 132 (unary-expression -> unary-op unary-expression .)
    RPAREN          reduce using rule 132 (unary-expression -> unary-op unary-expression .)
    DOT             reduce using rule 132 (unary-expression -> unary-op unary-expression .)
    TO              reduce using rule 132 (unary-expression -> unary-op unary-expression .)
    DOWNTO          reduce using rule 132 (unary-expression -> unary-op unary-expression .)


state 199

    (143) primary-expression -> funcid LPAREN . expression-list RPAREN
    (107) expression-list -> . expression
    (108) expression-list -> . expression-list COMMA expression
    (112) expression -> . expression relational-op additive-expression
    (113) expression -> . additive-expression
    (120) additive-expression -> . additive-expression additive-op multiplicative-expression
    (121) additive-expression -> . multiplicative-expression
    (125) multiplicative-expression -> . multiplicative-expression multiplicative-op unary-expression
    (126) multiplicative-expression -> . unary-expression
    (132) unary-expression -> . unary-op unary-expression
    (133) unary-expression -> . primary-expression
    (134) unary-op -> . PLUS
    (135) unary-op -> . MINUS
    (136) unary-op -> . NOT
    (137) primary-expression -> . ID
    (138) primary-expression -> . NUMBER
    (139) primary-expression -> . INTEGER
    (140) primary-expression -> . REAL
    (141) primary-expression -> . STRING
    (142) primary-expression -> . NIL
    (143) primary-expression -> . funcid LPAREN expression-list RPAREN
    (144) primary-expression -> . LBRACKET element-list RBRACKET
    (145) primary-expression -> . LPAREN expression RPAREN
    (153) funcid -> . ID

    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    NOT             shift and go to state 126
    ID              shift and go to state 127
    NUMBER          shift and go to state 128
    INTEGER         shift and go to state 129
    REAL            shift and go to state 130
    STRING          shift and go to state 131
    NIL             shift and go to state 132
    LBRACKET        shift and go to state 135
    LPAREN          shift and go to state 134

    funcid                         shift and go to state 133
    expression-list                shift and go to state 243
    expression                     shift and go to state 210
    additive-expression            shift and go to state 119
    multiplicative-expression      shift and go to state 120
    unary-expression               shift and go to state 121
    unary-op                       shift and go to state 122
    primary-expression             shift and go to state 123

state 200

    (145) primary-expression -> LPAREN expression . RPAREN
    (112) expression -> expression . relational-op additive-expression
    (114) relational-op -> . LESS
    (115) relational-op -> . LESSEQUAL
    (116) relational-op -> . EQUAL
    (117) relational-op -> . DEQUAL
    (118) relational-op -> . GREATEREQUAL
    (119) relational-op -> . GREATER

    RPAREN          shift and go to state 244
    LESS            shift and go to state 182
    LESSEQUAL       shift and go to state 183
    EQUAL           shift and go to state 184
    DEQUAL          shift and go to state 185
    GREATEREQUAL    shift and go to state 186
    GREATER         shift and go to state 187

    relational-op                  shift and go to state 181

state 201

    (144) primary-expression -> LBRACKET element-list . RBRACKET
    (148) element-list -> element-list . COMMA element

    RBRACKET        shift and go to state 245
    COMMA           shift and go to state 246


state 202

    (146) element-list -> empty .

    RBRACKET        reduce using rule 146 (element-list -> empty .)
    COMMA           reduce using rule 146 (element-list -> empty .)


state 203

    (147) element-list -> element .

    RBRACKET        reduce using rule 147 (element-list -> element .)
    COMMA           reduce using rule 147 (element-list -> element .)


state 204

    (149) element -> expression .
    (150) element -> expression . DOT DOT DOT expression
    (112) expression -> expression . relational-op additive-expression
    (114) relational-op -> . LESS
    (115) relational-op -> . LESSEQUAL
    (116) relational-op -> . EQUAL
    (117) relational-op -> . DEQUAL
    (118) relational-op -> . GREATEREQUAL
    (119) relational-op -> . GREATER

    RBRACKET        reduce using rule 149 (element -> expression .)
    COMMA           reduce using rule 149 (element -> expression .)
    DOT             shift and go to state 247
    LESS            shift and go to state 182
    LESSEQUAL       shift and go to state 183
    EQUAL           shift and go to state 184
    DEQUAL          shift and go to state 185
    GREATEREQUAL    shift and go to state 186
    GREATER         shift and go to state 187

    relational-op                  shift and go to state 181

state 205

    (86) statement -> CASE expression OF . case-list END
    (103) case-list -> . case-label-list COLON statement
    (104) case-list -> . case-list SEMICOLON case-label-list COLON statement
    (62) case-label-list -> . constant
    (63) case-label-list -> . case-label-list COMMA constant
    (27) constant -> . INTEGER
    (28) constant -> . NUMBER
    (29) constant -> . REAL
    (30) constant -> . STRING
    (31) constant -> . constid
    (32) constant -> . PLUS constid
    (151) constid -> . ID

    INTEGER         shift and go to state 98
    NUMBER          shift and go to state 39
    REAL            shift and go to state 40
    STRING          shift and go to state 41
    PLUS            shift and go to state 43
    ID              shift and go to state 93

    case-list                      shift and go to state 248
    case-label-list                shift and go to state 249
    constant                       shift and go to state 250
    constid                        shift and go to state 42

state 206

    (87) statement -> WHILE expression DO . statement
    (81) statement -> . empty
    (82) statement -> . variable EQUAL expression
    (83) statement -> . BEGIN statement-list END statement
    (84) statement -> . IF expression THEN statement
    (85) statement -> . IF expression THEN statement ELSE statement
    (86) statement -> . CASE expression OF case-list END
    (87) statement -> . WHILE expression DO statement
    (88) statement -> . REPEAT statement-list UNTIL expression
    (89) statement -> . FOR varid EQUAL for-list DO statement
    (90) statement -> . procid
    (91) statement -> . procid LPAREN expression-list RPAREN
    (92) statement -> . GOTO label
    (93) statement -> . WITH record-variable-list DO statement
    (94) statement -> . label COLON statement
    (95) statement -> . WRITE LPAREN STRING RPAREN
    (96) statement -> . READ LPAREN ID RPAREN
    (157) empty -> .
    (97) variable -> . ID
    (98) variable -> . variable LBRACKET subscript-list RBRACKET
    (99) variable -> . variable COMMA fieldid
    (100) variable -> . variable
    (154) procid -> . ID
    (109) label -> . INTEGER

    BEGIN           shift and go to state 59
    IF              shift and go to state 64
    CASE            shift and go to state 65
    WHILE           shift and go to state 66
    REPEAT          shift and go to state 67
    FOR             shift and go to state 68
    GOTO            shift and go to state 70
    WITH            shift and go to state 72
    WRITE           shift and go to state 73
    READ            shift and go to state 74
    END             reduce using rule 157 (empty -> .)
    SEMICOLON       reduce using rule 157 (empty -> .)
    UNTIL           reduce using rule 157 (empty -> .)
    ELSE            reduce using rule 157 (empty -> .)
    ID              shift and go to state 75
    INTEGER         shift and go to state 76

    statement                      shift and go to state 251
    empty                          shift and go to state 62
    variable                       shift and go to state 63
    procid                         shift and go to state 69
    label                          shift and go to state 71

state 207

    (88) statement -> REPEAT statement-list UNTIL . expression
    (112) expression -> . expression relational-op additive-expression
    (113) expression -> . additive-expression
    (120) additive-expression -> . additive-expression additive-op multiplicative-expression
    (121) additive-expression -> . multiplicative-expression
    (125) multiplicative-expression -> . multiplicative-expression multiplicative-op unary-expression
    (126) multiplicative-expression -> . unary-expression
    (132) unary-expression -> . unary-op unary-expression
    (133) unary-expression -> . primary-expression
    (134) unary-op -> . PLUS
    (135) unary-op -> . MINUS
    (136) unary-op -> . NOT
    (137) primary-expression -> . ID
    (138) primary-expression -> . NUMBER
    (139) primary-expression -> . INTEGER
    (140) primary-expression -> . REAL
    (141) primary-expression -> . STRING
    (142) primary-expression -> . NIL
    (143) primary-expression -> . funcid LPAREN expression-list RPAREN
    (144) primary-expression -> . LBRACKET element-list RBRACKET
    (145) primary-expression -> . LPAREN expression RPAREN
    (153) funcid -> . ID

    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    NOT             shift and go to state 126
    ID              shift and go to state 127
    NUMBER          shift and go to state 128
    INTEGER         shift and go to state 129
    REAL            shift and go to state 130
    STRING          shift and go to state 131
    NIL             shift and go to state 132
    LBRACKET        shift and go to state 135
    LPAREN          shift and go to state 134

    expression                     shift and go to state 252
    additive-expression            shift and go to state 119
    multiplicative-expression      shift and go to state 120
    unary-expression               shift and go to state 121
    unary-op                       shift and go to state 122
    primary-expression             shift and go to state 123
    funcid                         shift and go to state 133

state 208

    (89) statement -> FOR varid EQUAL . for-list DO statement
    (105) for-list -> . expression TO expression
    (106) for-list -> . expression DOWNTO expression
    (112) expression -> . expression relational-op additive-expression
    (113) expression -> . additive-expression
    (120) additive-expression -> . additive-expression additive-op multiplicative-expression
    (121) additive-expression -> . multiplicative-expression
    (125) multiplicative-expression -> . multiplicative-expression multiplicative-op unary-expression
    (126) multiplicative-expression -> . unary-expression
    (132) unary-expression -> . unary-op unary-expression
    (133) unary-expression -> . primary-expression
    (134) unary-op -> . PLUS
    (135) unary-op -> . MINUS
    (136) unary-op -> . NOT
    (137) primary-expression -> . ID
    (138) primary-expression -> . NUMBER
    (139) primary-expression -> . INTEGER
    (140) primary-expression -> . REAL
    (141) primary-expression -> . STRING
    (142) primary-expression -> . NIL
    (143) primary-expression -> . funcid LPAREN expression-list RPAREN
    (144) primary-expression -> . LBRACKET element-list RBRACKET
    (145) primary-expression -> . LPAREN expression RPAREN
    (153) funcid -> . ID

    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    NOT             shift and go to state 126
    ID              shift and go to state 127
    NUMBER          shift and go to state 128
    INTEGER         shift and go to state 129
    REAL            shift and go to state 130
    STRING          shift and go to state 131
    NIL             shift and go to state 132
    LBRACKET        shift and go to state 135
    LPAREN          shift and go to state 134

    for-list                       shift and go to state 253
    expression                     shift and go to state 254
    additive-expression            shift and go to state 119
    multiplicative-expression      shift and go to state 120
    unary-expression               shift and go to state 121
    unary-op                       shift and go to state 122
    primary-expression             shift and go to state 123
    funcid                         shift and go to state 133

state 209

    (91) statement -> procid LPAREN expression-list . RPAREN
    (108) expression-list -> expression-list . COMMA expression

    RPAREN          shift and go to state 255
    COMMA           shift and go to state 256


state 210

    (107) expression-list -> expression .
    (112) expression -> expression . relational-op additive-expression
    (114) relational-op -> . LESS
    (115) relational-op -> . LESSEQUAL
    (116) relational-op -> . EQUAL
    (117) relational-op -> . DEQUAL
    (118) relational-op -> . GREATEREQUAL
    (119) relational-op -> . GREATER

    RPAREN          reduce using rule 107 (expression-list -> expression .)
    COMMA           reduce using rule 107 (expression-list -> expression .)
    LESS            shift and go to state 182
    LESSEQUAL       shift and go to state 183
    EQUAL           shift and go to state 184
    DEQUAL          shift and go to state 185
    GREATEREQUAL    shift and go to state 186
    GREATER         shift and go to state 187

    relational-op                  shift and go to state 181

state 211

    (94) statement -> label COLON statement .

    END             reduce using rule 94 (statement -> label COLON statement .)
    SEMICOLON       reduce using rule 94 (statement -> label COLON statement .)
    UNTIL           reduce using rule 94 (statement -> label COLON statement .)
    ELSE            reduce using rule 94 (statement -> label COLON statement .)


state 212

    (93) statement -> WITH record-variable-list DO . statement
    (81) statement -> . empty
    (82) statement -> . variable EQUAL expression
    (83) statement -> . BEGIN statement-list END statement
    (84) statement -> . IF expression THEN statement
    (85) statement -> . IF expression THEN statement ELSE statement
    (86) statement -> . CASE expression OF case-list END
    (87) statement -> . WHILE expression DO statement
    (88) statement -> . REPEAT statement-list UNTIL expression
    (89) statement -> . FOR varid EQUAL for-list DO statement
    (90) statement -> . procid
    (91) statement -> . procid LPAREN expression-list RPAREN
    (92) statement -> . GOTO label
    (93) statement -> . WITH record-variable-list DO statement
    (94) statement -> . label COLON statement
    (95) statement -> . WRITE LPAREN STRING RPAREN
    (96) statement -> . READ LPAREN ID RPAREN
    (157) empty -> .
    (97) variable -> . ID
    (98) variable -> . variable LBRACKET subscript-list RBRACKET
    (99) variable -> . variable COMMA fieldid
    (100) variable -> . variable
    (154) procid -> . ID
    (109) label -> . INTEGER

    BEGIN           shift and go to state 59
    IF              shift and go to state 64
    CASE            shift and go to state 65
    WHILE           shift and go to state 66
    REPEAT          shift and go to state 67
    FOR             shift and go to state 68
    GOTO            shift and go to state 70
    WITH            shift and go to state 72
    WRITE           shift and go to state 73
    READ            shift and go to state 74
    END             reduce using rule 157 (empty -> .)
    SEMICOLON       reduce using rule 157 (empty -> .)
    UNTIL           reduce using rule 157 (empty -> .)
    ELSE            reduce using rule 157 (empty -> .)
    ID              shift and go to state 75
    INTEGER         shift and go to state 76

    statement                      shift and go to state 257
    empty                          shift and go to state 62
    variable                       shift and go to state 63
    procid                         shift and go to state 69
    label                          shift and go to state 71

state 213

    (111) record-variable-list -> record-variable-list COMMA . variable
    (97) variable -> . ID
    (98) variable -> . variable LBRACKET subscript-list RBRACKET
    (99) variable -> . variable COMMA fieldid
    (100) variable -> . variable

    ID              shift and go to state 146

    variable                       shift and go to state 258

state 214

    (95) statement -> WRITE LPAREN STRING . RPAREN

    RPAREN          shift and go to state 259


state 215

    (96) statement -> READ LPAREN ID . RPAREN

    RPAREN          shift and go to state 260


state 216

    (39) structured-type -> ARRAY LBRACKET index-list RBRACKET . OF type

    OF              shift and go to state 261


state 217

    (45) index-list -> index-list COMMA . simple-type
    (36) simple-type -> . LPAREN identifier-list RPAREN
    (37) simple-type -> . constant
    (38) simple-type -> . typeid
    (27) constant -> . INTEGER
    (28) constant -> . NUMBER
    (29) constant -> . REAL
    (30) constant -> . STRING
    (31) constant -> . constid
    (32) constant -> . PLUS constid
    (152) typeid -> . ID
    (151) constid -> . ID

    LPAREN          shift and go to state 31
    INTEGER         shift and go to state 98
    NUMBER          shift and go to state 39
    REAL            shift and go to state 40
    STRING          shift and go to state 41
    PLUS            shift and go to state 43
    ID              shift and go to state 8

    simple-type                    shift and go to state 262
    constant                       shift and go to state 19
    typeid                         shift and go to state 152
    constid                        shift and go to state 42

state 218

    (47) field-list -> fixed-part SEMICOLON variant-part .

    END             reduce using rule 47 (field-list -> fixed-part SEMICOLON variant-part .)
    RPAREN          reduce using rule 47 (field-list -> fixed-part SEMICOLON variant-part .)


state 219

    (50) fixed-part -> fixed-part SEMICOLON record-field .

    SEMICOLON       reduce using rule 50 (fixed-part -> fixed-part SEMICOLON record-field .)
    END             reduce using rule 50 (fixed-part -> fixed-part SEMICOLON record-field .)
    RPAREN          reduce using rule 50 (fixed-part -> fixed-part SEMICOLON record-field .)


state 220

    (55) variant-part -> CASE tag-field OF . variant-list
    (58) variant-list -> . variant
    (59) variant-list -> . variant-list SEMICOLON variant
    (60) variant -> . empty
    (61) variant -> . case-label-list COLON LPAREN field-list RPAREN
    (157) empty -> .
    (62) case-label-list -> . constant
    (63) case-label-list -> . case-label-list COMMA constant
    (27) constant -> . INTEGER
    (28) constant -> . NUMBER
    (29) constant -> . REAL
    (30) constant -> . STRING
    (31) constant -> . constid
    (32) constant -> . PLUS constid
    (151) constid -> . ID

    SEMICOLON       reduce using rule 157 (empty -> .)
    END             reduce using rule 157 (empty -> .)
    RPAREN          reduce using rule 157 (empty -> .)
    INTEGER         shift and go to state 98
    NUMBER          shift and go to state 39
    REAL            shift and go to state 40
    STRING          shift and go to state 41
    PLUS            shift and go to state 43
    ID              shift and go to state 93

    variant-list                   shift and go to state 263
    variant                        shift and go to state 264
    empty                          shift and go to state 265
    case-label-list                shift and go to state 266
    constant                       shift and go to state 250
    constid                        shift and go to state 42

state 221

    (57) tag-field -> ID COLON . typeid
    (152) typeid -> . ID

    ID              shift and go to state 267

    typeid                         shift and go to state 268

state 222

    (52) record-field -> fieldid-list COLON type .

    SEMICOLON       reduce using rule 52 (record-field -> fieldid-list COLON type .)
    END             reduce using rule 52 (record-field -> fieldid-list COLON type .)
    RPAREN          reduce using rule 52 (record-field -> fieldid-list COLON type .)


state 223

    (54) fieldid-list -> fieldid-list COMMA ID .

    COLON           reduce using rule 54 (fieldid-list -> fieldid-list COMMA ID .)
    COMMA           reduce using rule 54 (fieldid-list -> fieldid-list COMMA ID .)


state 224

    (66) proc-or-func -> PROCEDURE ID parameters SEMICOLON . block-or-forward
    (68) block-or-forward -> . block
    (69) block-or-forward -> . FORWARD
    (6) block -> . block1
    (7) block -> . label-declaration SEMICOLON block1
    (8) block1 -> . block2
    (9) block1 -> . constant-declaration SEMICOLON block2
    (17) label-declaration -> . label INTEGER
    (18) label-declaration -> . label-declaration COMMA INTEGER
    (10) block2 -> . block3
    (11) block2 -> . type-declaration SEMICOLON block3
    (19) constant-declaration -> . CONST ID EQUAL constant
    (20) constant-declaration -> . constant-declaration SEMICOLON ID EQUAL constant
    (109) label -> . INTEGER
    (12) block3 -> . block4
    (13) block3 -> . variable-declaration SEMICOLON block4
    (21) type-declaration -> . type ID EQUAL type
    (22) type-declaration -> . type-declaration SEMICOLON ID EQUAL type
    (14) block4 -> . block5
    (15) block4 -> . proc-and-func-declaration SEMICOLON block5
    (23) variable-declaration -> . VAR variableid-list COLON type
    (24) variable-declaration -> . variable-declaration SEMICOLON variableid-list COLON type
    (33) type -> . simple-type
    (34) type -> . structured-type
    (35) type -> . typeid
    (16) block5 -> . BEGIN statement-list END
    (64) proc-and-func-declaration -> . proc-or-func
    (65) proc-and-func-declaration -> . proc-and-func-declaration SEMICOLON proc-or-func
    (36) simple-type -> . LPAREN identifier-list RPAREN
    (37) simple-type -> . constant
    (38) simple-type -> . typeid
    (39) structured-type -> . ARRAY LBRACKET index-list RBRACKET OF type
    (40) structured-type -> . RECORD field-list END
    (41) structured-type -> . SET OF simple-type
    (42) structured-type -> . FILE OF type
    (43) structured-type -> . PACKED structured-type
    (152) typeid -> . ID
    (66) proc-or-func -> . PROCEDURE ID parameters SEMICOLON block-or-forward
    (67) proc-or-func -> . FUNCTION ID parameters COLON typeid SEMICOLON block-or-forward
    (27) constant -> . INTEGER
    (28) constant -> . NUMBER
    (29) constant -> . REAL
    (30) constant -> . STRING
    (31) constant -> . constid
    (32) constant -> . PLUS constid
    (151) constid -> . ID

    FORWARD         shift and go to state 271
    CONST           shift and go to state 18
    INTEGER         shift and go to state 15
    VAR             shift and go to state 25
    BEGIN           shift and go to state 29
    LPAREN          shift and go to state 31
    ARRAY           shift and go to state 32
    RECORD          shift and go to state 33
    SET             shift and go to state 34
    FILE            shift and go to state 35
    PACKED          shift and go to state 36
    ID              shift and go to state 8
    PROCEDURE       shift and go to state 37
    FUNCTION        shift and go to state 38
    NUMBER          shift and go to state 39
    REAL            shift and go to state 40
    STRING          shift and go to state 41
    PLUS            shift and go to state 43

    block-or-forward               shift and go to state 269
    block                          shift and go to state 270
    block1                         shift and go to state 10
    label-declaration              shift and go to state 11
    block2                         shift and go to state 12
    constant-declaration           shift and go to state 13
    label                          shift and go to state 14
    block3                         shift and go to state 16
    type-declaration               shift and go to state 17
    constant                       shift and go to state 19
    block4                         shift and go to state 20
    variable-declaration           shift and go to state 21
    type                           shift and go to state 22
    block5                         shift and go to state 23
    proc-and-func-declaration      shift and go to state 24
    simple-type                    shift and go to state 26
    structured-type                shift and go to state 27
    typeid                         shift and go to state 28
    proc-or-func                   shift and go to state 30
    constid                        shift and go to state 42

state 225

    (70) parameters -> LPAREN formal-parameter-list . RPAREN
    (72) formal-parameter-list -> formal-parameter-list . SEMICOLON formal-parameter-section

    RPAREN          shift and go to state 272
    SEMICOLON       shift and go to state 273


state 226

    (71) formal-parameter-list -> formal-parameter-section .

    RPAREN          reduce using rule 71 (formal-parameter-list -> formal-parameter-section .)
    SEMICOLON       reduce using rule 71 (formal-parameter-list -> formal-parameter-section .)


state 227

    (73) formal-parameter-section -> parameterid-list . COLON typeid
    (78) parameterid-list -> parameterid-list . COMMA ID

    COLON           shift and go to state 274
    COMMA           shift and go to state 275


state 228

    (74) formal-parameter-section -> VAR . parameterid-list COLON typeid
    (77) parameterid-list -> . ID
    (78) parameterid-list -> . parameterid-list COMMA ID

    ID              shift and go to state 230

    parameterid-list               shift and go to state 276

state 229

    (75) formal-parameter-section -> PROCEDURE . ID parameters

    ID              shift and go to state 277


state 230

    (77) parameterid-list -> ID .

    COLON           reduce using rule 77 (parameterid-list -> ID .)
    COMMA           reduce using rule 77 (parameterid-list -> ID .)


state 231

    (76) formal-parameter-section -> FUNCTION . ID parameters COLON typeid

    ID              shift and go to state 278


state 232

    (67) proc-or-func -> FUNCTION ID parameters COLON . typeid SEMICOLON block-or-forward
    (152) typeid -> . ID

    ID              shift and go to state 267

    typeid                         shift and go to state 279

state 233

    (20) constant-declaration -> constant-declaration SEMICOLON ID EQUAL constant .

    SEMICOLON       reduce using rule 20 (constant-declaration -> constant-declaration SEMICOLON ID EQUAL constant .)


state 234

    (22) type-declaration -> type-declaration SEMICOLON ID EQUAL type .

    SEMICOLON       reduce using rule 22 (type-declaration -> type-declaration SEMICOLON ID EQUAL type .)


state 235

    (24) variable-declaration -> variable-declaration SEMICOLON variableid-list COLON type .

    SEMICOLON       reduce using rule 24 (variable-declaration -> variable-declaration SEMICOLON variableid-list COLON type .)


state 236

    (83) statement -> BEGIN statement-list END statement .

    END             reduce using rule 83 (statement -> BEGIN statement-list END statement .)
    SEMICOLON       reduce using rule 83 (statement -> BEGIN statement-list END statement .)
    UNTIL           reduce using rule 83 (statement -> BEGIN statement-list END statement .)
    ELSE            reduce using rule 83 (statement -> BEGIN statement-list END statement .)


state 237

    (98) variable -> variable LBRACKET subscript-list RBRACKET .

    EQUAL           reduce using rule 98 (variable -> variable LBRACKET subscript-list RBRACKET .)
    LBRACKET        reduce using rule 98 (variable -> variable LBRACKET subscript-list RBRACKET .)
    COMMA           reduce using rule 98 (variable -> variable LBRACKET subscript-list RBRACKET .)
    DO              reduce using rule 98 (variable -> variable LBRACKET subscript-list RBRACKET .)


state 238

    (102) subscript-list -> subscript-list COMMA . expression
    (112) expression -> . expression relational-op additive-expression
    (113) expression -> . additive-expression
    (120) additive-expression -> . additive-expression additive-op multiplicative-expression
    (121) additive-expression -> . multiplicative-expression
    (125) multiplicative-expression -> . multiplicative-expression multiplicative-op unary-expression
    (126) multiplicative-expression -> . unary-expression
    (132) unary-expression -> . unary-op unary-expression
    (133) unary-expression -> . primary-expression
    (134) unary-op -> . PLUS
    (135) unary-op -> . MINUS
    (136) unary-op -> . NOT
    (137) primary-expression -> . ID
    (138) primary-expression -> . NUMBER
    (139) primary-expression -> . INTEGER
    (140) primary-expression -> . REAL
    (141) primary-expression -> . STRING
    (142) primary-expression -> . NIL
    (143) primary-expression -> . funcid LPAREN expression-list RPAREN
    (144) primary-expression -> . LBRACKET element-list RBRACKET
    (145) primary-expression -> . LPAREN expression RPAREN
    (153) funcid -> . ID

    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    NOT             shift and go to state 126
    ID              shift and go to state 127
    NUMBER          shift and go to state 128
    INTEGER         shift and go to state 129
    REAL            shift and go to state 130
    STRING          shift and go to state 131
    NIL             shift and go to state 132
    LBRACKET        shift and go to state 135
    LPAREN          shift and go to state 134

    expression                     shift and go to state 280
    additive-expression            shift and go to state 119
    multiplicative-expression      shift and go to state 120
    unary-expression               shift and go to state 121
    unary-op                       shift and go to state 122
    primary-expression             shift and go to state 123
    funcid                         shift and go to state 133

state 239

    (84) statement -> IF expression THEN statement .
    (85) statement -> IF expression THEN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    END             reduce using rule 84 (statement -> IF expression THEN statement .)
    SEMICOLON       reduce using rule 84 (statement -> IF expression THEN statement .)
    UNTIL           reduce using rule 84 (statement -> IF expression THEN statement .)
    ELSE            shift and go to state 281

  ! ELSE            [ reduce using rule 84 (statement -> IF expression THEN statement .) ]


state 240

    (112) expression -> expression relational-op additive-expression .
    (120) additive-expression -> additive-expression . additive-op multiplicative-expression
    (122) additive-op -> . PLUS
    (123) additive-op -> . MINUS
    (124) additive-op -> . OR

    THEN            reduce using rule 112 (expression -> expression relational-op additive-expression .)
    LESS            reduce using rule 112 (expression -> expression relational-op additive-expression .)
    LESSEQUAL       reduce using rule 112 (expression -> expression relational-op additive-expression .)
    EQUAL           reduce using rule 112 (expression -> expression relational-op additive-expression .)
    DEQUAL          reduce using rule 112 (expression -> expression relational-op additive-expression .)
    GREATEREQUAL    reduce using rule 112 (expression -> expression relational-op additive-expression .)
    GREATER         reduce using rule 112 (expression -> expression relational-op additive-expression .)
    OF              reduce using rule 112 (expression -> expression relational-op additive-expression .)
    DO              reduce using rule 112 (expression -> expression relational-op additive-expression .)
    END             reduce using rule 112 (expression -> expression relational-op additive-expression .)
    SEMICOLON       reduce using rule 112 (expression -> expression relational-op additive-expression .)
    UNTIL           reduce using rule 112 (expression -> expression relational-op additive-expression .)
    ELSE            reduce using rule 112 (expression -> expression relational-op additive-expression .)
    RBRACKET        reduce using rule 112 (expression -> expression relational-op additive-expression .)
    COMMA           reduce using rule 112 (expression -> expression relational-op additive-expression .)
    RPAREN          reduce using rule 112 (expression -> expression relational-op additive-expression .)
    DOT             reduce using rule 112 (expression -> expression relational-op additive-expression .)
    TO              reduce using rule 112 (expression -> expression relational-op additive-expression .)
    DOWNTO          reduce using rule 112 (expression -> expression relational-op additive-expression .)
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    OR              shift and go to state 191

    additive-op                    shift and go to state 188

state 241

    (120) additive-expression -> additive-expression additive-op multiplicative-expression .
    (125) multiplicative-expression -> multiplicative-expression . multiplicative-op unary-expression
    (127) multiplicative-op -> . TIMES
    (128) multiplicative-op -> . DIVIDE
    (129) multiplicative-op -> . DIV
    (130) multiplicative-op -> . MOD
    (131) multiplicative-op -> . AND

    PLUS            reduce using rule 120 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    MINUS           reduce using rule 120 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    OR              reduce using rule 120 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    THEN            reduce using rule 120 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    LESS            reduce using rule 120 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    LESSEQUAL       reduce using rule 120 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    EQUAL           reduce using rule 120 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    DEQUAL          reduce using rule 120 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    GREATEREQUAL    reduce using rule 120 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    GREATER         reduce using rule 120 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    OF              reduce using rule 120 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    DO              reduce using rule 120 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    END             reduce using rule 120 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    SEMICOLON       reduce using rule 120 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    UNTIL           reduce using rule 120 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    ELSE            reduce using rule 120 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    RBRACKET        reduce using rule 120 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    COMMA           reduce using rule 120 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    RPAREN          reduce using rule 120 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    DOT             reduce using rule 120 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    TO              reduce using rule 120 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    DOWNTO          reduce using rule 120 (additive-expression -> additive-expression additive-op multiplicative-expression .)
    TIMES           shift and go to state 193
    DIVIDE          shift and go to state 194
    DIV             shift and go to state 195
    MOD             shift and go to state 196
    AND             shift and go to state 197

    multiplicative-op              shift and go to state 192

state 242

    (125) multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .

    TIMES           reduce using rule 125 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    DIVIDE          reduce using rule 125 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    DIV             reduce using rule 125 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    MOD             reduce using rule 125 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    AND             reduce using rule 125 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    PLUS            reduce using rule 125 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    MINUS           reduce using rule 125 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    OR              reduce using rule 125 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    THEN            reduce using rule 125 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    LESS            reduce using rule 125 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    LESSEQUAL       reduce using rule 125 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    EQUAL           reduce using rule 125 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    DEQUAL          reduce using rule 125 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    GREATEREQUAL    reduce using rule 125 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    GREATER         reduce using rule 125 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    OF              reduce using rule 125 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    DO              reduce using rule 125 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    END             reduce using rule 125 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    SEMICOLON       reduce using rule 125 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    UNTIL           reduce using rule 125 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    ELSE            reduce using rule 125 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    RBRACKET        reduce using rule 125 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    COMMA           reduce using rule 125 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    RPAREN          reduce using rule 125 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    DOT             reduce using rule 125 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    TO              reduce using rule 125 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)
    DOWNTO          reduce using rule 125 (multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression .)


state 243

    (143) primary-expression -> funcid LPAREN expression-list . RPAREN
    (108) expression-list -> expression-list . COMMA expression

    RPAREN          shift and go to state 282
    COMMA           shift and go to state 256


state 244

    (145) primary-expression -> LPAREN expression RPAREN .

    TIMES           reduce using rule 145 (primary-expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 145 (primary-expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 145 (primary-expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 145 (primary-expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 145 (primary-expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 145 (primary-expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 145 (primary-expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 145 (primary-expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 145 (primary-expression -> LPAREN expression RPAREN .)
    LESS            reduce using rule 145 (primary-expression -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 145 (primary-expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 145 (primary-expression -> LPAREN expression RPAREN .)
    DEQUAL          reduce using rule 145 (primary-expression -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 145 (primary-expression -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 145 (primary-expression -> LPAREN expression RPAREN .)
    OF              reduce using rule 145 (primary-expression -> LPAREN expression RPAREN .)
    DO              reduce using rule 145 (primary-expression -> LPAREN expression RPAREN .)
    END             reduce using rule 145 (primary-expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 145 (primary-expression -> LPAREN expression RPAREN .)
    UNTIL           reduce using rule 145 (primary-expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 145 (primary-expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 145 (primary-expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 145 (primary-expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 145 (primary-expression -> LPAREN expression RPAREN .)
    DOT             reduce using rule 145 (primary-expression -> LPAREN expression RPAREN .)
    TO              reduce using rule 145 (primary-expression -> LPAREN expression RPAREN .)
    DOWNTO          reduce using rule 145 (primary-expression -> LPAREN expression RPAREN .)


state 245

    (144) primary-expression -> LBRACKET element-list RBRACKET .

    TIMES           reduce using rule 144 (primary-expression -> LBRACKET element-list RBRACKET .)
    DIVIDE          reduce using rule 144 (primary-expression -> LBRACKET element-list RBRACKET .)
    DIV             reduce using rule 144 (primary-expression -> LBRACKET element-list RBRACKET .)
    MOD             reduce using rule 144 (primary-expression -> LBRACKET element-list RBRACKET .)
    AND             reduce using rule 144 (primary-expression -> LBRACKET element-list RBRACKET .)
    PLUS            reduce using rule 144 (primary-expression -> LBRACKET element-list RBRACKET .)
    MINUS           reduce using rule 144 (primary-expression -> LBRACKET element-list RBRACKET .)
    OR              reduce using rule 144 (primary-expression -> LBRACKET element-list RBRACKET .)
    THEN            reduce using rule 144 (primary-expression -> LBRACKET element-list RBRACKET .)
    LESS            reduce using rule 144 (primary-expression -> LBRACKET element-list RBRACKET .)
    LESSEQUAL       reduce using rule 144 (primary-expression -> LBRACKET element-list RBRACKET .)
    EQUAL           reduce using rule 144 (primary-expression -> LBRACKET element-list RBRACKET .)
    DEQUAL          reduce using rule 144 (primary-expression -> LBRACKET element-list RBRACKET .)
    GREATEREQUAL    reduce using rule 144 (primary-expression -> LBRACKET element-list RBRACKET .)
    GREATER         reduce using rule 144 (primary-expression -> LBRACKET element-list RBRACKET .)
    OF              reduce using rule 144 (primary-expression -> LBRACKET element-list RBRACKET .)
    DO              reduce using rule 144 (primary-expression -> LBRACKET element-list RBRACKET .)
    END             reduce using rule 144 (primary-expression -> LBRACKET element-list RBRACKET .)
    SEMICOLON       reduce using rule 144 (primary-expression -> LBRACKET element-list RBRACKET .)
    UNTIL           reduce using rule 144 (primary-expression -> LBRACKET element-list RBRACKET .)
    ELSE            reduce using rule 144 (primary-expression -> LBRACKET element-list RBRACKET .)
    RBRACKET        reduce using rule 144 (primary-expression -> LBRACKET element-list RBRACKET .)
    COMMA           reduce using rule 144 (primary-expression -> LBRACKET element-list RBRACKET .)
    RPAREN          reduce using rule 144 (primary-expression -> LBRACKET element-list RBRACKET .)
    DOT             reduce using rule 144 (primary-expression -> LBRACKET element-list RBRACKET .)
    TO              reduce using rule 144 (primary-expression -> LBRACKET element-list RBRACKET .)
    DOWNTO          reduce using rule 144 (primary-expression -> LBRACKET element-list RBRACKET .)


state 246

    (148) element-list -> element-list COMMA . element
    (149) element -> . expression
    (150) element -> . expression DOT DOT DOT expression
    (112) expression -> . expression relational-op additive-expression
    (113) expression -> . additive-expression
    (120) additive-expression -> . additive-expression additive-op multiplicative-expression
    (121) additive-expression -> . multiplicative-expression
    (125) multiplicative-expression -> . multiplicative-expression multiplicative-op unary-expression
    (126) multiplicative-expression -> . unary-expression
    (132) unary-expression -> . unary-op unary-expression
    (133) unary-expression -> . primary-expression
    (134) unary-op -> . PLUS
    (135) unary-op -> . MINUS
    (136) unary-op -> . NOT
    (137) primary-expression -> . ID
    (138) primary-expression -> . NUMBER
    (139) primary-expression -> . INTEGER
    (140) primary-expression -> . REAL
    (141) primary-expression -> . STRING
    (142) primary-expression -> . NIL
    (143) primary-expression -> . funcid LPAREN expression-list RPAREN
    (144) primary-expression -> . LBRACKET element-list RBRACKET
    (145) primary-expression -> . LPAREN expression RPAREN
    (153) funcid -> . ID

    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    NOT             shift and go to state 126
    ID              shift and go to state 127
    NUMBER          shift and go to state 128
    INTEGER         shift and go to state 129
    REAL            shift and go to state 130
    STRING          shift and go to state 131
    NIL             shift and go to state 132
    LBRACKET        shift and go to state 135
    LPAREN          shift and go to state 134

    element                        shift and go to state 283
    expression                     shift and go to state 204
    additive-expression            shift and go to state 119
    multiplicative-expression      shift and go to state 120
    unary-expression               shift and go to state 121
    unary-op                       shift and go to state 122
    primary-expression             shift and go to state 123
    funcid                         shift and go to state 133

state 247

    (150) element -> expression DOT . DOT DOT expression

    DOT             shift and go to state 284


state 248

    (86) statement -> CASE expression OF case-list . END
    (104) case-list -> case-list . SEMICOLON case-label-list COLON statement

    END             shift and go to state 285
    SEMICOLON       shift and go to state 286


state 249

    (103) case-list -> case-label-list . COLON statement
    (63) case-label-list -> case-label-list . COMMA constant

    COLON           shift and go to state 287
    COMMA           shift and go to state 288


state 250

    (62) case-label-list -> constant .

    COLON           reduce using rule 62 (case-label-list -> constant .)
    COMMA           reduce using rule 62 (case-label-list -> constant .)


state 251

    (87) statement -> WHILE expression DO statement .

    END             reduce using rule 87 (statement -> WHILE expression DO statement .)
    SEMICOLON       reduce using rule 87 (statement -> WHILE expression DO statement .)
    UNTIL           reduce using rule 87 (statement -> WHILE expression DO statement .)
    ELSE            reduce using rule 87 (statement -> WHILE expression DO statement .)


state 252

    (88) statement -> REPEAT statement-list UNTIL expression .
    (112) expression -> expression . relational-op additive-expression
    (114) relational-op -> . LESS
    (115) relational-op -> . LESSEQUAL
    (116) relational-op -> . EQUAL
    (117) relational-op -> . DEQUAL
    (118) relational-op -> . GREATEREQUAL
    (119) relational-op -> . GREATER

    END             reduce using rule 88 (statement -> REPEAT statement-list UNTIL expression .)
    SEMICOLON       reduce using rule 88 (statement -> REPEAT statement-list UNTIL expression .)
    UNTIL           reduce using rule 88 (statement -> REPEAT statement-list UNTIL expression .)
    ELSE            reduce using rule 88 (statement -> REPEAT statement-list UNTIL expression .)
    LESS            shift and go to state 182
    LESSEQUAL       shift and go to state 183
    EQUAL           shift and go to state 184
    DEQUAL          shift and go to state 185
    GREATEREQUAL    shift and go to state 186
    GREATER         shift and go to state 187

    relational-op                  shift and go to state 181

state 253

    (89) statement -> FOR varid EQUAL for-list . DO statement

    DO              shift and go to state 289


state 254

    (105) for-list -> expression . TO expression
    (106) for-list -> expression . DOWNTO expression
    (112) expression -> expression . relational-op additive-expression
    (114) relational-op -> . LESS
    (115) relational-op -> . LESSEQUAL
    (116) relational-op -> . EQUAL
    (117) relational-op -> . DEQUAL
    (118) relational-op -> . GREATEREQUAL
    (119) relational-op -> . GREATER

    TO              shift and go to state 290
    DOWNTO          shift and go to state 291
    LESS            shift and go to state 182
    LESSEQUAL       shift and go to state 183
    EQUAL           shift and go to state 184
    DEQUAL          shift and go to state 185
    GREATEREQUAL    shift and go to state 186
    GREATER         shift and go to state 187

    relational-op                  shift and go to state 181

state 255

    (91) statement -> procid LPAREN expression-list RPAREN .

    END             reduce using rule 91 (statement -> procid LPAREN expression-list RPAREN .)
    SEMICOLON       reduce using rule 91 (statement -> procid LPAREN expression-list RPAREN .)
    UNTIL           reduce using rule 91 (statement -> procid LPAREN expression-list RPAREN .)
    ELSE            reduce using rule 91 (statement -> procid LPAREN expression-list RPAREN .)


state 256

    (108) expression-list -> expression-list COMMA . expression
    (112) expression -> . expression relational-op additive-expression
    (113) expression -> . additive-expression
    (120) additive-expression -> . additive-expression additive-op multiplicative-expression
    (121) additive-expression -> . multiplicative-expression
    (125) multiplicative-expression -> . multiplicative-expression multiplicative-op unary-expression
    (126) multiplicative-expression -> . unary-expression
    (132) unary-expression -> . unary-op unary-expression
    (133) unary-expression -> . primary-expression
    (134) unary-op -> . PLUS
    (135) unary-op -> . MINUS
    (136) unary-op -> . NOT
    (137) primary-expression -> . ID
    (138) primary-expression -> . NUMBER
    (139) primary-expression -> . INTEGER
    (140) primary-expression -> . REAL
    (141) primary-expression -> . STRING
    (142) primary-expression -> . NIL
    (143) primary-expression -> . funcid LPAREN expression-list RPAREN
    (144) primary-expression -> . LBRACKET element-list RBRACKET
    (145) primary-expression -> . LPAREN expression RPAREN
    (153) funcid -> . ID

    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    NOT             shift and go to state 126
    ID              shift and go to state 127
    NUMBER          shift and go to state 128
    INTEGER         shift and go to state 129
    REAL            shift and go to state 130
    STRING          shift and go to state 131
    NIL             shift and go to state 132
    LBRACKET        shift and go to state 135
    LPAREN          shift and go to state 134

    expression                     shift and go to state 292
    additive-expression            shift and go to state 119
    multiplicative-expression      shift and go to state 120
    unary-expression               shift and go to state 121
    unary-op                       shift and go to state 122
    primary-expression             shift and go to state 123
    funcid                         shift and go to state 133

state 257

    (93) statement -> WITH record-variable-list DO statement .

    END             reduce using rule 93 (statement -> WITH record-variable-list DO statement .)
    SEMICOLON       reduce using rule 93 (statement -> WITH record-variable-list DO statement .)
    UNTIL           reduce using rule 93 (statement -> WITH record-variable-list DO statement .)
    ELSE            reduce using rule 93 (statement -> WITH record-variable-list DO statement .)


state 258

    (111) record-variable-list -> record-variable-list COMMA variable .
    (98) variable -> variable . LBRACKET subscript-list RBRACKET
    (99) variable -> variable . COMMA fieldid
    (100) variable -> variable .

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for DO resolved using rule 100 (variable -> variable .)
    LBRACKET        shift and go to state 116
    COMMA           shift and go to state 117
    DO              reduce using rule 100 (variable -> variable .)

  ! DO              [ reduce using rule 111 (record-variable-list -> record-variable-list COMMA variable .) ]
  ! COMMA           [ reduce using rule 111 (record-variable-list -> record-variable-list COMMA variable .) ]
  ! LBRACKET        [ reduce using rule 100 (variable -> variable .) ]
  ! COMMA           [ reduce using rule 100 (variable -> variable .) ]


state 259

    (95) statement -> WRITE LPAREN STRING RPAREN .

    END             reduce using rule 95 (statement -> WRITE LPAREN STRING RPAREN .)
    SEMICOLON       reduce using rule 95 (statement -> WRITE LPAREN STRING RPAREN .)
    UNTIL           reduce using rule 95 (statement -> WRITE LPAREN STRING RPAREN .)
    ELSE            reduce using rule 95 (statement -> WRITE LPAREN STRING RPAREN .)


state 260

    (96) statement -> READ LPAREN ID RPAREN .

    END             reduce using rule 96 (statement -> READ LPAREN ID RPAREN .)
    SEMICOLON       reduce using rule 96 (statement -> READ LPAREN ID RPAREN .)
    UNTIL           reduce using rule 96 (statement -> READ LPAREN ID RPAREN .)
    ELSE            reduce using rule 96 (statement -> READ LPAREN ID RPAREN .)


state 261

    (39) structured-type -> ARRAY LBRACKET index-list RBRACKET OF . type
    (33) type -> . simple-type
    (34) type -> . structured-type
    (35) type -> . typeid
    (36) simple-type -> . LPAREN identifier-list RPAREN
    (37) simple-type -> . constant
    (38) simple-type -> . typeid
    (39) structured-type -> . ARRAY LBRACKET index-list RBRACKET OF type
    (40) structured-type -> . RECORD field-list END
    (41) structured-type -> . SET OF simple-type
    (42) structured-type -> . FILE OF type
    (43) structured-type -> . PACKED structured-type
    (152) typeid -> . ID
    (27) constant -> . INTEGER
    (28) constant -> . NUMBER
    (29) constant -> . REAL
    (30) constant -> . STRING
    (31) constant -> . constid
    (32) constant -> . PLUS constid
    (151) constid -> . ID

    LPAREN          shift and go to state 31
    ARRAY           shift and go to state 32
    RECORD          shift and go to state 33
    SET             shift and go to state 34
    FILE            shift and go to state 35
    PACKED          shift and go to state 36
    ID              shift and go to state 8
    INTEGER         shift and go to state 98
    NUMBER          shift and go to state 39
    REAL            shift and go to state 40
    STRING          shift and go to state 41
    PLUS            shift and go to state 43

    type                           shift and go to state 293
    simple-type                    shift and go to state 26
    structured-type                shift and go to state 27
    typeid                         shift and go to state 28
    constant                       shift and go to state 19
    constid                        shift and go to state 42

state 262

    (45) index-list -> index-list COMMA simple-type .

    RBRACKET        reduce using rule 45 (index-list -> index-list COMMA simple-type .)
    COMMA           reduce using rule 45 (index-list -> index-list COMMA simple-type .)


state 263

    (55) variant-part -> CASE tag-field OF variant-list .
    (59) variant-list -> variant-list . SEMICOLON variant

    END             reduce using rule 55 (variant-part -> CASE tag-field OF variant-list .)
    RPAREN          reduce using rule 55 (variant-part -> CASE tag-field OF variant-list .)
    SEMICOLON       shift and go to state 294


state 264

    (58) variant-list -> variant .

    SEMICOLON       reduce using rule 58 (variant-list -> variant .)
    END             reduce using rule 58 (variant-list -> variant .)
    RPAREN          reduce using rule 58 (variant-list -> variant .)


state 265

    (60) variant -> empty .

    SEMICOLON       reduce using rule 60 (variant -> empty .)
    END             reduce using rule 60 (variant -> empty .)
    RPAREN          reduce using rule 60 (variant -> empty .)


state 266

    (61) variant -> case-label-list . COLON LPAREN field-list RPAREN
    (63) case-label-list -> case-label-list . COMMA constant

    COLON           shift and go to state 295
    COMMA           shift and go to state 288


state 267

    (152) typeid -> ID .

    OF              reduce using rule 152 (typeid -> ID .)
    SEMICOLON       reduce using rule 152 (typeid -> ID .)
    RPAREN          reduce using rule 152 (typeid -> ID .)


state 268

    (57) tag-field -> ID COLON typeid .

    OF              reduce using rule 57 (tag-field -> ID COLON typeid .)


state 269

    (66) proc-or-func -> PROCEDURE ID parameters SEMICOLON block-or-forward .

    SEMICOLON       reduce using rule 66 (proc-or-func -> PROCEDURE ID parameters SEMICOLON block-or-forward .)


state 270

    (68) block-or-forward -> block .

    SEMICOLON       reduce using rule 68 (block-or-forward -> block .)


state 271

    (69) block-or-forward -> FORWARD .

    SEMICOLON       reduce using rule 69 (block-or-forward -> FORWARD .)


state 272

    (70) parameters -> LPAREN formal-parameter-list RPAREN .

    SEMICOLON       reduce using rule 70 (parameters -> LPAREN formal-parameter-list RPAREN .)
    COLON           reduce using rule 70 (parameters -> LPAREN formal-parameter-list RPAREN .)
    RPAREN          reduce using rule 70 (parameters -> LPAREN formal-parameter-list RPAREN .)


state 273

    (72) formal-parameter-list -> formal-parameter-list SEMICOLON . formal-parameter-section
    (73) formal-parameter-section -> . parameterid-list COLON typeid
    (74) formal-parameter-section -> . VAR parameterid-list COLON typeid
    (75) formal-parameter-section -> . PROCEDURE ID parameters
    (76) formal-parameter-section -> . FUNCTION ID parameters COLON typeid
    (77) parameterid-list -> . ID
    (78) parameterid-list -> . parameterid-list COMMA ID

    VAR             shift and go to state 228
    PROCEDURE       shift and go to state 229
    FUNCTION        shift and go to state 231
    ID              shift and go to state 230

    formal-parameter-section       shift and go to state 296
    parameterid-list               shift and go to state 227

state 274

    (73) formal-parameter-section -> parameterid-list COLON . typeid
    (152) typeid -> . ID

    ID              shift and go to state 267

    typeid                         shift and go to state 297

state 275

    (78) parameterid-list -> parameterid-list COMMA . ID

    ID              shift and go to state 298


state 276

    (74) formal-parameter-section -> VAR parameterid-list . COLON typeid
    (78) parameterid-list -> parameterid-list . COMMA ID

    COLON           shift and go to state 299
    COMMA           shift and go to state 275


state 277

    (75) formal-parameter-section -> PROCEDURE ID . parameters
    (70) parameters -> . LPAREN formal-parameter-list RPAREN

    LPAREN          shift and go to state 163

    parameters                     shift and go to state 300

state 278

    (76) formal-parameter-section -> FUNCTION ID . parameters COLON typeid
    (70) parameters -> . LPAREN formal-parameter-list RPAREN

    LPAREN          shift and go to state 163

    parameters                     shift and go to state 301

state 279

    (67) proc-or-func -> FUNCTION ID parameters COLON typeid . SEMICOLON block-or-forward

    SEMICOLON       shift and go to state 302


state 280

    (102) subscript-list -> subscript-list COMMA expression .
    (112) expression -> expression . relational-op additive-expression
    (114) relational-op -> . LESS
    (115) relational-op -> . LESSEQUAL
    (116) relational-op -> . EQUAL
    (117) relational-op -> . DEQUAL
    (118) relational-op -> . GREATEREQUAL
    (119) relational-op -> . GREATER

    RBRACKET        reduce using rule 102 (subscript-list -> subscript-list COMMA expression .)
    COMMA           reduce using rule 102 (subscript-list -> subscript-list COMMA expression .)
    LESS            shift and go to state 182
    LESSEQUAL       shift and go to state 183
    EQUAL           shift and go to state 184
    DEQUAL          shift and go to state 185
    GREATEREQUAL    shift and go to state 186
    GREATER         shift and go to state 187

    relational-op                  shift and go to state 181

state 281

    (85) statement -> IF expression THEN statement ELSE . statement
    (81) statement -> . empty
    (82) statement -> . variable EQUAL expression
    (83) statement -> . BEGIN statement-list END statement
    (84) statement -> . IF expression THEN statement
    (85) statement -> . IF expression THEN statement ELSE statement
    (86) statement -> . CASE expression OF case-list END
    (87) statement -> . WHILE expression DO statement
    (88) statement -> . REPEAT statement-list UNTIL expression
    (89) statement -> . FOR varid EQUAL for-list DO statement
    (90) statement -> . procid
    (91) statement -> . procid LPAREN expression-list RPAREN
    (92) statement -> . GOTO label
    (93) statement -> . WITH record-variable-list DO statement
    (94) statement -> . label COLON statement
    (95) statement -> . WRITE LPAREN STRING RPAREN
    (96) statement -> . READ LPAREN ID RPAREN
    (157) empty -> .
    (97) variable -> . ID
    (98) variable -> . variable LBRACKET subscript-list RBRACKET
    (99) variable -> . variable COMMA fieldid
    (100) variable -> . variable
    (154) procid -> . ID
    (109) label -> . INTEGER

    BEGIN           shift and go to state 59
    IF              shift and go to state 64
    CASE            shift and go to state 65
    WHILE           shift and go to state 66
    REPEAT          shift and go to state 67
    FOR             shift and go to state 68
    GOTO            shift and go to state 70
    WITH            shift and go to state 72
    WRITE           shift and go to state 73
    READ            shift and go to state 74
    END             reduce using rule 157 (empty -> .)
    SEMICOLON       reduce using rule 157 (empty -> .)
    UNTIL           reduce using rule 157 (empty -> .)
    ELSE            reduce using rule 157 (empty -> .)
    ID              shift and go to state 75
    INTEGER         shift and go to state 76

    statement                      shift and go to state 303
    empty                          shift and go to state 62
    variable                       shift and go to state 63
    procid                         shift and go to state 69
    label                          shift and go to state 71

state 282

    (143) primary-expression -> funcid LPAREN expression-list RPAREN .

    TIMES           reduce using rule 143 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    DIVIDE          reduce using rule 143 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    DIV             reduce using rule 143 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    MOD             reduce using rule 143 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    AND             reduce using rule 143 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    PLUS            reduce using rule 143 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    MINUS           reduce using rule 143 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    OR              reduce using rule 143 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    THEN            reduce using rule 143 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    LESS            reduce using rule 143 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    LESSEQUAL       reduce using rule 143 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    EQUAL           reduce using rule 143 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    DEQUAL          reduce using rule 143 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    GREATEREQUAL    reduce using rule 143 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    GREATER         reduce using rule 143 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    OF              reduce using rule 143 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    DO              reduce using rule 143 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    END             reduce using rule 143 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    SEMICOLON       reduce using rule 143 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    UNTIL           reduce using rule 143 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    ELSE            reduce using rule 143 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    RBRACKET        reduce using rule 143 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    COMMA           reduce using rule 143 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    RPAREN          reduce using rule 143 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    DOT             reduce using rule 143 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    TO              reduce using rule 143 (primary-expression -> funcid LPAREN expression-list RPAREN .)
    DOWNTO          reduce using rule 143 (primary-expression -> funcid LPAREN expression-list RPAREN .)


state 283

    (148) element-list -> element-list COMMA element .

    RBRACKET        reduce using rule 148 (element-list -> element-list COMMA element .)
    COMMA           reduce using rule 148 (element-list -> element-list COMMA element .)


state 284

    (150) element -> expression DOT DOT . DOT expression

    DOT             shift and go to state 304


state 285

    (86) statement -> CASE expression OF case-list END .

    END             reduce using rule 86 (statement -> CASE expression OF case-list END .)
    SEMICOLON       reduce using rule 86 (statement -> CASE expression OF case-list END .)
    UNTIL           reduce using rule 86 (statement -> CASE expression OF case-list END .)
    ELSE            reduce using rule 86 (statement -> CASE expression OF case-list END .)


state 286

    (104) case-list -> case-list SEMICOLON . case-label-list COLON statement
    (62) case-label-list -> . constant
    (63) case-label-list -> . case-label-list COMMA constant
    (27) constant -> . INTEGER
    (28) constant -> . NUMBER
    (29) constant -> . REAL
    (30) constant -> . STRING
    (31) constant -> . constid
    (32) constant -> . PLUS constid
    (151) constid -> . ID

    INTEGER         shift and go to state 98
    NUMBER          shift and go to state 39
    REAL            shift and go to state 40
    STRING          shift and go to state 41
    PLUS            shift and go to state 43
    ID              shift and go to state 93

    case-label-list                shift and go to state 305
    constant                       shift and go to state 250
    constid                        shift and go to state 42

state 287

    (103) case-list -> case-label-list COLON . statement
    (81) statement -> . empty
    (82) statement -> . variable EQUAL expression
    (83) statement -> . BEGIN statement-list END statement
    (84) statement -> . IF expression THEN statement
    (85) statement -> . IF expression THEN statement ELSE statement
    (86) statement -> . CASE expression OF case-list END
    (87) statement -> . WHILE expression DO statement
    (88) statement -> . REPEAT statement-list UNTIL expression
    (89) statement -> . FOR varid EQUAL for-list DO statement
    (90) statement -> . procid
    (91) statement -> . procid LPAREN expression-list RPAREN
    (92) statement -> . GOTO label
    (93) statement -> . WITH record-variable-list DO statement
    (94) statement -> . label COLON statement
    (95) statement -> . WRITE LPAREN STRING RPAREN
    (96) statement -> . READ LPAREN ID RPAREN
    (157) empty -> .
    (97) variable -> . ID
    (98) variable -> . variable LBRACKET subscript-list RBRACKET
    (99) variable -> . variable COMMA fieldid
    (100) variable -> . variable
    (154) procid -> . ID
    (109) label -> . INTEGER

    BEGIN           shift and go to state 59
    IF              shift and go to state 64
    CASE            shift and go to state 65
    WHILE           shift and go to state 66
    REPEAT          shift and go to state 67
    FOR             shift and go to state 68
    GOTO            shift and go to state 70
    WITH            shift and go to state 72
    WRITE           shift and go to state 73
    READ            shift and go to state 74
    END             reduce using rule 157 (empty -> .)
    SEMICOLON       reduce using rule 157 (empty -> .)
    ID              shift and go to state 75
    INTEGER         shift and go to state 76

    statement                      shift and go to state 306
    empty                          shift and go to state 62
    variable                       shift and go to state 63
    procid                         shift and go to state 69
    label                          shift and go to state 71

state 288

    (63) case-label-list -> case-label-list COMMA . constant
    (27) constant -> . INTEGER
    (28) constant -> . NUMBER
    (29) constant -> . REAL
    (30) constant -> . STRING
    (31) constant -> . constid
    (32) constant -> . PLUS constid
    (151) constid -> . ID

    INTEGER         shift and go to state 98
    NUMBER          shift and go to state 39
    REAL            shift and go to state 40
    STRING          shift and go to state 41
    PLUS            shift and go to state 43
    ID              shift and go to state 93

    constant                       shift and go to state 307
    constid                        shift and go to state 42

state 289

    (89) statement -> FOR varid EQUAL for-list DO . statement
    (81) statement -> . empty
    (82) statement -> . variable EQUAL expression
    (83) statement -> . BEGIN statement-list END statement
    (84) statement -> . IF expression THEN statement
    (85) statement -> . IF expression THEN statement ELSE statement
    (86) statement -> . CASE expression OF case-list END
    (87) statement -> . WHILE expression DO statement
    (88) statement -> . REPEAT statement-list UNTIL expression
    (89) statement -> . FOR varid EQUAL for-list DO statement
    (90) statement -> . procid
    (91) statement -> . procid LPAREN expression-list RPAREN
    (92) statement -> . GOTO label
    (93) statement -> . WITH record-variable-list DO statement
    (94) statement -> . label COLON statement
    (95) statement -> . WRITE LPAREN STRING RPAREN
    (96) statement -> . READ LPAREN ID RPAREN
    (157) empty -> .
    (97) variable -> . ID
    (98) variable -> . variable LBRACKET subscript-list RBRACKET
    (99) variable -> . variable COMMA fieldid
    (100) variable -> . variable
    (154) procid -> . ID
    (109) label -> . INTEGER

    BEGIN           shift and go to state 59
    IF              shift and go to state 64
    CASE            shift and go to state 65
    WHILE           shift and go to state 66
    REPEAT          shift and go to state 67
    FOR             shift and go to state 68
    GOTO            shift and go to state 70
    WITH            shift and go to state 72
    WRITE           shift and go to state 73
    READ            shift and go to state 74
    END             reduce using rule 157 (empty -> .)
    SEMICOLON       reduce using rule 157 (empty -> .)
    UNTIL           reduce using rule 157 (empty -> .)
    ELSE            reduce using rule 157 (empty -> .)
    ID              shift and go to state 75
    INTEGER         shift and go to state 76

    statement                      shift and go to state 308
    empty                          shift and go to state 62
    variable                       shift and go to state 63
    procid                         shift and go to state 69
    label                          shift and go to state 71

state 290

    (105) for-list -> expression TO . expression
    (112) expression -> . expression relational-op additive-expression
    (113) expression -> . additive-expression
    (120) additive-expression -> . additive-expression additive-op multiplicative-expression
    (121) additive-expression -> . multiplicative-expression
    (125) multiplicative-expression -> . multiplicative-expression multiplicative-op unary-expression
    (126) multiplicative-expression -> . unary-expression
    (132) unary-expression -> . unary-op unary-expression
    (133) unary-expression -> . primary-expression
    (134) unary-op -> . PLUS
    (135) unary-op -> . MINUS
    (136) unary-op -> . NOT
    (137) primary-expression -> . ID
    (138) primary-expression -> . NUMBER
    (139) primary-expression -> . INTEGER
    (140) primary-expression -> . REAL
    (141) primary-expression -> . STRING
    (142) primary-expression -> . NIL
    (143) primary-expression -> . funcid LPAREN expression-list RPAREN
    (144) primary-expression -> . LBRACKET element-list RBRACKET
    (145) primary-expression -> . LPAREN expression RPAREN
    (153) funcid -> . ID

    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    NOT             shift and go to state 126
    ID              shift and go to state 127
    NUMBER          shift and go to state 128
    INTEGER         shift and go to state 129
    REAL            shift and go to state 130
    STRING          shift and go to state 131
    NIL             shift and go to state 132
    LBRACKET        shift and go to state 135
    LPAREN          shift and go to state 134

    expression                     shift and go to state 309
    additive-expression            shift and go to state 119
    multiplicative-expression      shift and go to state 120
    unary-expression               shift and go to state 121
    unary-op                       shift and go to state 122
    primary-expression             shift and go to state 123
    funcid                         shift and go to state 133

state 291

    (106) for-list -> expression DOWNTO . expression
    (112) expression -> . expression relational-op additive-expression
    (113) expression -> . additive-expression
    (120) additive-expression -> . additive-expression additive-op multiplicative-expression
    (121) additive-expression -> . multiplicative-expression
    (125) multiplicative-expression -> . multiplicative-expression multiplicative-op unary-expression
    (126) multiplicative-expression -> . unary-expression
    (132) unary-expression -> . unary-op unary-expression
    (133) unary-expression -> . primary-expression
    (134) unary-op -> . PLUS
    (135) unary-op -> . MINUS
    (136) unary-op -> . NOT
    (137) primary-expression -> . ID
    (138) primary-expression -> . NUMBER
    (139) primary-expression -> . INTEGER
    (140) primary-expression -> . REAL
    (141) primary-expression -> . STRING
    (142) primary-expression -> . NIL
    (143) primary-expression -> . funcid LPAREN expression-list RPAREN
    (144) primary-expression -> . LBRACKET element-list RBRACKET
    (145) primary-expression -> . LPAREN expression RPAREN
    (153) funcid -> . ID

    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    NOT             shift and go to state 126
    ID              shift and go to state 127
    NUMBER          shift and go to state 128
    INTEGER         shift and go to state 129
    REAL            shift and go to state 130
    STRING          shift and go to state 131
    NIL             shift and go to state 132
    LBRACKET        shift and go to state 135
    LPAREN          shift and go to state 134

    expression                     shift and go to state 310
    additive-expression            shift and go to state 119
    multiplicative-expression      shift and go to state 120
    unary-expression               shift and go to state 121
    unary-op                       shift and go to state 122
    primary-expression             shift and go to state 123
    funcid                         shift and go to state 133

state 292

    (108) expression-list -> expression-list COMMA expression .
    (112) expression -> expression . relational-op additive-expression
    (114) relational-op -> . LESS
    (115) relational-op -> . LESSEQUAL
    (116) relational-op -> . EQUAL
    (117) relational-op -> . DEQUAL
    (118) relational-op -> . GREATEREQUAL
    (119) relational-op -> . GREATER

    RPAREN          reduce using rule 108 (expression-list -> expression-list COMMA expression .)
    COMMA           reduce using rule 108 (expression-list -> expression-list COMMA expression .)
    LESS            shift and go to state 182
    LESSEQUAL       shift and go to state 183
    EQUAL           shift and go to state 184
    DEQUAL          shift and go to state 185
    GREATEREQUAL    shift and go to state 186
    GREATER         shift and go to state 187

    relational-op                  shift and go to state 181

state 293

    (39) structured-type -> ARRAY LBRACKET index-list RBRACKET OF type .

    ID              reduce using rule 39 (structured-type -> ARRAY LBRACKET index-list RBRACKET OF type .)
    SEMICOLON       reduce using rule 39 (structured-type -> ARRAY LBRACKET index-list RBRACKET OF type .)
    END             reduce using rule 39 (structured-type -> ARRAY LBRACKET index-list RBRACKET OF type .)
    RPAREN          reduce using rule 39 (structured-type -> ARRAY LBRACKET index-list RBRACKET OF type .)


state 294

    (59) variant-list -> variant-list SEMICOLON . variant
    (60) variant -> . empty
    (61) variant -> . case-label-list COLON LPAREN field-list RPAREN
    (157) empty -> .
    (62) case-label-list -> . constant
    (63) case-label-list -> . case-label-list COMMA constant
    (27) constant -> . INTEGER
    (28) constant -> . NUMBER
    (29) constant -> . REAL
    (30) constant -> . STRING
    (31) constant -> . constid
    (32) constant -> . PLUS constid
    (151) constid -> . ID

    SEMICOLON       reduce using rule 157 (empty -> .)
    END             reduce using rule 157 (empty -> .)
    RPAREN          reduce using rule 157 (empty -> .)
    INTEGER         shift and go to state 98
    NUMBER          shift and go to state 39
    REAL            shift and go to state 40
    STRING          shift and go to state 41
    PLUS            shift and go to state 43
    ID              shift and go to state 93

    variant                        shift and go to state 311
    empty                          shift and go to state 265
    case-label-list                shift and go to state 266
    constant                       shift and go to state 250
    constid                        shift and go to state 42

state 295

    (61) variant -> case-label-list COLON . LPAREN field-list RPAREN

    LPAREN          shift and go to state 312


state 296

    (72) formal-parameter-list -> formal-parameter-list SEMICOLON formal-parameter-section .

    RPAREN          reduce using rule 72 (formal-parameter-list -> formal-parameter-list SEMICOLON formal-parameter-section .)
    SEMICOLON       reduce using rule 72 (formal-parameter-list -> formal-parameter-list SEMICOLON formal-parameter-section .)


state 297

    (73) formal-parameter-section -> parameterid-list COLON typeid .

    RPAREN          reduce using rule 73 (formal-parameter-section -> parameterid-list COLON typeid .)
    SEMICOLON       reduce using rule 73 (formal-parameter-section -> parameterid-list COLON typeid .)


state 298

    (78) parameterid-list -> parameterid-list COMMA ID .

    COLON           reduce using rule 78 (parameterid-list -> parameterid-list COMMA ID .)
    COMMA           reduce using rule 78 (parameterid-list -> parameterid-list COMMA ID .)


state 299

    (74) formal-parameter-section -> VAR parameterid-list COLON . typeid
    (152) typeid -> . ID

    ID              shift and go to state 267

    typeid                         shift and go to state 313

state 300

    (75) formal-parameter-section -> PROCEDURE ID parameters .

    RPAREN          reduce using rule 75 (formal-parameter-section -> PROCEDURE ID parameters .)
    SEMICOLON       reduce using rule 75 (formal-parameter-section -> PROCEDURE ID parameters .)


state 301

    (76) formal-parameter-section -> FUNCTION ID parameters . COLON typeid

    COLON           shift and go to state 314


state 302

    (67) proc-or-func -> FUNCTION ID parameters COLON typeid SEMICOLON . block-or-forward
    (68) block-or-forward -> . block
    (69) block-or-forward -> . FORWARD
    (6) block -> . block1
    (7) block -> . label-declaration SEMICOLON block1
    (8) block1 -> . block2
    (9) block1 -> . constant-declaration SEMICOLON block2
    (17) label-declaration -> . label INTEGER
    (18) label-declaration -> . label-declaration COMMA INTEGER
    (10) block2 -> . block3
    (11) block2 -> . type-declaration SEMICOLON block3
    (19) constant-declaration -> . CONST ID EQUAL constant
    (20) constant-declaration -> . constant-declaration SEMICOLON ID EQUAL constant
    (109) label -> . INTEGER
    (12) block3 -> . block4
    (13) block3 -> . variable-declaration SEMICOLON block4
    (21) type-declaration -> . type ID EQUAL type
    (22) type-declaration -> . type-declaration SEMICOLON ID EQUAL type
    (14) block4 -> . block5
    (15) block4 -> . proc-and-func-declaration SEMICOLON block5
    (23) variable-declaration -> . VAR variableid-list COLON type
    (24) variable-declaration -> . variable-declaration SEMICOLON variableid-list COLON type
    (33) type -> . simple-type
    (34) type -> . structured-type
    (35) type -> . typeid
    (16) block5 -> . BEGIN statement-list END
    (64) proc-and-func-declaration -> . proc-or-func
    (65) proc-and-func-declaration -> . proc-and-func-declaration SEMICOLON proc-or-func
    (36) simple-type -> . LPAREN identifier-list RPAREN
    (37) simple-type -> . constant
    (38) simple-type -> . typeid
    (39) structured-type -> . ARRAY LBRACKET index-list RBRACKET OF type
    (40) structured-type -> . RECORD field-list END
    (41) structured-type -> . SET OF simple-type
    (42) structured-type -> . FILE OF type
    (43) structured-type -> . PACKED structured-type
    (152) typeid -> . ID
    (66) proc-or-func -> . PROCEDURE ID parameters SEMICOLON block-or-forward
    (67) proc-or-func -> . FUNCTION ID parameters COLON typeid SEMICOLON block-or-forward
    (27) constant -> . INTEGER
    (28) constant -> . NUMBER
    (29) constant -> . REAL
    (30) constant -> . STRING
    (31) constant -> . constid
    (32) constant -> . PLUS constid
    (151) constid -> . ID

    FORWARD         shift and go to state 271
    CONST           shift and go to state 18
    INTEGER         shift and go to state 15
    VAR             shift and go to state 25
    BEGIN           shift and go to state 29
    LPAREN          shift and go to state 31
    ARRAY           shift and go to state 32
    RECORD          shift and go to state 33
    SET             shift and go to state 34
    FILE            shift and go to state 35
    PACKED          shift and go to state 36
    ID              shift and go to state 8
    PROCEDURE       shift and go to state 37
    FUNCTION        shift and go to state 38
    NUMBER          shift and go to state 39
    REAL            shift and go to state 40
    STRING          shift and go to state 41
    PLUS            shift and go to state 43

    typeid                         shift and go to state 28
    block-or-forward               shift and go to state 315
    block                          shift and go to state 270
    block1                         shift and go to state 10
    label-declaration              shift and go to state 11
    block2                         shift and go to state 12
    constant-declaration           shift and go to state 13
    label                          shift and go to state 14
    block3                         shift and go to state 16
    type-declaration               shift and go to state 17
    constant                       shift and go to state 19
    block4                         shift and go to state 20
    variable-declaration           shift and go to state 21
    type                           shift and go to state 22
    block5                         shift and go to state 23
    proc-and-func-declaration      shift and go to state 24
    simple-type                    shift and go to state 26
    structured-type                shift and go to state 27
    proc-or-func                   shift and go to state 30
    constid                        shift and go to state 42

state 303

    (85) statement -> IF expression THEN statement ELSE statement .

    END             reduce using rule 85 (statement -> IF expression THEN statement ELSE statement .)
    SEMICOLON       reduce using rule 85 (statement -> IF expression THEN statement ELSE statement .)
    UNTIL           reduce using rule 85 (statement -> IF expression THEN statement ELSE statement .)
    ELSE            reduce using rule 85 (statement -> IF expression THEN statement ELSE statement .)


state 304

    (150) element -> expression DOT DOT DOT . expression
    (112) expression -> . expression relational-op additive-expression
    (113) expression -> . additive-expression
    (120) additive-expression -> . additive-expression additive-op multiplicative-expression
    (121) additive-expression -> . multiplicative-expression
    (125) multiplicative-expression -> . multiplicative-expression multiplicative-op unary-expression
    (126) multiplicative-expression -> . unary-expression
    (132) unary-expression -> . unary-op unary-expression
    (133) unary-expression -> . primary-expression
    (134) unary-op -> . PLUS
    (135) unary-op -> . MINUS
    (136) unary-op -> . NOT
    (137) primary-expression -> . ID
    (138) primary-expression -> . NUMBER
    (139) primary-expression -> . INTEGER
    (140) primary-expression -> . REAL
    (141) primary-expression -> . STRING
    (142) primary-expression -> . NIL
    (143) primary-expression -> . funcid LPAREN expression-list RPAREN
    (144) primary-expression -> . LBRACKET element-list RBRACKET
    (145) primary-expression -> . LPAREN expression RPAREN
    (153) funcid -> . ID

    PLUS            shift and go to state 124
    MINUS           shift and go to state 125
    NOT             shift and go to state 126
    ID              shift and go to state 127
    NUMBER          shift and go to state 128
    INTEGER         shift and go to state 129
    REAL            shift and go to state 130
    STRING          shift and go to state 131
    NIL             shift and go to state 132
    LBRACKET        shift and go to state 135
    LPAREN          shift and go to state 134

    expression                     shift and go to state 316
    additive-expression            shift and go to state 119
    multiplicative-expression      shift and go to state 120
    unary-expression               shift and go to state 121
    unary-op                       shift and go to state 122
    primary-expression             shift and go to state 123
    funcid                         shift and go to state 133

state 305

    (104) case-list -> case-list SEMICOLON case-label-list . COLON statement
    (63) case-label-list -> case-label-list . COMMA constant

    COLON           shift and go to state 317
    COMMA           shift and go to state 288


state 306

    (103) case-list -> case-label-list COLON statement .

    END             reduce using rule 103 (case-list -> case-label-list COLON statement .)
    SEMICOLON       reduce using rule 103 (case-list -> case-label-list COLON statement .)


state 307

    (63) case-label-list -> case-label-list COMMA constant .

    COLON           reduce using rule 63 (case-label-list -> case-label-list COMMA constant .)
    COMMA           reduce using rule 63 (case-label-list -> case-label-list COMMA constant .)


state 308

    (89) statement -> FOR varid EQUAL for-list DO statement .

    END             reduce using rule 89 (statement -> FOR varid EQUAL for-list DO statement .)
    SEMICOLON       reduce using rule 89 (statement -> FOR varid EQUAL for-list DO statement .)
    UNTIL           reduce using rule 89 (statement -> FOR varid EQUAL for-list DO statement .)
    ELSE            reduce using rule 89 (statement -> FOR varid EQUAL for-list DO statement .)


state 309

    (105) for-list -> expression TO expression .
    (112) expression -> expression . relational-op additive-expression
    (114) relational-op -> . LESS
    (115) relational-op -> . LESSEQUAL
    (116) relational-op -> . EQUAL
    (117) relational-op -> . DEQUAL
    (118) relational-op -> . GREATEREQUAL
    (119) relational-op -> . GREATER

    DO              reduce using rule 105 (for-list -> expression TO expression .)
    LESS            shift and go to state 182
    LESSEQUAL       shift and go to state 183
    EQUAL           shift and go to state 184
    DEQUAL          shift and go to state 185
    GREATEREQUAL    shift and go to state 186
    GREATER         shift and go to state 187

    relational-op                  shift and go to state 181

state 310

    (106) for-list -> expression DOWNTO expression .
    (112) expression -> expression . relational-op additive-expression
    (114) relational-op -> . LESS
    (115) relational-op -> . LESSEQUAL
    (116) relational-op -> . EQUAL
    (117) relational-op -> . DEQUAL
    (118) relational-op -> . GREATEREQUAL
    (119) relational-op -> . GREATER

    DO              reduce using rule 106 (for-list -> expression DOWNTO expression .)
    LESS            shift and go to state 182
    LESSEQUAL       shift and go to state 183
    EQUAL           shift and go to state 184
    DEQUAL          shift and go to state 185
    GREATEREQUAL    shift and go to state 186
    GREATER         shift and go to state 187

    relational-op                  shift and go to state 181

state 311

    (59) variant-list -> variant-list SEMICOLON variant .

    SEMICOLON       reduce using rule 59 (variant-list -> variant-list SEMICOLON variant .)
    END             reduce using rule 59 (variant-list -> variant-list SEMICOLON variant .)
    RPAREN          reduce using rule 59 (variant-list -> variant-list SEMICOLON variant .)


state 312

    (61) variant -> case-label-list COLON LPAREN . field-list RPAREN
    (46) field-list -> . fixed-part
    (47) field-list -> . fixed-part SEMICOLON variant-part
    (48) field-list -> . variant-part
    (49) fixed-part -> . record-field
    (50) fixed-part -> . fixed-part SEMICOLON record-field
    (55) variant-part -> . CASE tag-field OF variant-list
    (51) record-field -> . empty
    (52) record-field -> . fieldid-list COLON type
    (157) empty -> .
    (53) fieldid-list -> . ID
    (54) fieldid-list -> . fieldid-list COMMA ID

    CASE            shift and go to state 83
    SEMICOLON       reduce using rule 157 (empty -> .)
    RPAREN          reduce using rule 157 (empty -> .)
    ID              shift and go to state 86

    field-list                     shift and go to state 318
    fixed-part                     shift and go to state 80
    variant-part                   shift and go to state 81
    record-field                   shift and go to state 82
    empty                          shift and go to state 84
    fieldid-list                   shift and go to state 85

state 313

    (74) formal-parameter-section -> VAR parameterid-list COLON typeid .

    RPAREN          reduce using rule 74 (formal-parameter-section -> VAR parameterid-list COLON typeid .)
    SEMICOLON       reduce using rule 74 (formal-parameter-section -> VAR parameterid-list COLON typeid .)


state 314

    (76) formal-parameter-section -> FUNCTION ID parameters COLON . typeid
    (152) typeid -> . ID

    ID              shift and go to state 267

    typeid                         shift and go to state 319

state 315

    (67) proc-or-func -> FUNCTION ID parameters COLON typeid SEMICOLON block-or-forward .

    SEMICOLON       reduce using rule 67 (proc-or-func -> FUNCTION ID parameters COLON typeid SEMICOLON block-or-forward .)


state 316

    (150) element -> expression DOT DOT DOT expression .
    (112) expression -> expression . relational-op additive-expression
    (114) relational-op -> . LESS
    (115) relational-op -> . LESSEQUAL
    (116) relational-op -> . EQUAL
    (117) relational-op -> . DEQUAL
    (118) relational-op -> . GREATEREQUAL
    (119) relational-op -> . GREATER

    RBRACKET        reduce using rule 150 (element -> expression DOT DOT DOT expression .)
    COMMA           reduce using rule 150 (element -> expression DOT DOT DOT expression .)
    LESS            shift and go to state 182
    LESSEQUAL       shift and go to state 183
    EQUAL           shift and go to state 184
    DEQUAL          shift and go to state 185
    GREATEREQUAL    shift and go to state 186
    GREATER         shift and go to state 187

    relational-op                  shift and go to state 181

state 317

    (104) case-list -> case-list SEMICOLON case-label-list COLON . statement
    (81) statement -> . empty
    (82) statement -> . variable EQUAL expression
    (83) statement -> . BEGIN statement-list END statement
    (84) statement -> . IF expression THEN statement
    (85) statement -> . IF expression THEN statement ELSE statement
    (86) statement -> . CASE expression OF case-list END
    (87) statement -> . WHILE expression DO statement
    (88) statement -> . REPEAT statement-list UNTIL expression
    (89) statement -> . FOR varid EQUAL for-list DO statement
    (90) statement -> . procid
    (91) statement -> . procid LPAREN expression-list RPAREN
    (92) statement -> . GOTO label
    (93) statement -> . WITH record-variable-list DO statement
    (94) statement -> . label COLON statement
    (95) statement -> . WRITE LPAREN STRING RPAREN
    (96) statement -> . READ LPAREN ID RPAREN
    (157) empty -> .
    (97) variable -> . ID
    (98) variable -> . variable LBRACKET subscript-list RBRACKET
    (99) variable -> . variable COMMA fieldid
    (100) variable -> . variable
    (154) procid -> . ID
    (109) label -> . INTEGER

    BEGIN           shift and go to state 59
    IF              shift and go to state 64
    CASE            shift and go to state 65
    WHILE           shift and go to state 66
    REPEAT          shift and go to state 67
    FOR             shift and go to state 68
    GOTO            shift and go to state 70
    WITH            shift and go to state 72
    WRITE           shift and go to state 73
    READ            shift and go to state 74
    END             reduce using rule 157 (empty -> .)
    SEMICOLON       reduce using rule 157 (empty -> .)
    ID              shift and go to state 75
    INTEGER         shift and go to state 76

    statement                      shift and go to state 320
    empty                          shift and go to state 62
    variable                       shift and go to state 63
    procid                         shift and go to state 69
    label                          shift and go to state 71

state 318

    (61) variant -> case-label-list COLON LPAREN field-list . RPAREN

    RPAREN          shift and go to state 321


state 319

    (76) formal-parameter-section -> FUNCTION ID parameters COLON typeid .

    RPAREN          reduce using rule 76 (formal-parameter-section -> FUNCTION ID parameters COLON typeid .)
    SEMICOLON       reduce using rule 76 (formal-parameter-section -> FUNCTION ID parameters COLON typeid .)


state 320

    (104) case-list -> case-list SEMICOLON case-label-list COLON statement .

    END             reduce using rule 104 (case-list -> case-list SEMICOLON case-label-list COLON statement .)
    SEMICOLON       reduce using rule 104 (case-list -> case-list SEMICOLON case-label-list COLON statement .)


state 321

    (61) variant -> case-label-list COLON LPAREN field-list RPAREN .

    SEMICOLON       reduce using rule 61 (variant -> case-label-list COLON LPAREN field-list RPAREN .)
    END             reduce using rule 61 (variant -> case-label-list COLON LPAREN field-list RPAREN .)
    RPAREN          reduce using rule 61 (variant -> case-label-list COLON LPAREN field-list RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for EQUAL in state 63 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 63 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 63 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 145 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 145 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 145 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 239 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 258 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 258 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 258 resolved as shift
WARNING: reduce/reduce conflict in state 8 resolved using rule (constid -> ID)
WARNING: rejected rule (typeid -> ID) in state 8
WARNING: reduce/reduce conflict in state 28 resolved using rule (type -> typeid)
WARNING: rejected rule (simple-type -> typeid) in state 28
WARNING: reduce/reduce conflict in state 101 resolved using rule (constid -> ID)
WARNING: rejected rule (typeid -> ID) in state 101
WARNING: reduce/reduce conflict in state 145 resolved using rule (variable -> variable)
WARNING: rejected rule (record-variable-list -> variable) in state 145
WARNING: reduce/reduce conflict in state 258 resolved using rule (variable -> variable)
WARNING: rejected rule (record-variable-list -> record-variable-list COMMA variable) in state 258
WARNING: Rule (record-variable-list -> variable) is never reduced
WARNING: Rule (record-variable-list -> record-variable-list COMMA variable) is never reduced
