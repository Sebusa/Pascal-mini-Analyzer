
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPERSANT AND ARRAY BEGIN BOOLEAN CASE CHAR COLON COMMA COMMENTBLOCK COMMENTLINE COMPARATION CONST COS DEQUAL DISTINT DIV DIVIDE DO DOT DOWNTO ELSE END EQUAL EXP FALSE FILE FOR FORWARD FUNCTION GOTO GREATER GREATEREQUAL HASHTAG ID IF INPUT INTEGER LABEL LBLOCK LBRACKET LESS LESSEQUAL LN LPAREN MINUS MOD NIL NOT NUMBER OF OR OUTPUT PACKED PLUS POT PROCEDURE PROGRAM QUOT RBLOCK RBRACKET READ REAL RECORD REPEAT RPAREN SEMICOLON SET SIN SQR SQRT STRING THEN TIMES TO TRUE TYPE UNTIL USES VAR WHILE WITH WRITEpascal-program : PROGRAM ID program-heading SEMICOLON block DOT\n\t\t\t\t\t\t| PROGRAM ID SEMICOLON block DOTprogram-heading : LPAREN identifier-list RPARENidentifier-list : ID \n\t\t\t\t\t   | identifier-list COMMA IDblock : block1 \n\t\t\t | label-declaration SEMICOLON block1block1 : block2 \n\t\t\t  | constant-declaration SEMICOLON block2block2 : block3 \n\t\t\t  | type-declaration SEMICOLON block3block3 : block4 \n\t\t\t  | variable-declaration SEMICOLON block4block4 : block5 \n\t\t\t  | proc-and-func-declaration SEMICOLON block5block5 : BEGIN statement-list ENDlabel-declaration : label INTEGER \n\t\t\t\t\t\t | label-declaration COMMA  INTEGERconstant-declaration : CONST ID EQUAL constant \n\t\t\t\t\t\t\t| constant-declaration  SEMICOLON  ID EQUAL constanttype-declaration : type ID EQUAL type \n\t\t\t\t\t\t| type-declaration SEMICOLON ID EQUAL type variable-declaration : VAR variableid-list COLON type \n\t\t\t\t\t\t\t| variable-declaration SEMICOLON variableid-list COLON type variableid-list : ID \n\t\t\t\t\t   | variableid-list COMMA IDconstant : INTEGER\n\t\t\t\t| NUMBER \n\t\t\t\t| REAL \n\t\t\t\t| STRING \n\t\t\t\t| constid  \n\t\t\t\t| PLUS constidtype : simple-type \n\t\t\t| structured-type \n\t\t\t| typeidsimple-type : LPAREN identifier-list RPAREN \n\t\t\t\t   | constant\n\t\t\t\t   | typeidstructured-type : ARRAY LBRACKET index-list RBRACKET OF type \n\t\t\t\t\t   | RECORD field-list END \n\t\t\t\t\t   | SET OF simple-type \n\t\t\t\t\t   | FILE OF type \n\t\t\t\t\t   | PACKED structured-typeindex-list : simple-type \n\t\t\t\t  | index-list COMMA simple-typefield-list : fixed-part \n\t\t\t\t  | fixed-part SEMICOLON variant-part \n\t\t\t\t  | variant-partfixed-part : record-field \n\t\t\t\t  | fixed-part SEMICOLON record-fieldrecord-field : empty \n\t\t\t\t\t| fieldid-list COLON typefieldid-list : ID \n\t\t\t\t\t| fieldid-list COMMA IDvariant-part : CASE tag-field OF variant-listtag-field : typeid \n\t\t\t\t | ID COLON typeidvariant-list : variant \n\t\t\t\t\t| variant-list SEMICOLON variantvariant : empty \n\t\t\t   | case-label-list COLON LPAREN field-list RPARENcase-label-list : constant \n\t\t\t\t\t   | case-label-list COMMA constantproc-and-func-declaration : proc-or-func \n\t\t\t\t\t\t\t\t | proc-and-func-declaration SEMICOLON proc-or-func proc-or-func : PROCEDURE ID parameters SEMICOLON block-or-forward\n\t\t \t\t\t| FUNCTION  ID parameters COLON typeid SEMICOLON block-or-forward block-or-forward : block \n\t\t\t\t\t\t| FORWARDparameters : LPAREN formal-parameter-list RPARENformal-parameter-list : formal-parameter-section\n\t\t \t \t\t\t\t | formal-parameter-list SEMICOLON formal-parameter-sectionformal-parameter-section : parameterid-list COLON typeid \n\t\t\t\t\t\t\t    | VAR parameterid-list COLON typeid \n\t\t\t\t\t\t\t\t| PROCEDURE ID parameters \n\t\t\t\t\t\t\t\t| FUNCTION ID parameters COLON typeidparameterid-list : ID \n\t\t\t\t\t    | parameterid-list COMMA IDstatement-list : statement\n\t\t\t\t\t  | statement-list SEMICOLON statementstatement : empty \n   \t\t\t\t| variable EQUAL expression \n   \t\t\t\t| BEGIN statement-list END statement \n   \t\t\t\t| IF expression THEN statement \n   \t\t\t\t| IF expression THEN statement ELSE statement  \n   \t\t\t\t| CASE expression OF case-list END  \n   \t\t\t\t| WHILE expression DO statement  \n  \t\t\t\t| REPEAT statement-list UNTIL expression  \n   \t\t\t\t| FOR varid EQUAL for-list DO statement  \n   \t\t\t\t| procid  \n   \t\t\t\t| procid LPAREN expression-list RPAREN  \n   \t\t\t\t| GOTO label \n   \t\t\t\t| WITH record-variable-list DO statement  \n   \t\t\t\t| label COLON statement\n\t\t\t\t| WRITE LPAREN STRING RPAREN\n\t\t\t\t| READ LPAREN ID RPAREN\n\t\t\t\tvariable  : ID  \n\t\t\t    | variable LBRACKET subscript-list RBRACKET  \n\t\t\t    | variable COMMA fieldid  \n\t\t\t    | variablesubscript-list : expression  \n    \t\t\t\t  |\tsubscript-list COMMA expressioncase-list : case-label-list COLON statement  \n   \t\t\t\t| case-list SEMICOLON case-label-list COLON statementfor-list : expression TO expression  \n    \t\t\t| expression DOWNTO expressionexpression-list : expression  \n    \t\t\t\t   | expression-list COMMA expressionlabel : INTEGERrecord-variable-list : variable  \n    \t\t\t\t\t\t| record-variable-list COMMA variableexpression : expression relational-op additive-expression \n   \t\t\t\t | additive-expressionrelational-op : LESS\n\t\t\t\t\t| LESSEQUAL  \n\t\t\t\t\t| EQUAL  \n\t\t\t\t\t| DEQUAL  \n\t\t\t\t\t| GREATEREQUAL  \n\t\t\t\t\t| GREATERadditive-expression : additive-expression additive-op multiplicative-expression \n   \t\t\t\t\t\t  | multiplicative-expressionadditive-op : PLUS  \n   \t\t\t\t  |\tMINUS  \n\t\t\t\t  |\tORmultiplicative-expression : multiplicative-expression multiplicative-op unary-expression \n   \t\t\t\t\t\t\t\t| unary-expressionmultiplicative-op : TIMES  \n   \t\t\t\t\t\t| DIVIDE  \n\t\t\t\t\t    | DIV  \n\t\t\t\t\t\t| MOD  \n\t\t\t\t\t\t| AND  \n\t\t\t\t\t\tunary-expression : unary-op unary-expression \n   \t\t\t\t\t   | primary-expressionunary-op : PLUS \n\t\t\t\t| MINUS \n\t\t\t\t| NOTprimary-expression : ID\n\t\t\t\t\t\t | NUMBER\n\t\t\t\t\t\t | INTEGER\n\t\t\t\t\t\t | REAL\n\t\t\t\t\t\t | STRING \n\t\t\t\t\t\t | NIL\n\t\t\t\t\t\t | funcid LPAREN expression-list RPAREN \n\t\t\t\t\t\t | LBRACKET element-list RBRACKET \n\t\t\t\t\t\t | LPAREN expression RPARENelement-list : empty \n\t\t\t\t   | element \n\t\t\t\t   | element-list COMMA elementelement : expression \n   \t\t\t  | expression DOT DOT DOT expressionconstid : IDtypeid : IDfuncid : IDprocid : IDfieldid : IDvarid : IDempty : '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'pascal-program':([0,],[1,]),'program-heading':([3,],[4,]),'block':([5,7,224,302,],[9,46,270,270,]),'block1':([5,7,48,224,302,],[10,10,97,10,10,]),'label-declaration':([5,7,224,302,],[11,11,11,11,]),'block2':([5,7,48,50,224,302,],[12,12,12,100,12,12,]),'constant-declaration':([5,7,48,224,302,],[13,13,13,13,13,]),'label':([5,7,29,59,67,70,114,143,173,180,206,212,224,281,287,289,302,317,],[14,14,71,71,71,142,71,71,71,71,71,71,14,71,71,71,14,71,]),'block3':([5,7,48,50,52,224,302,],[16,16,16,16,102,16,16,]),'type-declaration':([5,7,48,50,224,302,],[17,17,17,17,17,17,]),'constant':([5,7,48,50,78,87,88,104,107,110,158,166,167,169,205,217,220,224,261,286,288,294,302,],[19,19,19,19,19,19,19,168,19,19,19,233,19,19,250,19,250,19,19,250,307,250,19,]),'block4':([5,7,48,50,52,54,224,302,],[20,20,20,20,20,105,20,20,]),'variable-declaration':([5,7,48,50,52,224,302,],[21,21,21,21,21,21,21,]),'type':([5,7,48,50,88,107,110,158,167,169,224,261,302,],[22,22,22,22,161,170,171,222,234,235,22,293,22,]),'block5':([5,7,48,50,52,54,56,224,302,],[23,23,23,23,23,23,108,23,23,]),'proc-and-func-declaration':([5,7,48,50,52,54,224,302,],[24,24,24,24,24,24,24,24,]),'simple-type':([5,7,48,50,78,87,88,107,110,158,167,169,217,224,261,302,],[26,26,26,26,151,160,26,26,26,26,26,26,262,26,26,26,]),'structured-type':([5,7,36,48,50,88,107,110,158,167,169,224,261,302,],[27,27,89,27,27,27,27,27,27,27,27,27,27,27,]),'typeid':([5,7,48,50,78,83,87,88,107,110,158,167,169,217,221,224,232,261,274,299,302,314,],[28,28,28,28,152,156,152,28,28,28,28,28,28,152,268,28,279,28,297,313,28,319,]),'proc-or-func':([5,7,48,50,52,54,56,224,302,],[30,30,30,30,30,30,109,30,30,]),'constid':([5,7,43,48,50,78,87,88,104,107,110,158,166,167,169,205,217,220,224,261,286,288,294,302,],[42,42,92,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'identifier-list':([6,31,],[44,77,]),'variableid-list':([25,54,],[57,106,]),'statement-list':([29,59,67,],[60,112,138,]),'statement':([29,59,67,114,143,173,180,206,212,281,287,289,317,],[61,61,61,174,211,236,239,251,257,303,306,308,320,]),'empty':([29,33,59,67,114,135,143,154,173,180,206,212,220,281,287,289,294,312,317,],[62,84,62,62,62,202,62,84,62,62,62,62,265,62,62,62,265,84,62,]),'variable':([29,59,67,72,114,143,173,180,206,212,213,281,287,289,317,],[63,63,63,145,63,63,63,63,63,63,258,63,63,63,63,]),'procid':([29,59,67,114,143,173,180,206,212,281,287,289,317,],[69,69,69,69,69,69,69,69,69,69,69,69,69,]),'field-list':([33,312,],[79,318,]),'fixed-part':([33,312,],[80,80,]),'variant-part':([33,154,312,],[81,218,81,]),'record-field':([33,154,312,],[82,219,82,]),'fieldid-list':([33,154,312,],[85,85,85,]),'expression':([64,65,66,115,116,134,135,141,199,207,208,238,246,256,290,291,304,],[118,136,137,175,177,200,204,210,210,252,254,280,204,292,309,310,316,]),'additive-expression':([64,65,66,115,116,134,135,141,181,199,207,208,238,246,256,290,291,304,],[119,119,119,119,119,119,119,119,240,119,119,119,119,119,119,119,119,119,]),'multiplicative-expression':([64,65,66,115,116,134,135,141,181,188,199,207,208,238,246,256,290,291,304,],[120,120,120,120,120,120,120,120,120,241,120,120,120,120,120,120,120,120,120,]),'unary-expression':([64,65,66,115,116,122,134,135,141,181,188,192,199,207,208,238,246,256,290,291,304,],[121,121,121,121,121,198,121,121,121,121,121,242,121,121,121,121,121,121,121,121,121,]),'unary-op':([64,65,66,115,116,122,134,135,141,181,188,192,199,207,208,238,246,256,290,291,304,],[122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,]),'primary-expression':([64,65,66,115,116,122,134,135,141,181,188,192,199,207,208,238,246,256,290,291,304,],[123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,]),'funcid':([64,65,66,115,116,122,134,135,141,181,188,192,199,207,208,238,246,256,290,291,304,],[133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,]),'varid':([68,],[139,]),'record-variable-list':([72,],[144,]),'index-list':([78,],[150,]),'tag-field':([83,],[155,]),'parameters':([90,91,277,278,],[162,164,300,301,]),'subscript-list':([116,],[176,]),'fieldid':([117,],[178,]),'relational-op':([118,136,137,175,177,200,204,210,252,254,280,292,309,310,316,],[181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,]),'additive-op':([119,240,],[188,188,]),'multiplicative-op':([120,241,],[192,192,]),'element-list':([135,],[201,]),'element':([135,246,],[203,283,]),'expression-list':([141,199,],[209,243,]),'formal-parameter-list':([163,],[225,]),'formal-parameter-section':([163,273,],[226,296,]),'parameterid-list':([163,228,273,],[227,276,227,]),'case-list':([205,],[248,]),'case-label-list':([205,220,286,294,],[249,266,305,266,]),'for-list':([208,],[253,]),'variant-list':([220,],[263,]),'variant':([220,294,],[264,311,]),'block-or-forward':([224,302,],[269,315,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> pascal-program","S'",1,None,None,None),
  ('pascal-program -> PROGRAM ID program-heading SEMICOLON block DOT','pascal-program',6,'p_program','parser.py',9),
  ('pascal-program -> PROGRAM ID SEMICOLON block DOT','pascal-program',5,'p_program','parser.py',10),
  ('program-heading -> LPAREN identifier-list RPAREN','program-heading',3,'p_heading','parser.py',14),
  ('identifier-list -> ID','identifier-list',1,'p_identifierList','parser.py',19),
  ('identifier-list -> identifier-list COMMA ID','identifier-list',3,'p_identifierList','parser.py',20),
  ('block -> block1','block',1,'p_block','parser.py',25),
  ('block -> label-declaration SEMICOLON block1','block',3,'p_block','parser.py',26),
  ('block1 -> block2','block1',1,'p_block1','parser.py',30),
  ('block1 -> constant-declaration SEMICOLON block2','block1',3,'p_block1','parser.py',31),
  ('block2 -> block3','block2',1,'p_block2','parser.py',35),
  ('block2 -> type-declaration SEMICOLON block3','block2',3,'p_block2','parser.py',36),
  ('block3 -> block4','block3',1,'p_block3','parser.py',40),
  ('block3 -> variable-declaration SEMICOLON block4','block3',3,'p_block3','parser.py',41),
  ('block4 -> block5','block4',1,'p_block4','parser.py',45),
  ('block4 -> proc-and-func-declaration SEMICOLON block5','block4',3,'p_block4','parser.py',46),
  ('block5 -> BEGIN statement-list END','block5',3,'p_block5','parser.py',50),
  ('label-declaration -> label INTEGER','label-declaration',2,'p_labelDeclaration','parser.py',54),
  ('label-declaration -> label-declaration COMMA INTEGER','label-declaration',3,'p_labelDeclaration','parser.py',55),
  ('constant-declaration -> CONST ID EQUAL constant','constant-declaration',4,'p_constantDeclaration','parser.py',60),
  ('constant-declaration -> constant-declaration SEMICOLON ID EQUAL constant','constant-declaration',5,'p_constantDeclaration','parser.py',61),
  ('type-declaration -> type ID EQUAL type','type-declaration',4,'p_typeDeclaration','parser.py',65),
  ('type-declaration -> type-declaration SEMICOLON ID EQUAL type','type-declaration',5,'p_typeDeclaration','parser.py',66),
  ('variable-declaration -> VAR variableid-list COLON type','variable-declaration',4,'p_variableDeclaration','parser.py',70),
  ('variable-declaration -> variable-declaration SEMICOLON variableid-list COLON type','variable-declaration',5,'p_variableDeclaration','parser.py',71),
  ('variableid-list -> ID','variableid-list',1,'p_variableIdList','parser.py',75),
  ('variableid-list -> variableid-list COMMA ID','variableid-list',3,'p_variableIdList','parser.py',76),
  ('constant -> INTEGER','constant',1,'p_constant','parser.py',80),
  ('constant -> NUMBER','constant',1,'p_constant','parser.py',81),
  ('constant -> REAL','constant',1,'p_constant','parser.py',82),
  ('constant -> STRING','constant',1,'p_constant','parser.py',83),
  ('constant -> constid','constant',1,'p_constant','parser.py',84),
  ('constant -> PLUS constid','constant',2,'p_constant','parser.py',85),
  ('type -> simple-type','type',1,'p_type','parser.py',89),
  ('type -> structured-type','type',1,'p_type','parser.py',90),
  ('type -> typeid','type',1,'p_type','parser.py',91),
  ('simple-type -> LPAREN identifier-list RPAREN','simple-type',3,'p_simpleType','parser.py',96),
  ('simple-type -> constant','simple-type',1,'p_simpleType','parser.py',97),
  ('simple-type -> typeid','simple-type',1,'p_simpleType','parser.py',98),
  ('structured-type -> ARRAY LBRACKET index-list RBRACKET OF type','structured-type',6,'p_structuredType','parser.py',102),
  ('structured-type -> RECORD field-list END','structured-type',3,'p_structuredType','parser.py',103),
  ('structured-type -> SET OF simple-type','structured-type',3,'p_structuredType','parser.py',104),
  ('structured-type -> FILE OF type','structured-type',3,'p_structuredType','parser.py',105),
  ('structured-type -> PACKED structured-type','structured-type',2,'p_structuredType','parser.py',106),
  ('index-list -> simple-type','index-list',1,'p_indexList','parser.py',110),
  ('index-list -> index-list COMMA simple-type','index-list',3,'p_indexList','parser.py',111),
  ('field-list -> fixed-part','field-list',1,'p_fieldList','parser.py',115),
  ('field-list -> fixed-part SEMICOLON variant-part','field-list',3,'p_fieldList','parser.py',116),
  ('field-list -> variant-part','field-list',1,'p_fieldList','parser.py',117),
  ('fixed-part -> record-field','fixed-part',1,'p_fixedPart','parser.py',121),
  ('fixed-part -> fixed-part SEMICOLON record-field','fixed-part',3,'p_fixedPart','parser.py',122),
  ('record-field -> empty','record-field',1,'p_recordField','parser.py',126),
  ('record-field -> fieldid-list COLON type','record-field',3,'p_recordField','parser.py',127),
  ('fieldid-list -> ID','fieldid-list',1,'p_fieldidList','parser.py',131),
  ('fieldid-list -> fieldid-list COMMA ID','fieldid-list',3,'p_fieldidList','parser.py',132),
  ('variant-part -> CASE tag-field OF variant-list','variant-part',4,'p_variantPart','parser.py',136),
  ('tag-field -> typeid','tag-field',1,'p_tagField','parser.py',140),
  ('tag-field -> ID COLON typeid','tag-field',3,'p_tagField','parser.py',141),
  ('variant-list -> variant','variant-list',1,'p_variantList','parser.py',145),
  ('variant-list -> variant-list SEMICOLON variant','variant-list',3,'p_variantList','parser.py',146),
  ('variant -> empty','variant',1,'p_variant','parser.py',150),
  ('variant -> case-label-list COLON LPAREN field-list RPAREN','variant',5,'p_variant','parser.py',151),
  ('case-label-list -> constant','case-label-list',1,'p_caseLabelList','parser.py',155),
  ('case-label-list -> case-label-list COMMA constant','case-label-list',3,'p_caseLabelList','parser.py',156),
  ('proc-and-func-declaration -> proc-or-func','proc-and-func-declaration',1,'p_procAndFuncDeclaration','parser.py',160),
  ('proc-and-func-declaration -> proc-and-func-declaration SEMICOLON proc-or-func','proc-and-func-declaration',3,'p_procAndFuncDeclaration','parser.py',161),
  ('proc-or-func -> PROCEDURE ID parameters SEMICOLON block-or-forward','proc-or-func',5,'p_procOrFunc','parser.py',165),
  ('proc-or-func -> FUNCTION ID parameters COLON typeid SEMICOLON block-or-forward','proc-or-func',7,'p_procOrFunc','parser.py',166),
  ('block-or-forward -> block','block-or-forward',1,'p_blockOrFordward','parser.py',170),
  ('block-or-forward -> FORWARD','block-or-forward',1,'p_blockOrFordward','parser.py',171),
  ('parameters -> LPAREN formal-parameter-list RPAREN','parameters',3,'p_parameters','parser.py',175),
  ('formal-parameter-list -> formal-parameter-section','formal-parameter-list',1,'p_formalParameterList','parser.py',179),
  ('formal-parameter-list -> formal-parameter-list SEMICOLON formal-parameter-section','formal-parameter-list',3,'p_formalParameterList','parser.py',180),
  ('formal-parameter-section -> parameterid-list COLON typeid','formal-parameter-section',3,'p_formalParameterSection','parser.py',184),
  ('formal-parameter-section -> VAR parameterid-list COLON typeid','formal-parameter-section',4,'p_formalParameterSection','parser.py',185),
  ('formal-parameter-section -> PROCEDURE ID parameters','formal-parameter-section',3,'p_formalParameterSection','parser.py',186),
  ('formal-parameter-section -> FUNCTION ID parameters COLON typeid','formal-parameter-section',5,'p_formalParameterSection','parser.py',187),
  ('parameterid-list -> ID','parameterid-list',1,'p_parameteridList','parser.py',191),
  ('parameterid-list -> parameterid-list COMMA ID','parameterid-list',3,'p_parameteridList','parser.py',192),
  ('statement-list -> statement','statement-list',1,'p_statementList','parser.py',196),
  ('statement-list -> statement-list SEMICOLON statement','statement-list',3,'p_statementList','parser.py',197),
  ('statement -> empty','statement',1,'p_statement','parser.py',201),
  ('statement -> variable EQUAL expression','statement',3,'p_statement','parser.py',202),
  ('statement -> BEGIN statement-list END statement','statement',4,'p_statement','parser.py',203),
  ('statement -> IF expression THEN statement','statement',4,'p_statement','parser.py',204),
  ('statement -> IF expression THEN statement ELSE statement','statement',6,'p_statement','parser.py',205),
  ('statement -> CASE expression OF case-list END','statement',5,'p_statement','parser.py',206),
  ('statement -> WHILE expression DO statement','statement',4,'p_statement','parser.py',207),
  ('statement -> REPEAT statement-list UNTIL expression','statement',4,'p_statement','parser.py',208),
  ('statement -> FOR varid EQUAL for-list DO statement','statement',6,'p_statement','parser.py',209),
  ('statement -> procid','statement',1,'p_statement','parser.py',210),
  ('statement -> procid LPAREN expression-list RPAREN','statement',4,'p_statement','parser.py',211),
  ('statement -> GOTO label','statement',2,'p_statement','parser.py',212),
  ('statement -> WITH record-variable-list DO statement','statement',4,'p_statement','parser.py',213),
  ('statement -> label COLON statement','statement',3,'p_statement','parser.py',214),
  ('statement -> WRITE LPAREN STRING RPAREN','statement',4,'p_statement','parser.py',215),
  ('statement -> READ LPAREN ID RPAREN','statement',4,'p_statement','parser.py',216),
  ('variable -> ID','variable',1,'p_variable','parser.py',221),
  ('variable -> variable LBRACKET subscript-list RBRACKET','variable',4,'p_variable','parser.py',222),
  ('variable -> variable COMMA fieldid','variable',3,'p_variable','parser.py',223),
  ('variable -> variable','variable',1,'p_variable','parser.py',224),
  ('subscript-list -> expression','subscript-list',1,'p_subscriptlist','parser.py',228),
  ('subscript-list -> subscript-list COMMA expression','subscript-list',3,'p_subscriptlist','parser.py',229),
  ('case-list -> case-label-list COLON statement','case-list',3,'p_caselist','parser.py',233),
  ('case-list -> case-list SEMICOLON case-label-list COLON statement','case-list',5,'p_caselist','parser.py',234),
  ('for-list -> expression TO expression','for-list',3,'p_forlist','parser.py',238),
  ('for-list -> expression DOWNTO expression','for-list',3,'p_forlist','parser.py',239),
  ('expression-list -> expression','expression-list',1,'p_expressionlist','parser.py',243),
  ('expression-list -> expression-list COMMA expression','expression-list',3,'p_expressionlist','parser.py',244),
  ('label -> INTEGER','label',1,'p_label','parser.py',248),
  ('record-variable-list -> variable','record-variable-list',1,'p_recordvariablelist','parser.py',252),
  ('record-variable-list -> record-variable-list COMMA variable','record-variable-list',3,'p_recordvariablelist','parser.py',253),
  ('expression -> expression relational-op additive-expression','expression',3,'p_expression','parser.py',257),
  ('expression -> additive-expression','expression',1,'p_expression','parser.py',258),
  ('relational-op -> LESS','relational-op',1,'p_relationalop','parser.py',262),
  ('relational-op -> LESSEQUAL','relational-op',1,'p_relationalop','parser.py',263),
  ('relational-op -> EQUAL','relational-op',1,'p_relationalop','parser.py',264),
  ('relational-op -> DEQUAL','relational-op',1,'p_relationalop','parser.py',265),
  ('relational-op -> GREATEREQUAL','relational-op',1,'p_relationalop','parser.py',266),
  ('relational-op -> GREATER','relational-op',1,'p_relationalop','parser.py',267),
  ('additive-expression -> additive-expression additive-op multiplicative-expression','additive-expression',3,'p_additiveExpression','parser.py',271),
  ('additive-expression -> multiplicative-expression','additive-expression',1,'p_additiveExpression','parser.py',272),
  ('additive-op -> PLUS','additive-op',1,'p_additiveop','parser.py',276),
  ('additive-op -> MINUS','additive-op',1,'p_additiveop','parser.py',277),
  ('additive-op -> OR','additive-op',1,'p_additiveop','parser.py',278),
  ('multiplicative-expression -> multiplicative-expression multiplicative-op unary-expression','multiplicative-expression',3,'p_multiplicativeexpression','parser.py',282),
  ('multiplicative-expression -> unary-expression','multiplicative-expression',1,'p_multiplicativeexpression','parser.py',283),
  ('multiplicative-op -> TIMES','multiplicative-op',1,'p_multiplicative_op','parser.py',287),
  ('multiplicative-op -> DIVIDE','multiplicative-op',1,'p_multiplicative_op','parser.py',288),
  ('multiplicative-op -> DIV','multiplicative-op',1,'p_multiplicative_op','parser.py',289),
  ('multiplicative-op -> MOD','multiplicative-op',1,'p_multiplicative_op','parser.py',290),
  ('multiplicative-op -> AND','multiplicative-op',1,'p_multiplicative_op','parser.py',291),
  ('unary-expression -> unary-op unary-expression','unary-expression',2,'p_unaryExpression','parser.py',296),
  ('unary-expression -> primary-expression','unary-expression',1,'p_unaryExpression','parser.py',297),
  ('unary-op -> PLUS','unary-op',1,'p_unaryop','parser.py',301),
  ('unary-op -> MINUS','unary-op',1,'p_unaryop','parser.py',302),
  ('unary-op -> NOT','unary-op',1,'p_unaryop','parser.py',303),
  ('primary-expression -> ID','primary-expression',1,'p_primaryexpression','parser.py',307),
  ('primary-expression -> NUMBER','primary-expression',1,'p_primaryexpression','parser.py',308),
  ('primary-expression -> INTEGER','primary-expression',1,'p_primaryexpression','parser.py',309),
  ('primary-expression -> REAL','primary-expression',1,'p_primaryexpression','parser.py',310),
  ('primary-expression -> STRING','primary-expression',1,'p_primaryexpression','parser.py',311),
  ('primary-expression -> NIL','primary-expression',1,'p_primaryexpression','parser.py',312),
  ('primary-expression -> funcid LPAREN expression-list RPAREN','primary-expression',4,'p_primaryexpression','parser.py',313),
  ('primary-expression -> LBRACKET element-list RBRACKET','primary-expression',3,'p_primaryexpression','parser.py',314),
  ('primary-expression -> LPAREN expression RPAREN','primary-expression',3,'p_primaryexpression','parser.py',315),
  ('element-list -> empty','element-list',1,'p_elementlist','parser.py',319),
  ('element-list -> element','element-list',1,'p_elementlist','parser.py',320),
  ('element-list -> element-list COMMA element','element-list',3,'p_elementlist','parser.py',321),
  ('element -> expression','element',1,'p_element','parser.py',325),
  ('element -> expression DOT DOT DOT expression','element',5,'p_element','parser.py',326),
  ('constid -> ID','constid',1,'p_constid','parser.py',330),
  ('typeid -> ID','typeid',1,'p_typeid','parser.py',334),
  ('funcid -> ID','funcid',1,'p_funcid','parser.py',338),
  ('procid -> ID','procid',1,'p_procid','parser.py',342),
  ('fieldid -> ID','fieldid',1,'p_fieldid','parser.py',346),
  ('varid -> ID','varid',1,'p_varid','parser.py',350),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',354),
]
